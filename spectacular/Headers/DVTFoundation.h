/*
 *     Generated by class-dump 3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct DVTBitSet {
    unsigned long long _field1;
    unsigned long long _field2[0];
};

struct DVTNestedMacroExpansionState {
    id _field1;
    id _field2;
    id _field3;
    struct DVTNestedMacroExpansionState *_field4;
};

struct DVTSlice {
    void **items;
    char wantsStrong;
    char wantsWeak;
    char wantsARC;
    char shouldCopyIn;
    char usesStrong;
    char usesWeak;
    char usesARC;
    char usesSentinel;
    char pointerPersonality;
    char integerPersonality;
    char simpleReadClear;
    DVTWeakCallBack *callback;
    void *sizeFunction;
    void *hashFunction;
    void *isEqualFunction;
    void *describeFunction;
    void *acquireFunction;
    void *relinquishFunction;
    void *allocateFunction;
    void *freeFunction;
    void *readAt;
    void *clearAt;
    void *storeAt;
};

struct UParseError {
    int _field1;
    int _field2;
    unsigned short _field3[16];
    unsigned short _field4[16];
};

struct _CSTypeRef {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _DVTDiffContextFlags {
    unsigned int ignoresCase:1;
    unsigned int ignoresLeadingSpaces:1;
    unsigned int ignoresSpacesInRuns:1;
    unsigned int ignoresTrailingSpaces:1;
    unsigned int ignoresLineEnds:1;
    unsigned int ignoresCommon:1;
    unsigned int RESERVED:26;
};

struct _DVTDiffToken {
    struct _NSRange range;
    unsigned long long hash;
    int type;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct fsid {
    int _field1[2];
};

struct stat {
    int _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned long long _field4;
    unsigned int _field5;
    unsigned int _field6;
    int _field7;
    struct timespec _field8;
    struct timespec _field9;
    struct timespec _field10;
    struct timespec _field11;
    long long _field12;
    long long _field13;
    int _field14;
    unsigned int _field15;
    unsigned int _field16;
    int _field17;
    long long _field18[2];
};

struct statfs {
    unsigned int _field1;
    int _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct fsid _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    char _field13[16];
    char _field14[1024];
    char _field15[1024];
    unsigned int _field16[8];
};

struct timespec {
    long long _field1;
    long long _field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned short *_field1;
    long long _field2;
} CDStruct_f444e920;

typedef struct {
    double loadFactor;
    long long numberOfHashFunctions;
    long long windowWidth;
} CDStruct_fd921134;

typedef struct {
    long long expectedNumberOfInsertions;
    double loadFactor;
    long long numberOfHashFunctions;
} CDStruct_d703e233;

typedef struct {
    long long location;
    long long length;
} CDStruct_627e0f85;

typedef struct {
    int tokenType;
    int tokenAltType;
    CDStruct_627e0f85 charRange;
    char *lexeme;
    int lexemeLength;
    int outOfBand;
} CDStruct_341fcc3f;

typedef struct {
    CDStruct_d703e233 bloomFilterSpecification;
    long long windowWidth;
    double timestamp;
} CDStruct_26ab8ed5;

#pragma mark Typedef'd Unions

typedef union {
    struct {
        unsigned short updateComponent;
        unsigned short minorComponent;
        unsigned int majorComponent;
    } independent;
    unsigned long long combined;
} CDUnion_7de6e739;

#pragma mark -

/*
 * File: /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/DVTFoundation
 * UUID: C4552855-AC7A-36FD-BDDB-EF6626C3A125
 * Arch: x86_64
 *       Current version: 2089.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *       SDK version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 */

@protocol DVTAssertionHandling <NSObject>
- (void)handleWarningInFunction:(id)arg1 fileName:(id)arg2 lineNumber:(long long)arg3 messageFormat:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleWarningInMethod:(SEL)arg1 object:(id)arg2 fileName:(id)arg3 lineNumber:(long long)arg4 messageFormat:(id)arg5 arguments:(struct __va_list_tag [1])arg6;
- (void)handleFailureInFunction:(id)arg1 fileName:(id)arg2 lineNumber:(long long)arg3 messageFormat:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 fileName:(id)arg3 lineNumber:(long long)arg4 messageFormat:(id)arg5 arguments:(struct __va_list_tag [1])arg6;
@end

@protocol DVTCancellable <NSObject>
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)cancel;
@end

@protocol DVTCancellationBlockCompletion <NSObject>
- (void)waitForCancellation;
@end

@protocol DVTCustomDataStoring <NSObject>
@property(readonly) NSString *displayName;
- (BOOL)supportsCustomDataForOwnership:(id)arg1;
- (void)moveCustomDataWithSpecifier:(id)arg1 toSpecifier:(id)arg2 completionQueue:(id)arg3 completionBlock:(id)arg4;
- (void)removeCustomDataWithSpecifier:(id)arg1 completionQueue:(id)arg2 completionBlock:(id)arg3;
- (void)writeCustomData:(id)arg1 withSpecifier:(id)arg2 forceOverwrite:(BOOL)arg3 completionQueue:(id)arg4 completionBlock:(id)arg5;
- (id)readCustomDataWithSpecifier:(id)arg1 error:(id *)arg2;
- (id)customDataOwnershipsForGrouping:(id)arg1;
- (id)customDataSpecifiersForGrouping:(id)arg1 ownership:(id)arg2;
@end

@protocol DVTDiffHashing
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@protocol DVTDownloadableInstallationHelper <NSObject>
- (void)downloadableNamed:(id)arg1 needsTerminationOfAppsWithBundleIdentifier:(id)arg2 completionBlock:(id)arg3;
@end

@protocol DVTFileDataTypeDetector
+ (id)fileURL:(id)arg1 matchesFileDataTypeDetectorForExtension:(id)arg2 error:(id *)arg3;
@end

@protocol DVTFileSystemRepresentationProviding
- (void)dvt_provideFileSystemRepresentationToBlock:(id)arg1;
@end

@protocol DVTInvalidation <NSObject>
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
@end

@protocol DVTInvalidation_New <DVTInvalidation>
@property(retain) DVTStackBacktrace *creationBacktrace;
- (void)primitiveInvalidate;
@end

@protocol DVTMacroExpansion <NSCopying>
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@end

@protocol DVTModelObject <NSObject>
@property(readonly, nonatomic) DVTModelObjectGraph *objectGraph;
@end

@protocol DVTObservingToken <DVTCancellable>
@end

@protocol DVTPerformanceTestParser
- (BOOL)performanceTestOutput:(id *)arg1 forInputString:(id)arg2;
@end

@protocol DVTProgressReporting <NSObject>
@property(readonly) long long progress;
@end

@protocol DVTPropertyListEncoding <NSObject>
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
@end

@protocol DVTRegistrable <NSObject>
@property(readonly) NSString *identifier;

@optional
@property(readonly) NSString *displayDescription;
@property(readonly) NSString *displayName;
@end

@protocol DVTSelfInstrumentationSession <NSObject>
+ (id)timeProfileSessionOrError:(id *)arg1;
+ (void)sendStopSignalWithName:(id)arg1;
+ (void)sendPointSignalWithName:(id)arg1;
+ (void)sendStartSignalWithName:(id)arg1;
- (BOOL)endSessionAndSaveToPath:(id)arg1 error:(id *)arg2;
@end

@protocol DVTSimpleSerialization
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
@end

@protocol DVTTextReplacable <NSObject>
- (BOOL)replaceFindResults:(id)arg1 withString:(id)arg2 withError:(id *)arg3;

@optional
- (BOOL)replaceFindResults:(id)arg1 inSelection:(struct _NSRange)arg2 withString:(id)arg3 withError:(id *)arg4;
- (BOOL)replaceTextWithContentsOfURL:(id)arg1 error:(id *)arg2;
@end

@protocol DVTTextlikeFindDescriptor <NSObject>
@property(readonly) int matchStyle;
@end

@protocol DVTXMLUnarchiving <NSObject>
- (id)initFromXMLUnarchiver:(id)arg1 archiveVersion:(float)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSKeyedUnarchiverDelegate <NSObject>

@optional
- (void)unarchiverDidFinish:(id)arg1;
- (void)unarchiverWillFinish:(id)arg1;
- (void)unarchiver:(id)arg1 willReplaceObject:(id)arg2 withObject:(id)arg3;
- (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;
- (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
@end

@protocol NSLocking
- (void)unlock;
- (void)lock;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (id)debugDescription;
@end

@protocol NSUserNotificationCenterDelegate <NSObject>

@optional
- (BOOL)userNotificationCenter:(id)arg1 shouldPresentNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didActivateNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
@end

@protocol _DVTCancellableObservingToken <NSObject>
- (void)_primitiveCancelObservation;
@end

@protocol __ARCLiteIndexedSubscripting__
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
@end

@protocol __ARCLiteKeyedSubscripting__
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
@end

@interface DVTLogger : NSObject
{
}

+ (void)removeActiveLogger:(id)arg1;
+ (void)addActiveLogger:(id)arg1;
+ (id)activeLoggers;
+ (void)initialize;
- (void)decreaseIndentLevelForAspect:(id)arg1;
- (void)increaseIndentLevelForAspect:(id)arg1;
- (void)logMessage:(id)arg1 forAspect:(id)arg2 logLevel:(int)arg3;
- (id)stringForIndentLevel:(unsigned long long)arg1;
- (id)threadPrefixString;

@end

@interface DVTActivationRule : NSObject <DVTPropertyListEncoding>
{
    NSString *_kind;
    NSString *_identifier;
    NSString *_versionString;
    NSPredicate *_query;
}

+ (long long)integerValueForVersionString:(id)arg1;
+ (id)keyPathsForKeysAffectingPredicate;
@property(copy) NSPredicate *query; // @synthesize query=_query;
@property(copy) NSString *versionString; // @synthesize versionString=_versionString;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) NSString *kind; // @synthesize kind=_kind;
@property(readonly) NSPredicate *predicate;
- (id)_predicateWithIdentifier:(id)arg1 versionString:(id)arg2 query:(id)arg3;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;

@end

@interface DVTDiffBinaryDataSource : DVTDiffDataSource
{
    struct _DVTDiffToken _tokenStorage[5];
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setTokenStorage:(struct _DVTDiffToken [5])arg1;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (void)getDiffTokens:(struct _DVTDiffToken *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (struct _DVTDiffToken)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
@property(readonly) DVTFilePath *contentFilePath;
- (void)_setupHash;
- (id)initWithContentFilePath:(id)arg1;

@end

@interface DVTExtension : NSObject <DVTPropertyListEncoding>
{
    NSMutableDictionary *_extensionData;
    DVTPlugInManager *_plugInManager;
    NSString *_identifier;
    NSString *_version;
    NSString *_name;
    DVTPlugIn *_plugIn;
    DVTExtensionPoint *_extensionPoint;
    DVTExtension *_basedOnExtension;
    NSXMLElement *_extensionElement;
    DVTDispatchLock *_faultFiringLock;
    struct {
        unsigned int reserved:60;
        unsigned int _adjustedExtensionData:1;
        unsigned int _checkedExtensionXML:1;
        unsigned int _faultingState:2;
    } _flags;
}

+ (void)initialize;
@property(readonly) DVTExtension *basedOnExtension; // @synthesize basedOnExtension=_basedOnExtension;
@property(readonly) DVTExtensionPoint *extensionPoint; // @synthesize extensionPoint=_extensionPoint;
@property(readonly) DVTPlugIn *plugIn; // @synthesize plugIn=_plugIn;
@property(readonly) NSDictionary *extensionData; // @synthesize extensionData=_extensionData;
@property(readonly) DVTPlugInManager *plugInManager; // @synthesize plugInManager=_plugInManager;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSString *version; // @synthesize version=_version;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (id)_localizedStringForString:(id)arg1;
- (BOOL)_fireExtensionFault:(id *)arg1;
- (void)_adjustClassReferencesInParameterData:(id)arg1 usingSchema:(id)arg2;
- (void)_adjustElementClassAttributes:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (void)_adjustClassAttribute:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (BOOL)_adjustElement:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (BOOL)_adjustAttribute:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (BOOL)_adjustParameterData:(id)arg1 usingSchema:(id)arg2;
- (BOOL)hasValueForKey:(id)arg1;
- (BOOL)_hasValueForKey:(id)arg1 inParameterData:(id)arg2 usingSchema:(id)arg3;
- (id)valueForKey:(id)arg1 error:(id *)arg2;
- (id)valueForKey:(id)arg1;
- (id)_valueForKey:(id)arg1 inParameterData:(id)arg2 usingSchema:(id)arg3 error:(id *)arg4;
@property(readonly) NSXMLElement *extensionElement;
@property(readonly, getter=isValid) BOOL valid;
@property(readonly) NSBundle *bundle;
- (id)description;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithExtensionData:(id)arg1 plugIn:(id)arg2;

@end

@interface DVTExtensionPoint : NSObject <DVTPropertyListEncoding>
{
    NSDictionary *_extensionPointData;
    DVTPlugInManager *_plugInManager;
    NSString *_identifier;
    NSString *_version;
    NSString *_name;
    DVTPlugIn *_plugIn;
    DVTExtensionElementDescription *_extensionSchema;
    DVTExtensionPoint *_parentExtensionPoint;
    NSMutableSet *_extensions;
    NSMutableSet *_childExtensionPoints;
}

@property(readonly) NSSet *childExtensionPoints; // @synthesize childExtensionPoints=_childExtensionPoints;
@property(readonly) NSSet *extensions; // @synthesize extensions=_extensions;
@property(readonly) DVTPlugIn *plugIn; // @synthesize plugIn=_plugIn;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSString *version; // @synthesize version=_version;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (void)_registerChildExtensionPoint:(id)arg1;
- (void)_registerExtension:(id)arg1;
- (id)extensionsMatchingPredicate:(id)arg1;
@property(readonly) NSBundle *bundle;
@property(readonly) DVTExtensionPoint *parentExtensionPoint; // @dynamic parentExtensionPoint;
@property(readonly) DVTExtensionElementDescription *extensionSchema; // @dynamic extensionSchema;
- (void)_setUpParentExtensionPoint;
- (id)description;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithExtensionPointData:(id)arg1 plugIn:(id)arg2;

@end

@interface DVTInvalidExtension : DVTExtension
{
}

+ (void)initialize;
- (BOOL)hasValueForKey:(id)arg1;
- (id)valueForKey:(id)arg1;
- (id)extensionElement;
- (id)basedOnExtension;
- (id)extensionPoint;
- (id)plugIn;
- (BOOL)isValid;
- (id)bundle;
- (id)initWithIdentifier:(id)arg1;
- (void)_throwInvalidExtensionExceptionForProperty:(id)arg1;

@end

@interface DVTPlugIn : NSObject <DVTPropertyListEncoding>
{
    DVTPlugInManager *_plugInManager;
    NSString *_identifier;
    NSString *_version;
    NSString *_name;
    NSMutableSet *_extensions;
    NSMutableDictionary *_extensionsByIdentifier;
    NSMutableSet *_extensionPoints;
    NSMutableDictionary *_extensionPointsByIdentifier;
    NSMutableArray *_activationRules;
    NSMutableSet *_requiredPlugIns;
    NSString *_bundlePath;
    NSBundle *_bundle;
    NSDictionary *_bundleRawInfoDictionary;
    NSString *_path;
    NSString *_principalClassName;
    id _principalInstance;
    BOOL _preload;
    BOOL _isLoaded;
    BOOL _isLoading;
}

@property(readonly) NSDictionary *_extensionPointsByIdentifier; // @synthesize _extensionPointsByIdentifier;
@property(readonly) NSDictionary *_extensionsByIdentifier; // @synthesize _extensionsByIdentifier;
@property(readonly, getter=isLoading) BOOL loading; // @synthesize loading=_isLoading;
@property(readonly, getter=isLoaded) BOOL loaded; // @synthesize loaded=_isLoaded;
@property(readonly) BOOL preload; // @synthesize preload=_preload;
@property(readonly) id principalInstance; // @synthesize principalInstance=_principalInstance;
@property(readonly) NSString *path; // @synthesize path=_path;
@property(readonly) NSSet *requiredPlugIns; // @synthesize requiredPlugIns=_requiredPlugIns;
@property(readonly) NSArray *activationRules; // @synthesize activationRules=_activationRules;
@property(readonly) NSSet *extensionPoints; // @synthesize extensionPoints=_extensionPoints;
@property(readonly) NSSet *extensions; // @synthesize extensions=_extensions;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSString *version; // @synthesize version=_version;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) DVTPlugInManager *plugInManager; // @synthesize plugInManager=_plugInManager;
- (BOOL)load:(id *)arg1;
- (void)_instantiatePrincipalClass;
@property(readonly, getter=isLoadable) BOOL loadable;
@property(readonly) NSBundle *bundle;
- (id)description;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (void)_configureToUsePath:(id)arg1 andBundle:(id)arg2 rawInfoPlist:(id)arg3;
- (id)initWithPlugInData:(id)arg1 plugInManager:(id)arg2;

@end

@interface DVTPlugInLocator : NSObject
{
    NSFileManager *_fileManager;
}

+ (void)initialize;
- (BOOL)canUsePlugInAtPath:(id)arg1 bundle:(id *)arg2 plugInPlist:(id *)arg3 error:(id *)arg4;
- (BOOL)_checkCanUsePlugInAtFilePath:(id)arg1 bundle:(id *)arg2 plugInPlist:(id *)arg3 error:(id *)arg4;
- (BOOL)_checkCanUsePlugInAtDirectoryPath:(id)arg1 bundle:(id *)arg2 plugInPlist:(id *)arg3 error:(id *)arg4;
- (id)propertyListAtURL:(id)arg1 error:(id *)arg2;
- (void)plugInManagerDidScanForPlugIns:(id)arg1;
- (void)plugInManagerWillScanForPlugIns:(id)arg1;
- (id)init;

@end

@interface DVTPlugInManager : NSObject
{
    DVTDispatchLock *_plugInManagerLock;
    NSFileManager *_fileManager;
    NSString *_hostAppName;
    NSString *_hostAppContainingPath;
    NSMutableArray *_searchPaths;
    NSArray *_extraSearchPaths;
    NSMutableSet *_pathExtensions;
    NSMutableSet *_exposedCapabilities;
    NSMutableSet *_defaultPlugInCapabilities;
    NSMutableSet *_requiredPlugInIdentifiers;
    NSString *_plugInCachePath;
    NSDictionary *_plugInCache;
    BOOL _shouldClearPlugInCaches;
    DVTPlugInLocator *_plugInLocator;
    NSMutableDictionary *_plugInsByIdentifier;
    NSMutableDictionary *_extensionPointsByIdentifier;
    NSMutableDictionary *_extensionsByIdentifier;
    NSMutableDictionary *_invalidExtensionsByIdentifier;
    NSMutableSet *_warnedExtensionPointFailures;
    struct {
        unsigned int _reserved:62;
        unsigned int _isSecondaryScan:1;
        unsigned int _hasScannedForPlugIns:1;
    } _flags;
}

+ (void)_setDefaultPlugInManager:(id)arg1;
+ (id)defaultPlugInManager;
+ (void)initialize;
@property(retain) DVTPlugInLocator *plugInLocator; // @synthesize plugInLocator=_plugInLocator;
@property BOOL shouldClearPlugInCaches; // @synthesize shouldClearPlugInCaches=_shouldClearPlugInCaches;
- (id)_invalidExtensionWithIdentifier:(id)arg1;
- (id)_plugInCachePath;
- (id)_applicationCachesPath;
- (id)_toolsBuild;
- (id)_toolsVersionName;
- (id)_secureCachePath;
- (void)_createPlugInObjectsFromCache;
- (BOOL)_savePlugInCacheWithScanRecords:(id)arg1 error:(id *)arg2;
- (BOOL)_removePlugInCacheAndReturnError:(id *)arg1;
- (BOOL)_removePlugInCacheAtPath:(id)arg1 error:(id *)arg2;
- (id)_plugInCacheSaveFailedErrorWithUnderlyingError:(id)arg1;
- (BOOL)_loadPlugInCache:(id *)arg1;
- (BOOL)_cacheCoversPlugInsWithScanRecords:(id)arg1;
- (id)_modificationDateOfFileAtPath:(id)arg1;
@property(readonly) BOOL usePlugInCache;
- (void)_preLoadPlugIns;
- (BOOL)_checkPresenceOfRequiredPlugIns:(id)arg1 error:(id *)arg2;
- (BOOL)_checkMarketingVersionOfApplePlugIns:(id)arg1 error:(id *)arg2;
- (BOOL)shouldPerformConsistencyCheck;
- (void)_registerPlugInsFromScanRecords:(id)arg1;
- (void)_pruneUnusablePlugInsAndScanRecords:(id)arg1;
- (void)_createPlugInObjectsFromScanRecords:(id)arg1;
- (void)_applyActivationRulesToScanRecords:(id)arg1;
- (id)_scanForPlugInsInDirectories:(id)arg1 skippingDuplicatesOfPlugIns:(id)arg2;
- (BOOL)_scanForPlugIns:(id *)arg1;
@property BOOL hasScannedForPlugIns; // @dynamic hasScannedForPlugIns;
- (id)_scanRecordForBundle:(id)arg1 atPath:(id)arg2;
- (BOOL)_isInitialScan;
- (id)_defaultPathExtensions;
@property(readonly) NSArray *defaultSearchPaths;
- (id)_defaultApplicationSupportSubdirectory;
@property(readonly) NSArray *extraSearchPaths;
- (id)_extensionsForExtensionPoint:(id)arg1 matchingPredicate:(id)arg2;
- (id)sharedExtensionsForExtensionPoint:(id)arg1 matchingPredicate:(id)arg2;
- (id)sharedExtensionWithIdentifier:(id)arg1;
- (id)extensionWithIdentifier:(id)arg1;
- (id)extensionPointWithIdentifier:(id)arg1;
- (id)plugInWithIdentifier:(id)arg1;
- (BOOL)scanForPlugIns:(id *)arg1;
- (id)init;
- (id)_hostAppName;
- (id)_hostAppContainingPath;

// Remaining properties
@property(copy) NSSet *defaultPlugInCapabilities; // @dynamic defaultPlugInCapabilities;
@property(copy) NSSet *exposedCapabilities; // @dynamic exposedCapabilities;
@property(readonly) NSMutableSet *mutableDefaultPlugInCapabilities; // @dynamic mutableDefaultPlugInCapabilities;
@property(readonly) NSMutableSet *mutableExposedCapabilities; // @dynamic mutableExposedCapabilities;
@property(readonly) NSMutableSet *mutablePathExtensions; // @dynamic mutablePathExtensions;
@property(readonly) NSMutableSet *mutableRequiredPlugInIdentifiers; // @dynamic mutableRequiredPlugInIdentifiers;
@property(readonly) NSMutableArray *mutableSearchPaths; // @dynamic mutableSearchPaths;
@property(copy) NSSet *pathExtensions; // @dynamic pathExtensions;
@property(copy) NSSet *requiredPlugInIdentifiers; // @dynamic requiredPlugInIdentifiers;
@property(copy) NSArray *searchPaths; // @dynamic searchPaths;

@end

@interface DVTLogAspect : NSObject
{
    NSString *_name;
    BOOL _signalInstruments;
    BOOL _takeTimeProfile;
    int _logLevel;
}

+ (id)logAspectWithName:(id)arg1;
+ (id)allAspects;
+ (int)defaultLogLevel;
+ (void)initialize;
@property BOOL takeTimeProfile; // @synthesize takeTimeProfile=_takeTimeProfile;
@property BOOL signalInstruments; // @synthesize signalInstruments=_signalInstruments;
@property int logLevel; // @synthesize logLevel=_logLevel;
@property(readonly) NSString *name; // @synthesize name=_name;
- (void)_logAndOutdentAtLogLevel:(int)arg1 withFormat:(id)arg2;
- (void)_logAndIndentAtLogLevel:(int)arg1 withFormat:(id)arg2;
- (void)_logAtLogLevel:(int)arg1 withFormat:(id)arg2;
- (id)_initWithName:(id)arg1 logLevel:(int)arg2 signalInstruments:(BOOL)arg3 takeTimeProfile:(BOOL)arg4;
- (id)init;

@end

@interface DVTConsoleLogger : DVTLogger
{
    unsigned long long _indentLevel;
}

+ (void)initialize;
@property unsigned long long indentLevel; // @synthesize indentLevel=_indentLevel;
- (void)decreaseIndentLevelForAspect:(id)arg1;
- (void)increaseIndentLevelForAspect:(id)arg1;
- (void)logMessage:(id)arg1 forAspect:(id)arg2 logLevel:(int)arg3;

@end

@interface DVTFileLogger : DVTLogger
{
    unsigned long long _indentLevel;
    NSURL *_fileURL;
    NSFileHandle *_fileHandle;
}

+ (void)initialize;
@property(readonly) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property unsigned long long indentLevel; // @synthesize indentLevel=_indentLevel;
- (void)decreaseIndentLevelForAspect:(id)arg1;
- (void)increaseIndentLevelForAspect:(id)arg1;
- (void)logMessage:(id)arg1 forAspect:(id)arg2 logLevel:(int)arg3;
- (id)init;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 append:(BOOL)arg2;

@end

@interface DVTAssertionHandler : NSObject <DVTAssertionHandling>
{
}

+ (void)_crashWithCrashReporterString:(id)arg1;
+ (id)assertionLoggingAspect;
+ (void)setCurrentHandler:(id)arg1 forThread:(id)arg2;
+ (id)currentHandlerForThread:(id)arg1;
+ (void)setCurrentHandler:(id)arg1;
+ (id)currentHandler;
- (void)handleWarningInFunction:(id)arg1 fileName:(id)arg2 lineNumber:(long long)arg3 messageFormat:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleWarningInMethod:(SEL)arg1 object:(id)arg2 fileName:(id)arg3 lineNumber:(long long)arg4 messageFormat:(id)arg5 arguments:(struct __va_list_tag [1])arg6;
- (void)handleFailureInFunction:(id)arg1 fileName:(id)arg2 lineNumber:(long long)arg3 messageFormat:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 fileName:(id)arg3 lineNumber:(long long)arg4 messageFormat:(id)arg5 arguments:(struct __va_list_tag [1])arg6;

@end

@interface DVTStackBacktrace : NSObject
{
    unsigned long long *_returnAddresses;
    unsigned long long _returnAddressesCount;
    NSString *_stringRepresentation;
}

+ (unsigned long long *)_callStackReturnAddressesExcludingTopFrames:(unsigned long long)arg1 returningCount:(unsigned long long *)arg2;
+ (unsigned long long *)_callStackReturnAddressesFromNumbers:(id)arg1 excludingTopFrames:(unsigned long long)arg2 returningCount:(unsigned long long *)arg3;
+ (id)currentStackBacktrace;
+ (id)stackBacktraceWithCallStackReturnAddresses:(id)arg1;
- (id)callStackReturnAddresses;
- (id)_frameStringForAddress:(unsigned long long)arg1 symbolicatorPtr:(struct _CSTypeRef *)arg2 symbolPtr:(struct _CSTypeRef *)arg3;
- (id)stringRepresentation;
- (void)dealloc;
- (id)initWithCallStackReturnAddresses:(unsigned long long *)arg1 count:(unsigned long long)arg2;
- (id)init;

@end

@interface _DVTFilePathAssoc : NSObject
{
    _DVTFilePathAssoc *next;
    NSString *role;
    id _object_dvtWeak;
    BOOL recursiveObserver;
    id block;
    struct dispatch_queue_s *dispatchQueue;
    NSOperationQueue *operationQueue;
}

- (id)description;
- (void)dealloc;
- (void)finalize;
- (id)initWithRole:(id)arg1 object:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onOperationQueue:(id)arg4 block:(id)arg5;
- (id)initWithRole:(id)arg1 object:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onDispatchQueue:(struct dispatch_queue_s *)arg4 block:(id)arg5;
@property __weak id object;

@end

@interface DVTFilePath : NSObject <NSCopying, DVTFileSystemRepresentationProviding>
{
    DVTFilePath *_parentPath;
    DVTPointerArray *_childPaths;
    DVTFileSystemVNode *_vnode;
    unsigned long long _numAssociates;
    unsigned long long _numObservers;
    id _associates;
    NSString *_pathString;
    NSURL *_fileURL;
    BOOL _hasResolvedVnode;
    unsigned char _validationState;
    unsigned short _fsrepLength;
    int _childPathsLock;
    int _associatesLock;
    char _fsrep[0];
}

+ (void)_registerStandardCachedFileInfoDerivationFunctionsIfNeeded;
+ (void *)_cachedInfoDerivationFunctionForKey:(id)arg1 derivationLock:(id *)arg2;
+ (void)registerCachedInfoDerivationFunction:(void *)arg1 forKey:(id)arg2;
+ (id)filePathForFileURL:(id)arg1;
+ (id)filePathForPathString:(id)arg1;
+ (id)filePathForFileSystemRepresentation:(const char *)arg1;
+ (id)filePathForFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)_filePathForParent:(id)arg1 pathString:(id)arg2;
+ (id)_filePathForParent:(id)arg1 fileSystemRepresentation:(const char *)arg2 length:(unsigned long long)arg3 allowCreation:(BOOL)arg4;
+ (id)_lookupOrCreateFilePathWithParentPath:(id)arg1 fileSystemRepresentation:(const char *)arg2 length:(unsigned long long)arg3 allowCreation:(BOOL)arg4;
+ (id)rootFilePath;
+ (void)initialize;
- (id)_descriptionOfAssociates;
- (id)description;
- (void)dvt_provideFileSystemRepresentationToBlock:(id)arg1;
- (void)removeAllAssociates;
- (void)removeAssociate:(id)arg1;
- (void)removeAssociatesWithRole:(id)arg1;
- (void)removeAssociate:(id)arg1 withRole:(id)arg2;
- (void)addAssociate:(id)arg1 withRole:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onOperationQueue:(id)arg4 block:(id)arg5;
- (void)addAssociate:(id)arg1 withRole:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onDispatchQueue:(struct dispatch_queue_s *)arg4 block:(id)arg5;
- (void)addAssociate:(id)arg1 withRole:(id)arg2;
- (id)associatesWithRole:(id)arg1;
- (id)associatesWithRole:(id)arg1 forAllPathsToSameFile:(BOOL)arg2;
- (void)_addAssociatesWithRole:(id)arg1 toArray:(id *)arg2;
- (void)_notifyAssociatesOfChange;
- (BOOL)_hasChangeObservers;
- (BOOL)_addInfoForObserversOfChangedFilePath:(id)arg1 toObjects:(id)arg2 blocks:(id)arg3 dispatchQueues:(id)arg4 operationQueues:(id)arg5;
- (id)cachedValueForKey:(id)arg1;
@property(readonly) DVTFileDataType *fileDataTypePresumed;
@property(readonly) DVTFileDataType *fileDataTypeFromFileContent;
@property(readonly) DVTFilePath *symbolicLinkDestinationFilePath;
@property(readonly) NSURL *fileReferenceURL;
@property(readonly) NSDictionary *fileSystemAttributes;
@property(readonly) NSDictionary *fileAttributes;
@property(readonly) NSString *fileTypeAttribute;
@property(readonly) NSArray *sortedDirectoryContents;
@property(readonly) NSArray *directoryContents;
@property(readonly) NSDate *modificationDate;
@property(readonly) BOOL isExcludedFromBackup;
@property(readonly) BOOL isExecutable;
@property(readonly) BOOL isDeletable;
@property(readonly) BOOL isWritable;
@property(readonly) BOOL isReadable;
@property(readonly) BOOL existsInFileSystem;
- (void)excludeFromBackup;
- (BOOL)_hasResolvedVnode;
- (id)_locked_vnode;
- (id)_locked_vnodeKnownDoesNotExist:(BOOL)arg1;
- (void)_invalidateFilePathAndChildrenIncludingEquivalents;
- (void)_invalidateFilePathAndChildren;
- (void)invalidateFilePath;
- (void)_invalidateKnownDoesNotExist:(BOOL)arg1 explicitlyInvalidateChildren:(BOOL)arg2;
- (void)_invalidateChildrenRecursivelyKnownDoesNotExist:(BOOL)arg1;
- (void)_locked_validateTentativelyInvalidatedChildrenRecursively;
- (void)_locked_tentativelyInvalidateChildrenRecursively;
- (BOOL)isSameFileAsFilePath:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (BOOL)getFullFileSystemRepresentationIntoBuffer:(char **)arg1 ofLength:(unsigned long long)arg2 allowAllocation:(BOOL)arg3;
- (BOOL)_getFSRepIntoBuffer:(char **)arg1 ofLength:(unsigned long long)arg2 requiredLength:(unsigned long long)arg3 endPtr:(char **)arg4 allowAllocation:(BOOL)arg5;
@property(readonly) NSString *fileName;
@property(readonly) NSURL *fileURL;
@property(readonly) NSArray *pathComponents;
@property(readonly) NSString *pathString;
- (id)filePathForUniqueRelativeDirectoryWithPrefix:(id)arg1 error:(id *)arg2;
- (id)filePathForUniqueRelativeFileWithPrefix:(id)arg1 error:(id *)arg2;
- (id)filePathForRelativePathString:(id)arg1;
- (id)filePathForRelativeFileSystemRepresentation:(const char *)arg1;
- (id)filePathForRelativeFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;
- (BOOL)isAncestorOfFilePath:(id)arg1;
@property(readonly) DVTFilePath *volumeFilePath;
@property(readonly) DVTFilePath *parentFilePath;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)_invokeWithLockedAssociates:(id)arg1;
- (void)_invokeWithLockedChildPaths:(id)arg1;

@end

@interface DVTSimpleXMLWriter : NSObject
{
    NSMutableData *_xmlData;
    NSMutableArray *_openContainers;
    long long _indentationLevel;
    BOOL _isInsideTag;
    BOOL _isInsideContainerTag;
}

- (id)stringValue;
- (id)data;
- (void)finishWriting;
- (void)writeContent:(id)arg1;
- (void)writeContent:(id)arg1 withIndentation:(BOOL)arg2;
- (void)writeContent:(id)arg1 withIndentation:(BOOL)arg2 withNewline:(BOOL)arg3;
- (void)endContainer;
- (void)endContainerWithNewline:(BOOL)arg1;
- (void)endStartTag;
- (void)endStartTagWithNewline:(BOOL)arg1;
- (char *)_endStartTagString;
- (void)writeAttribute:(id)arg1 value:(id)arg2;
- (void)beginStartTag:(id)arg1;
- (void)beginStartTag:(id)arg1 isContainer:(BOOL)arg2;
- (void)writeRawUTF8:(const char *)arg1;
- (id)init;
- (id)initForWritingWithMutableData:(id)arg1;
- (void)writeXMLEpilogue;
- (void)writeXMLPrologue;

@end

@interface DVTXMLArchiver : NSObject
{
    DVTSimpleXMLWriter *_writer;
    DVTMapTable *_classesToElementNames;
    id _delegate;
    id _context;
    NSArray *_extraAttributes;
    unsigned long long _currentExtraAttributeIdx;
}

+ (id)archivedDataWithRootObject:(id)arg1;
+ (void)setElementNamePrefix:(id)arg1;
+ (id)elementNameForClass:(Class)arg1;
+ (void)setElementName:(id)arg1 forClass:(Class)arg2;
@property(retain) id context; // @synthesize context=_context;
- (void)_encodeExtraRelationshipsForObject:(id)arg1;
- (void)_finishEncodingAttributes;
- (void)_beginEncodingAttributesForObject:(id)arg1;
- (void)_didEncodeAttributeWithName:(id)arg1;
- (void)finishEncoding;
- (void)encodeIntegerAttribute:(id)arg1 withValue:(long long)arg2;
- (void)encodeBoolAttribute:(id)arg1 withValue:(BOOL)arg2;
- (void)encodeStringAttribute:(id)arg1 withValue:(id)arg2;
- (void)encodeObjectArray:(id)arg1 withTagName:(id)arg2;
- (void)encodeRootObjectArray:(id)arg1 withTagName:(id)arg2 archiveVersion:(id)arg3;
- (void)_encodeObjectArray:(id)arg1 withTagName:(id)arg2 archiveVersion:(id)arg3;
- (void)encodeObject:(id)arg1;
- (void)encodeRootObject:(id)arg1 withArchiveVersion:(id)arg2;
- (void)_encodeVersionAttribute:(id)arg1;
- (id)xmlWriter;
- (id)elementNameForClass:(Class)arg1;
- (void)setElementName:(id)arg1 forClass:(Class)arg2;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)init;
- (id)initForWritingWithMutableData:(id)arg1;

@end

@interface _DVTXMLParsingState : NSObject
{
    NSNumber *archiveVersion;
}

@end

@interface DVTXMLUnarchiver : NSObject
{
    NSData *_data;
    id _delegate;
    NSMutableDictionary *_elementNamesToClasses;
    id _rootObject;
    NSError *_decodingError;
    id _context;
    id _versionChecker;
    struct {
        unsigned int _unused:31;
        unsigned int _respondsTo_XMLUnarchiver_didReadToPosition_ofTotal_;
    } _delegateFlags;
    BOOL _rootObjectPropertiesSet;
    BOOL _hasReadArchive;
    BOOL _archiveContainedUnsupportedNodes;
    NSError *_xmlParserError;
}

+ (BOOL)unarchiveData:(id)arg1 withRootObject:(id)arg2 error:(id *)arg3;
+ (id)unarchiveObjectWithData:(id)arg1;
+ (void)setElementNamePrefix:(id)arg1;
+ (Class)classForElementName:(id)arg1;
+ (void)setClass:(Class)arg1 forElementName:(id)arg2;
+ (void)initialize;
@property(copy) NSError *xmlParserError; // @synthesize xmlParserError=_xmlParserError;
@property(copy) NSError *decodingError; // @synthesize decodingError=_decodingError;
@property(retain, nonatomic) id <DVTXMLUnarchiverDelegate> delegate; // @synthesize delegate=_delegate;
@property BOOL archiveContainedUnsupportedNodes; // @synthesize archiveContainedUnsupportedNodes=_archiveContainedUnsupportedNodes;
@property(copy) id versionChecker; // @synthesize versionChecker=_versionChecker;
@property(retain) id context; // @synthesize context=_context;
- (id)_corruptedDocumentErrorWithUnderlyingErrorCode:(unsigned long long)arg1 reason:(id)arg2;
- (id)_genericUnreadableDocumentError;
- (void)finishDecoding;
- (BOOL)decodeWithRootObject:(id)arg1 error:(id *)arg2;
- (id)decodeRootObject;
- (BOOL)_readAndReturnError:(id *)arg1;
- (BOOL)decodeNodeWithXMLTextReader:(struct _xmlTextReader *)arg1 owner:(id)arg2 container:(id)arg3 parsingState:(id)arg4 error:(id *)arg5;
- (void)_captureUnhandleableElementInContainer:(id)arg1 withXMLTextReader:(struct _xmlTextReader *)arg2;
- (void)_moveToCurrentNodeEndElementWithXMLTextReader:(struct _xmlTextReader *)arg1;
- (id)decodeElementNodeWithXMLTextReader:(struct _xmlTextReader *)arg1 owner:(id)arg2 container:(id)arg3 parsingState:(id)arg4 success:(char *)arg5 error:(id *)arg6;
- (Class)classForUnarchivedObjectFromElementNodeWithXMLTextReader:(struct _xmlTextReader *)arg1 owner:(id)arg2;
- (void)setRootObject:(id)arg1;
- (Class)classForElementName:(id)arg1;
- (void)setClass:(Class)arg1 forElementName:(id)arg2;
- (id)init;
- (id)initForReadingWithData:(id)arg1;

@end

@interface DVTFileSystemVNode : NSObject
{
    NSMutableDictionary *_derivedInfoDict;
    DVTPointerArray *_filePaths;
    DVTFilePath *_filePath;
    unsigned long long _inodeNumber;
    long long _fileSize;
    unsigned long long _statFlags;
    long long _posixModificationTime;
    unsigned int _statUid;
    unsigned int _statGid;
    int _deviceNumber;
    unsigned short _statMode;
}

+ (id)lookupVNodeForDeviceNumber:(int)arg1 inodeNumber:(unsigned long long)arg2;
+ (void)initialize;
@property(readonly) long long posixModificationTime; // @synthesize posixModificationTime=_posixModificationTime;
@property(readonly) long long fileSize; // @synthesize fileSize=_fileSize;
@property(readonly) unsigned long long statFlags; // @synthesize statFlags=_statFlags;
@property(readonly) unsigned int statGid; // @synthesize statGid=_statGid;
@property(readonly) unsigned int statUid; // @synthesize statUid=_statUid;
@property(readonly) unsigned short statMode; // @synthesize statMode=_statMode;
@property(readonly) unsigned long long inodeNumber; // @synthesize inodeNumber=_inodeNumber;
@property(readonly) int deviceNumber; // @synthesize deviceNumber=_deviceNumber;
- (id)description;
- (void)recordStatInfo:(const struct stat *)arg1;
- (void)discardCaches;
- (void)addCachedEntriesFromDictionary:(id)arg1;
- (id)cachedValueForKey:(id)arg1;
- (void)removeFilePath:(id)arg1;
- (void)addFilePath:(id)arg1;
- (id)filePath;
- (id)filePaths;
@property(readonly) DVTMountedFileSystem *fileSystem;
- (id)initWithStatInfo:(const struct stat *)arg1;

@end

@interface DVTMountedFileSystem : NSObject
{
    int _deviceNumber;
    NSString *_mountPath;
    DVTMapTable *_inodesToVNodes;
}

+ (id)mountedFileSystemWithDeviceNumber:(int)arg1;
@property(readonly) NSString *mountPath; // @synthesize mountPath=_mountPath;
@property(readonly) int deviceNumber; // @synthesize deviceNumber=_deviceNumber;
- (id)description;
- (void)removeVNode:(id)arg1;
- (void)addVNode:(id)arg1;
- (void)noteFileSystemWasUnmounted;
- (id)vnodeForInodeNumber:(unsigned long long)arg1;
- (id)initWithDeviceNumber:(int)arg1 statfsInfo:(const struct statfs *)arg2;

@end

@interface DVTFilePathEventWatcher : NSObject
{
    struct __FSEventStream *_streamRef;
    struct dispatch_queue_s *_watcherQueue;
    double _latency;
    unsigned long long _lastEventHandled;
    NSMutableSet *_watchedFilePaths;
    NSMapTable *_watchedFileMap;
}

+ (id)sharedFilePathEventWatcher;
+ (void)initialize;
- (void)handleEventsForStream:(struct __FSEventStream *)arg1 numEvents:(unsigned long long)arg2 eventPaths:(const char **)arg3 eventFlags:(const unsigned int *)arg4 eventIds:(const unsigned long long *)arg5;
- (void)stop;
- (void)run;
- (void)_resetStream;
- (void)_teardownStream;
- (void)_setupStream;
- (void)watchFilePath:(id)arg1;
- (BOOL)_shouldWatchWholeVolumes;
@property double eventLatency;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (id)_initPrivate;

@end

@interface _DVTCancellationBlockToken : NSObject <DVTCancellationBlockCompletion>
{
    NSCondition *_condition;
    id _cancellationBlock;
}

@property(copy) id cancellationBlock; // @synthesize cancellationBlock=_cancellationBlock;
- (void)runCancellatonBlockWithOperation:(id)arg1;
- (void)waitForCancellation;
- (id)initWithCancellationBlock:(id)arg1;

@end

@interface _DVTDisallowFinishToken : NSObject
{
    NSString *_reason;
}

@property(copy) NSString *reason; // @synthesize reason=_reason;
- (id)description;
- (id)initWithReason:(id)arg1;

@end

@interface DVTOperation : NSOperation
{
    id _block;
    NSError *_error;
    DVTDispatchLock *_cancellationRegistrationLock;
    DVTDispatchLock *_cancellationBlockLock;
    NSMutableArray *_cancellationBlockTokens;
    DVTDispatchLock *_finishingLock;
    NSMutableArray *_finishingTokens;
    BOOL _preventFinish;
}

+ (void)_trackStateChange:(id)arg1 ofOperation:(id)arg2 forKeyPath:(id)arg3;
+ (id)unfinishedOperations;
+ (id)operationWithBlock:(id)arg1;
@property BOOL preventFinish; // @synthesize preventFinish=_preventFinish;
@property(copy) NSError *error; // @synthesize error=_error;
@property(copy) id block; // @synthesize block=_block;
- (id)stateString;
- (void)allowFinishForToken:(id)arg1;
- (id)disallowFinishWithReason:(id)arg1;
- (BOOL)isFinished;
- (void)cancel;
- (BOOL)unregisterCancellationBlockForToken:(id)arg1;
- (id)registerCancellationBlock:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)main;
- (id)description;
- (id)init;

@end

@interface DVTObservingToken : NSObject <DVTObservingToken, _DVTCancellableObservingToken>
{
    id _object;
    id _target_dvtWeak;
    NSString *_keyPath;
    BOOL _isCancelled;
}

@property(retain) id object; // @synthesize object=_object;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_primitiveCancelObservation;
- (BOOL)isCancelled;
- (void)cancel;
- (id)description;
- (void)dealloc;
- (id)initWithTarget:(id)arg1 object:(id)arg2 keyPath:(id)arg3;
- (void)setTarget:(id)arg1;
- (id)target;

@end

@interface DVTObservingBlockToken : NSObject <DVTObservingToken, _DVTCancellableObservingToken>
{
    id _owner;
    id _observedObject;
    id _handlerBlock;
    NSString *_keyPath;
    BOOL _isCancelled;
}

@property(retain) id owner; // @synthesize owner=_owner;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setHandlerBlock:(id)arg1 forKeyPath:(void)arg2 options:(id)arg3;
- (void)_tearDownObserving;
- (void)_setupObservingWithOptions:(unsigned long long)arg1;
- (id)description;
- (void)cancel;
- (void)_primitiveCancelObservation;
- (BOOL)isCancelled;
- (void)dealloc;
- (id)initWithObservedObject:(id)arg1 owner:(id)arg2;

@end

@interface DVTArrayObservingBlockToken : DVTObservingBlockToken
{
    NSArray *_observedArray;
}

- (void)_tearDownObserving;
- (void)_setupObservingWithOptions:(unsigned long long)arg1;

@end

@interface DVTSharedObserver : NSObject
{
    NSString *_keyPath;
    id _object;
    DVTMapTable *_registeredObservers;
}

- (void)_removeObserver:(id)arg1 forName:(id)arg2;
- (void)_setObserver:(id)arg1 forName:(id)arg2 handlerBlock:(id)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)_handlerInfoForObserver:(id)arg1;
- (void)dealloc;
- (id)_initWithObservedObject:(id)arg1 keyPath:(id)arg2;

@end

@interface DVTModelObject : NSObject <DVTModelObject>
{
    DVTModelObjectGraph *_objectGraph;
    id _observationInfo;
}

@property(retain, nonatomic) DVTModelObjectGraph *objectGraph;
- (void)setObservationInfo:(id)arg1;
- (id)observationInfo;

@end

@interface DVTModelObjectGraph : NSObject
{
    NSString *_name;
    NSOperationQueue *_asyncQueue;
    NSOperationQueue *_changeQueue;
    struct dispatch_queue_s *_asyncDispatchQueue;
    struct dispatch_queue_s *_changeDispatchQueue;
    NSMutableSet *_insertedObjects;
    NSMutableSet *_updatedObjects;
    NSMutableSet *_deletedObjects;
    BOOL _coalescePending;
    BOOL _changeNotificationsAreSuspended;
    BOOL _postingChangeNotification;
    BOOL _additionalChangesPending;
}

@property BOOL changeNotificationsAreSuspended; // @synthesize changeNotificationsAreSuspended=_changeNotificationsAreSuspended;
@property(readonly) struct dispatch_queue_s *changeDispatchQueue; // @synthesize changeDispatchQueue=_changeDispatchQueue;
@property(readonly) struct dispatch_queue_s *asyncDispatchQueue; // @synthesize asyncDispatchQueue=_asyncDispatchQueue;
@property(readonly) NSOperationQueue *changeQueue; // @synthesize changeQueue=_changeQueue;
@property(readonly) NSOperationQueue *asyncQueue; // @synthesize asyncQueue=_asyncQueue;
@property(readonly) NSString *name; // @synthesize name=_name;
- (void)didDeleteModelObject:(id)arg1;
- (void)didUpdateModelObject:(id)arg1;
- (void)didInsertModelObject:(id)arg1;
- (void)performBlockCoalescingModelChanges:(id)arg1;
- (void)_processPendingChanges;
- (void)_locked_coalesceUpdates;
- (void)_coalescingTick;
- (void)_disassociateModelObject:(id)arg1;
- (void)_associateModelObject:(id)arg1;
- (id)description;
- (id)initWithName:(id)arg1 asyncDispatchQueue:(struct dispatch_queue_s *)arg2 changeDispatchQueue:(struct dispatch_queue_s *)arg3;
- (id)initWithName:(id)arg1 asyncQueue:(id)arg2 changeQueue:(id)arg3;

@end

@interface DVTOperationGroup : DVTOperation
{
    DVTDispatchLock *_lock;
    NSOperationQueue *_queue;
    NSMutableArray *_suboperations;
    NSMutableArray *_suboperationSchedulers;
    DVTMapTable *_suboperationObservations;
    unsigned long long _groupState;
    DVTHashTable *_incompleteSuboperations;
    int _addedSuboperations;
    int _completedSuboperations;
}

+ (id)operationGroupWithSuboperations:(id)arg1;
@property(readonly) NSArray *suboperations; // @synthesize suboperations=_suboperations;
- (id)description;
- (void)cancel;
- (void)start;
- (BOOL)isFinished;
- (BOOL)isExecuting;
- (void)enqueueSuboperations;
- (void)removeSuboperation:(id)arg1;
- (void)addSuboperation:(id)arg1;
- (void)addSuboperation:(id)arg1 withQueue:(id)arg2;
- (void)_scheduleSuboperation:(id)arg1 onQueue:(id)arg2;
@property(readonly) BOOL suboperationsFinished;
@property(readonly) BOOL operationFinished;
@property BOOL suboperationsAreSerial;
- (void)_transitionToAllFinishedState;
- (void)_transitionToSuboperationsFinishedState;
- (void)_transitionToOperationFinishedState;
- (void)_transitionToExecutingState;
- (id)init;

@end

@interface DVTExtensionParameter : NSObject
{
    NSMutableDictionary *_parameterData;
    DVTExtensionElementDescription *_schema;
    DVTExtension *_extension;
}

@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
- (void)_adjustClassReferencesInParameterData;
- (BOOL)_adjustParameterData;
- (BOOL)hasValueForKey:(id)arg1;
- (id)valueForKey:(id)arg1 error:(id *)arg2;
- (id)valueForKey:(id)arg1;
- (id)debugDescription;
- (id)description;
- (id)initWithParameterData:(id)arg1 usingSchema:(id)arg2 forExtension:(id)arg3;

@end

@interface DVTDispatchLock : NSObject
{
    struct dispatch_queue_s *_queue;
    NSString *_debugName;
    BOOL _isRecursive;
}

+ (id)recursiveDispatchLockWithDebugName:(id)arg1;
+ (id)dispatchLockWithDebugName:(id)arg1;
@property(readonly) NSString *debugName; // @synthesize debugName=_debugName;
@property(readonly) BOOL isRecursive; // @synthesize isRecursive=_isRecursive;
- (void)performLockedBlockAsyncUnlessRecursing:(id)arg1;
- (void)afterTimeInterval:(double)arg1 asyncPerformLockedBlock:(id)arg2;
- (void)asyncPerformLockedBlock:(id)arg1;
- (void)performLockedBlock:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (id)init;
- (id)initWithDebugName:(id)arg1 isRecursive:(BOOL)arg2;

@end

@interface DVTStateRepository : NSObject <NSKeyedUnarchiverDelegate>
{
    NSString *_identifier;
    DVTStateRepository *_parentRepository;
    DVTStateToken *_parentToken;
    NSMutableDictionary *_currentState;
    DVTMapTable *_tokenByIdentifierMapping;
    id <DVTStateRepositoryDelegate> _delegate;
}

+ (void)initialize;
@property(retain) id <DVTStateRepositoryDelegate> delegate; // @synthesize delegate=_delegate;
- (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
- (id)readStateFromURL:(id)arg1 error:(id *)arg2;
- (BOOL)writeStateToURL:(id)arg1 error:(id *)arg2;
- (id)readStateFromData:(id)arg1 error:(id *)arg2;
- (id)stateDataOrError:(id *)arg1;
- (void)_pullStateFromDictionary:(id)arg1;
- (void)clearCurrentState;
- (void)deleteStateFromParentRepository;
- (void)collectStateFromRegisteredObjects;
- (void)cloneCurrentStateDataFromRepository:(id)arg1;
- (id)currentState;
- (void)_cloneStateForIdentifier:(id)arg1 toIdentifier:(id)arg2;
- (void)setStateIsClone:(BOOL)arg1 forIdentifier:(id)arg2;
- (id)_stateForIdentifier:(id)arg1;
- (void)_setState:(id)arg1 forIdentifier:(id)arg2;
- (void)tokenDidChangeState:(id)arg1;
- (void)updateCurrentStateFromDictionary:(id)arg1;
- (BOOL)pushStateToRepositoryAndReturnError:(id *)arg1;
- (void)_invalidateAllTokens;
- (void)_updateStateIfNeeded;
- (void)tokenWillInvalidate:(id)arg1;
- (id)identifierForRegisteredObject:(id)arg1;
- (void)unregisterObjectWithIdentifier:(id)arg1;
- (BOOL)registerObject:(id)arg1 withIdentifier:(id)arg2 error:(id *)arg3;
- (void)_registerChildRepository:(id)arg1 withIdentifier:(id)arg2;
- (id)_currentState;
- (id)_parentRepository;
- (id)_tokenMapping;
- (id)identifier;
- (void)finalize;
- (id)initWithIdentifier:(id)arg1 inParentRepository:(id)arg2;
- (id)initWithIdentifier:(id)arg1 inParentStateToken:(id)arg2;

@end

@interface DVTStateToken : NSObject <DVTInvalidation_New>
{
    id <DVTStatefulObject> _statefulObject_dvtWeak;
    DVTStateRepository *_repository;
    DVTStateRepository *_childRepository;
    NSString *_identifier;
    NSDictionary *_stateSavingObjectPersistenceByName;
    BOOL _isRestoringState;
    BOOL _canPullFromRepository;
    BOOL _checkCanPullFromRepositoryAgain;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (void)_deleteStateFromRepositoryForObjectWithIdentifier:(id)arg1;
- (void)deleteStateFromRepository;
- (void)pullStateFromRepository;
- (void)_pullStateFromDictionary:(id)arg1;
- (id)_stateDictionary;
- (BOOL)pushStateToRepositoryAndReturnError:(id *)arg1;
- (id)_copyStatefulObjectState;
- (void)stateChanged;
- (BOOL)_pushState:(id)arg1 error:(id *)arg2;
- (void)cloneStateForIdentifier:(id)arg1 toIdentifier:(id)arg2;
- (void)unregisterObjectWithIdentifier:(id)arg1;
- (BOOL)registerObject:(id)arg1 withIdentifier:(id)arg2 error:(id *)arg3;
- (id)statefulObjectStateIdentifiers;
- (id)_stateSavingObjectPersistenceByName;
- (id)identifier;
- (id)repository;
- (id)_childRepository;
- (void)_updateCanPullFromRepositoryAndCheckAgain:(BOOL)arg1;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (id)initWithStatefulObject:(id)arg1 identifier:(id)arg2 inRepository:(id)arg3;
- (void)setStatefulObject:(id)arg1;
- (id)statefulObject;

@end

@interface DVTReferenceResolver : NSObject
{
    NSMutableArray *_strategies;
    id <DVTReferenceResolverClient> _client;
}

+ (id)backgroundResolutionQueue;
+ (void)initialize;
@property(retain) id <DVTReferenceResolverClient> client; // @synthesize client=_client;
- (id)description;
- (id)configureWithPersistentRepresentationsOfInput:(id)arg1;
- (id)persistentRepresentationsOfInput:(id)arg1;
- (id)resolveInput:(id)arg1 inContext:(id)arg2 error:(id *)arg3;
@property(readonly) NSString *displayName;
- (void)replaceStrategiesAtIndexes:(id)arg1 withObjects:(id)arg2;
- (void)removeStrategiesAtIndexes:(id)arg1;
- (void)insertStrategies:(id)arg1 atIndex:(id)arg2;
- (void)replaceObjectInStrategiesAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromStrategiesAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inStrategiesAtIndex:(unsigned long long)arg2;
@property(copy) NSArray *strategies; // @dynamic strategies;
- (id)init;

// Remaining properties
@property(readonly) NSMutableArray *mutableStrategies; // @dynamic mutableStrategies;

@end

@interface DVTReferenceResolutionStrategy : NSObject
{
    DVTExtension *_extension;
    NSString *_persistenceIdentifier;
    NSString *_displayName;
}

+ (id)strategyWithPersistenceIdentifier:(id)arg1;
+ (id)strategyWithPersistenceIdentifier:(id)arg1 strategyIdentifier:(id)arg2;
+ (void)initialize;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSString *persistenceIdentifier; // @synthesize persistenceIdentifier=_persistenceIdentifier;
@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
- (id)displayNameInContext:(id)arg1;
- (id)resolveInput:(id)arg1 inContext:(id)arg2 usingSnapshot:(id)arg3 error:(id *)arg4;
- (id)snapshotForResolution;
@property(readonly) BOOL canResolveInputInBackground;
- (id)initWithExtension:(id)arg1;
- (id)init;

@end

@interface DVTFileDataType : NSObject <NSCopying>
{
    struct DVTBitSet *_conformanceBitSet;
}

+ (id)logAspect;
+ (id)fileDataTypeForFilePath:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFileURL:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFileContentAtPath:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFileContentAtURL:(id)arg1 error:(id *)arg2;
+ (id)_fileDataTypeForFileAtPath:(id)arg1 consideringFileContent:(BOOL)arg2 error:(id *)arg3;
+ (id)_findMatchingTypeUsingDetectors:(id)arg1 givenCurrentMatchingType:(id)arg2 filePath:(id)arg3 allowCustomDetectors:(BOOL)arg4 error:(id *)arg5;
+ (id)_matchingTypeDetectorExtensionsForFilePathExtension:(id)arg1;
+ (id)_launchServicesUTIForMimeType:(id)arg1;
+ (id)_launchServicesUTIForFileAtPath:(id)arg1;
+ (id)_convertFromLaunchServicesDynamicUTIIfNeeded:(id)arg1;
+ (id)fileDataTypeWithIdentifier:(id)arg1;
+ (id)fileDataTypeFromStringRepresentation:(id)arg1;
+ (id)_synthesizedFileTypeWithPrimaryType:(id)arg1 secondaryTypes:(id)arg2;
+ (void)_splitSynthesizedTypeStringRepresentation:(id)arg1 intoPrimaryType:(id *)arg2 andSecondaryTypes:(id *)arg3;
+ (id)_makeSynthesizedTypeStringRepresentationFromPrimaryType:(id)arg1 secondaryTypes:(id)arg2;
- (BOOL)isMissingType;
- (BOOL)isUnknownType;
- (BOOL)isDynamicType;
- (BOOL)isDeclaredType;
- (id)fileConversionTypeForFilePath:(id)arg1;
- (id)secondaryFileDataTypes;
- (id)primaryFileDataType;
- (BOOL)isGenericFileDataType;
- (BOOL)conformsToAnyIdentifierInSet:(id)arg1;
- (BOOL)conformsTo:(id)arg1;
- (BOOL)conformsToType:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct DVTBitSet *)conformanceBitSet;
@property(readonly) NSString *displayName;
@property(readonly) NSString *identifier;
- (id)stringRepresentation;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithConformanceBitSetNoCopy:(struct DVTBitSet *)arg1;

@end

@interface DVTPrimitiveFileDataType : DVTFileDataType
{
    unsigned long long _number;
    NSString *_identifier;
    NSString *_displayName;
}

- (id)description;
- (id)stringRepresentation;
- (id)secondaryFileDataTypes;
- (id)primaryFileDataType;
- (id)displayName;
- (id)identifier;
- (BOOL)isEqual:(id)arg1;
- (id)init;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2 conformingToTypes:(id)arg3;

@end

@interface DVTDeclaredPrimitiveFileDataType : DVTPrimitiveFileDataType
{
}

- (BOOL)isDeclaredType;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2 conformingToTypes:(id)arg3;

@end

@interface DVTDynamicPrimitiveFileDataType : DVTPrimitiveFileDataType
{
}

- (BOOL)isDynamicType;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2;

@end

@interface DVTUnknownPrimitiveFileDataType : DVTPrimitiveFileDataType
{
}

- (BOOL)isUnknownType;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2;

@end

@interface DVTSynthesizedFileDataType : DVTFileDataType
{
    DVTPrimitiveFileDataType *_primaryType;
    NSSet *_secondaryTypes;
}

- (id)description;
- (id)stringRepresentation;
- (id)secondaryFileDataTypes;
- (id)primaryFileDataType;
- (id)init;
- (id)initWithPrimaryType:(id)arg1 secondaryTypes:(id)arg2;

@end

@interface DVTFindResult : NSObject <NSCopying, NSCoding>
{
    DVTDocumentLocation *_location;
    DVTFindDescriptor *_findDescriptor;
    NSString *_contextString;
    struct _NSRange _contextRange;
    DVTDocumentLocation *_replacedLocation;
    int _replaceState;
    NSString *_replacedString;
}

+ (struct _NSRange)lineRangeForFoundRange:(struct _NSRange)arg1 inString:(id)arg2;
@property(copy) DVTDocumentLocation *replacedLocation; // @synthesize replacedLocation=_replacedLocation;
@property int replaceState; // @synthesize replaceState=_replaceState;
@property(copy, nonatomic) NSString *replacedString; // @synthesize replacedString=_replacedString;
@property(readonly) struct _NSRange contextRange; // @synthesize contextRange=_contextRange;
@property(readonly) NSString *contextString; // @synthesize contextString=_contextString;
@property(readonly) DVTDocumentLocation *location; // @synthesize location=_location;
@property(readonly) DVTFindDescriptor *findDescriptor; // @synthesize findDescriptor=_findDescriptor;
- (id)copyWithUpdatedLocation:(id)arg1;
- (id)stringForReplacementString:(id)arg1;
@property(readonly) NSString *foundString;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithFoundLocation:(id)arg1 withRange:(struct _NSRange)arg2 inContext:(id)arg3 foundUsingDescriptor:(id)arg4;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTTextFinder : NSObject
{
    NSMutableArray *_findResults;
    id <DVTTextFindable> _findable;
    DVTFindDescriptor *_findDescriptor;
    BOOL _findComplete;
    BOOL _findableSupportsReplace;
}

@property(readonly) id <DVTTextFindable> findable; // @synthesize findable=_findable;
@property(readonly) DVTFindDescriptor *findDescriptor; // @synthesize findDescriptor=_findDescriptor;
- (unsigned long long)_findIndexForLocation:(id)arg1 inResults:(id)arg2;
- (BOOL)_findNext;
- (id)findResultsFrom:(id)arg1 to:(id)arg2 beforeDate:(id)arg3;
- (BOOL)findBeforeDate:(id)arg1;
- (id)findResultAfter:(id)arg1;
- (id)findResultBefore:(id)arg1;
@property(readonly) unsigned long long foundCount;
@property(readonly) NSArray *findResults;
@property(readonly) BOOL findComplete;
- (id)initWithFindDescriptor:(id)arg1 onFindable:(id)arg2;

@end

@interface DVTFindDescriptor : NSObject <NSCopying, NSCoding>
{
}

+ (id)keyPathsForValuesAffectingDisplayAttributedString;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 withWordFindingBlock:(id)arg4 docLocationCreationBlock:(void)arg5;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 docLocationCreationBlock:(id)arg4;
@property(readonly) BOOL caseSensitive;
@property(readonly) NSString *displayString;
@property(readonly) NSAttributedString *displayAttributedString;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface DVTFindTextualDescriptor : DVTFindDescriptor <DVTTextlikeFindDescriptor>
{
    NSString *_findString;
    int _matchStyle;
    BOOL _caseSensitive;
}

@property(readonly) int matchStyle; // @synthesize matchStyle=_matchStyle;
- (BOOL)caseSensitive;
@property(readonly) NSString *findString; // @synthesize findString=_findString;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 withWordFindingBlock:(id)arg4 docLocationCreationBlock:(void)arg5;
- (struct _NSRange)_wordBoundaryAtIndex:(unsigned long long)arg1 forString:(id)arg2;
- (id)description;
- (id)displayString;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithString:(id)arg1 ignoreCase:(BOOL)arg2 matchStyle:(int)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTFindRegularExpressionDescriptor : DVTFindDescriptor
{
    DVTRegularExpression *_regularExpression;
}

@property(readonly) DVTRegularExpression *regularExpression; // @synthesize regularExpression=_regularExpression;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 withWordFindingBlock:(id)arg4 docLocationCreationBlock:(void)arg5;
- (struct _NSRange)_first:(BOOL)arg1 matchOnLine:(id)arg2 withLineRange:(struct _NSRange)arg3 clippedByRange:(struct _NSRange)arg4 match:(id *)arg5;
- (BOOL)caseSensitive;
- (id)displayString;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithRegularExpression:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTRegularExpressionMatch : NSObject <NSCoding>
{
    struct _NSRange _searchRange;
    NSString *_candidateString;
    unsigned long long _groupCount;
    struct _NSRange *_ranges;
    NSData *_rangeData;
}

+ (id)_NSErrorForUErrorCode:(int)arg1 withDescription:(id)arg2;
@property(retain) NSData *rangeData; // @synthesize rangeData=_rangeData;
@property struct _NSRange *ranges; // @synthesize ranges=_ranges;
@property unsigned long long groupCount; // @synthesize groupCount=_groupCount;
@property(copy) NSString *candidateString; // @synthesize candidateString=_candidateString;
@property struct _NSRange searchRange; // @synthesize searchRange=_searchRange;
- (id)description;
- (id)stringByExpandingTemplate:(id)arg1;
- (struct _NSRange)rangeForGroupAtIndex:(unsigned long long)arg1;
- (id)substringForGroupAtIndex:(unsigned long long)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithURegularExpression:(struct URegularExpression *)arg1 candidateString:(id)arg2 searchRange:(struct _NSRange)arg3;

@end

@interface DVTRegularExpression : NSObject <NSCopying>
{
    NSString *_expressionString;
    struct URegularExpression *_compiledExpression;
    int _options;
}

+ (struct URegularExpression *)testAndCompileExpressionString:(id)arg1 options:(int)arg2 error:(id *)arg3;
+ (id)descriptionForParseError:(struct UParseError *)arg1;
+ (void)initialize;
@property int options; // @synthesize options=_options;
@property struct URegularExpression *compiledExpression; // @synthesize compiledExpression=_compiledExpression;
@property(copy) NSString *expressionString; // @synthesize expressionString=_expressionString;
- (id)description;
- (BOOL)enumerateMatchesInString:(id)arg1 error:(id *)arg2 usingBlock:(id)arg3;
- (BOOL)enumerateMatchesInString:(id)arg1 searchRange:(struct _NSRange)arg2 error:(id *)arg3 usingBlock:(id)arg4;
- (id)matchString:(id)arg1 error:(id *)arg2;
- (id)matchString:(id)arg1 searchRange:(struct _NSRange)arg2 error:(id *)arg3;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)finalize;
@property(readonly) unsigned long long groupCount;
- (id)initWithExpressionString:(id)arg1 options:(int)arg2 error:(id *)arg3;

@end

@interface DVTCheapReusableSubstring : NSString
{
    NSString *_realString;
    unsigned long long _realStringLength;
    struct _NSRange _subrange;
    unsigned long long _hashValue;
    BOOL _hashValueValid;
}

- (struct _NSRange)rangeOfCharacterFromSet:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange)arg3;
- (BOOL)isEqualToString:(id)arg1;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (unsigned long long)hash;
- (void)setRealString:(id)arg1 subrange:(struct _NSRange)arg2;
- (id)initWithRealString:(id)arg1 subrange:(struct _NSRange)arg2;

@end

@interface DVTRangeArray : NSArray
{
    unsigned long long _count;
    struct _NSRange *_ranges;
}

+ (void)initialize;
- (id)normalizedRangeArray;
- (unsigned long long)indexOfRangeContainingOrFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeContainingOrPreceding:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangePreceding:(unsigned long long)arg1;
- (struct _NSRange)lastRange;
- (struct _NSRange)firstRange;
- (unsigned long long)indexOfRange:(struct _NSRange)arg1;
- (struct _NSRange)rangeAtIndex:(unsigned long long)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)descriptionWithLocale:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqualToArray:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;
- (id)initWithRange:(struct _NSRange)arg1;
- (id)initWithRanges:(const struct _NSRange *)arg1 count:(unsigned long long)arg2;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;

@end

@interface DVTMutableRangeArray : NSMutableArray
{
    unsigned long long _count;
    unsigned long long _capacity;
    struct _NSRange *_ranges;
}

+ (void)initialize;
- (void)normalize;
- (void)removeAllRanges;
- (void)removeRangesAtIndexes:(id)arg1;
- (void)removeRangeAtIndex:(unsigned long long)arg1;
- (void)insertRange:(struct _NSRange)arg1 atIndex:(unsigned long long)arg2;
- (void)addRange:(struct _NSRange)arg1;
- (void)setRange:(struct _NSRange)arg1 atIndex:(unsigned long long)arg2;
- (unsigned long long)indexOfRangeContainingOrFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeContainingOrPreceding:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangePreceding:(unsigned long long)arg1;
- (struct _NSRange)lastRange;
- (struct _NSRange)firstRange;
- (unsigned long long)indexOfRange:(struct _NSRange)arg1;
- (struct _NSRange)rangeAtIndex:(unsigned long long)arg1;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeLastObject;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)descriptionWithLocale:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqualToArray:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;
- (id)initWithRanges:(const struct _NSRange *)arg1 count:(unsigned long long)arg2;
- (id)initWithObjects:(id *)arg1 count:(unsigned long long)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;

@end

@interface DVTSourceTokens : NSObject
{
    NSMutableSet *_tokens;
    BOOL _caseSensitive;
}

+ (long long)addTokenForString:(id)arg1;
+ (long long)_tokenForString:(id)arg1;
- (id)allTokens;
- (long long)tokenForString:(id)arg1;
- (BOOL)containsToken:(id)arg1;
- (void)setCaseSensitive:(BOOL)arg1;
- (void)addArrayOfStrings:(id)arg1;
- (id)initWithArrayOfStrings:(id)arg1 caseSensitive:(BOOL)arg2;

@end

@interface DVTCharStream : NSObject
{
    DVTStringBuffer *_stringBuffer;
    NSString *_realString;
    DVTCheapReusableSubstring *_cheapString;
    NSMutableArray *_savedTokens;
    id _savedBottomToken;
    BOOL _isAtBOL;
    BOOL _isAtColumnZero;
    BOOL _BOLIsKnown;
    BOOL _SeenOneCharAtBOL;
    BOOL _SeenWhitespaceAtBOL;
}

- (id)savedToken;
- (BOOL)hasSavedTokens;
- (void)saveToken:(id)arg1;
- (id)stringWithRange:(struct _NSRange)arg1;
- (unsigned long long)locationOfNewlineFrom:(unsigned long long)arg1 searchBackwards:(BOOL)arg2;
- (unsigned long long)peekCharacterInSet:(id)arg1;
- (unsigned short)peekCharSkippingWhitespace;
- (unsigned short)peekChar;
- (BOOL)isAtColumnZero;
- (BOOL)isAtBOL;
- (void)_computeBOL;
- (unsigned short)nextCharSkippingWhitespace;
- (unsigned short)nextChar;
- (void)setLocation:(unsigned long long)arg1;
- (unsigned long long)location;
- (unsigned long long)length;
- (id)string;
- (void)setString:(id)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTLanguageSpecification : DVTSourceSpecification
{
    long long _uniqueId;
    Class _scannerClass;
    DVTSourceScanner *_scanner;
    NSDictionary *_syntaxRules;
    BOOL _includeInMenu;
    BOOL _usesCLikeIndentation;
    DVTSourceModelParserProductionRule *_productionRule;
}

+ (id)identifierForUniqueId:(long long)arg1;
+ (long long)_uniqueIdForIdentifier:(id)arg1;
+ (id)specificationRegistryName;
+ (id)specificationTypePathExtensions;
+ (id)localizedSpecificationTypeName;
+ (id)specificationType;
+ (Class)specificationTypeBaseClass;
@property(retain) DVTSourceModelParserProductionRule *productionRule; // @synthesize productionRule=_productionRule;
@property(readonly) NSDictionary *syntaxRules; // @synthesize syntaxRules=_syntaxRules;
@property(readonly) Class scannerClass; // @synthesize scannerClass=_scannerClass;
@property(readonly) BOOL usesCLikeIndentation; // @synthesize usesCLikeIndentation=_usesCLikeIndentation;
@property(readonly) BOOL includeInMenu; // @synthesize includeInMenu=_includeInMenu;
@property(readonly) long long uniqueId; // @synthesize uniqueId=_uniqueId;
@property(readonly) NSString *syntaxType;
- (id)availableKeywords;
- (id)lexerKeywords;
@property(readonly) DVTSourceScanner *scanner; // @synthesize scanner=_scanner;
- (id)name;
- (id)initWithPropertyListDictionary:(id)arg1;

@end

@interface DVTSourceSpecification : NSObject
{
    NSString *_identifier;
    NSString *_superSpecIdentifier;
    DVTSourceSpecification *_superSpecification;
    NSDictionary *_properties;
}

+ (id)localizedSpecificationTypeName;
+ (id)specificationRegistry;
+ (id)specificationRegistryName;
+ (id)_subSpecificationsOfSpecification:(id)arg1;
+ (id)registeredSpecifications;
+ (id)specificationsForIdentifiers:(id)arg1;
+ (id)specificationForIdentifier:(id)arg1;
+ (void)registerSpecificationTypeBaseClass:(Class)arg1;
+ (id)registerSpecificationProxiesFromPropertyListsInDirectory:(id)arg1 recursively:(BOOL)arg2;
+ (id)registerSpecificationProxiesFromPropertyListsInDirectory:(id)arg1 recursively:(BOOL)arg2 inBundle:(id)arg3;
+ (BOOL)_shouldRecurseIntoDirectoryNamed:(id)arg1 ofType:(id)arg2;
+ (id)_registerSpecificationProxiesOfType:(id)arg1 fromDictionaryOrArray:(id)arg2 inDirectory:(id)arg3 bundle:(id)arg4 sourceDescription:(id)arg5;
+ (id)registerSpecificationProxyFromPropertyList:(id)arg1;
+ (id)_pathExensionsToTypesRegistry;
+ (id)_typesToSpecTypeBaseClassesRegistry;
+ (id)specificationTypePathExtensions;
+ (id)specificationType;
+ (Class)specificationTypeBaseClass;
+ (void)registerSpecificationOrProxy:(id)arg1;
+ (void)initialize;
+ (void)searchForAndRegisterAllAvailableSpecifications;
@property(readonly) NSDictionary *properties; // @synthesize properties=_properties;
@property(readonly) NSString *superSpecIdentifier; // @synthesize superSpecIdentifier=_superSpecIdentifier;
- (id)description;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (id)name;
- (id)stringForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)_objectForKeyIgnoringInheritance:(id)arg1;
- (long long)nameCompare:(id)arg1;
- (long long)identifierCompare:(id)arg1;
- (id)subSpecifications;
- (BOOL)isKindOfSpecification:(id)arg1;
@property(readonly) DVTSourceSpecification *superSpecification; // @synthesize superSpecification=_superSpecification;
- (BOOL)isMissingSpecificationProxy;
- (id)initAsMissingSpecificationProxyWithIdentifier:(id)arg1 name:(id)arg2 description:(id)arg3;
- (id)initWithPropertyListDictionary:(id)arg1;

@end

@interface DVTSyntaxTypeSpecification : DVTSourceSpecification
{
    NSString *_urlFormat;
    NSString *_nameFormat;
    NSString *_colorName;
    BOOL _inheritsNodeType;
    BOOL _isMark;
    BOOL _includeInPreferences;
    BOOL _ignoreToken;
    BOOL _isLink;
}

+ (id)specificationRegistryName;
+ (id)specificationTypePathExtensions;
+ (id)localizedSpecificationTypeName;
+ (id)specificationType;
+ (Class)specificationTypeBaseClass;
@property(copy) NSString *colorName; // @synthesize colorName=_colorName;
@property(copy) NSString *nameFormat; // @synthesize nameFormat=_nameFormat;
@property(copy) NSString *urlFormat; // @synthesize urlFormat=_urlFormat;
@property(readonly) BOOL isLink; // @synthesize isLink=_isLink;
@property(readonly) BOOL ignoreToken; // @synthesize ignoreToken=_ignoreToken;
@property(readonly) BOOL includeInPreferences; // @synthesize includeInPreferences=_includeInPreferences;
@property(readonly) BOOL isMark; // @synthesize isMark=_isMark;
@property(readonly) BOOL inheritsNodeType; // @synthesize inheritsNodeType=_inheritsNodeType;
- (id)initWithPropertyListDictionary:(id)arg1;

@end

@interface DVTBlockScanner : DVTSourceScanner
{
    NSString *startString;
    NSString *endString;
    NSString *altEndString;
    unsigned short startChar;
    unsigned short endChar;
    unsigned short altEndChar;
    unsigned short escapeChar;
    unsigned int recursive:1;
    unsigned int dontIncludeEnd:1;
    unsigned int parseEndBeforeIncludedRules:1;
    unsigned int caseSensitive:1;
    unsigned int isVolatile:1;
    long long startToken;
    long long endToken;
    long long altEndToken;
    long long altToken;
}

- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (id)parseRecursive:(id)arg1 withContext:(id)arg2 inputStream:(id)arg3 range:(struct _NSRange)arg4 dirtyRange:(struct _NSRange *)arg5;
- (int)actionForEndToken:(id)arg1 inContext:(id)arg2 inputStream:(id)arg3;
- (long long)nextToken:(id)arg1 withItem:(id)arg2 inTree:(id)arg3 withContext:(id)arg4 initialToken:(long long)arg5 insideBlock:(BOOL)arg6 range:(struct _NSRange)arg7 dirtyRange:(struct _NSRange *)arg8 reusedToken:(char *)arg9;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTHTMLEntityScanner : DVTBlockScanner
{
    NSDictionary *_entityMap;
}

- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTHTMLScanner : DVTBlockScanner
{
}

- (id)parseRecursive:(id)arg1 withContext:(id)arg2 inputStream:(id)arg3 range:(struct _NSRange)arg4 dirtyRange:(struct _NSRange *)arg5;
- (int)actionForEndToken:(id)arg1 inContext:(id)arg2 inputStream:(id)arg3;
- (id)_stringByRemovingLeadingAndTrailingCharacters:(id)arg1 fromString:(id)arg2;

@end

@interface DVTKeywordScanner : DVTSourceScanner
{
    NSCharacterSet *_startSet;
    NSCharacterSet *_invertedOtherSet;
    DVTSourceTokens *_keywords;
    struct _NSRange _previousTokenRange;
    BOOL _caseSensitive;
    BOOL _isSimpleToken;
}

- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2;
- (BOOL)canTokenize;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (long long)nextToken:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTNumberScanner : DVTRegExScanner
{
}

- (long long)tokenForString:(id)arg1 forRange:(struct _NSRange *)arg2 subItems:(id *)arg3;

@end

@interface DVTPythonScanner : DVTSourceScanner
{
}

- (long long)parseOneIncludedRule:(id)arg1 inTree:(id)arg2 withContext:(id)arg3 initialToken:(long long)arg4 inputStream:(id)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7 isLexing:(BOOL)arg8 reusedToken:(char *)arg9;
- (void)computeContext:(id)arg1 inString:(id)arg2 forLocation:(unsigned long long)arg3;
- (unsigned long long)nextIndentForlocation:(unsigned long long)arg1 inString:(id)arg2;
- (long long)_indentForLineWithRange:(struct _NSRange)arg1 inString:(id)arg2;

@end

@interface DVTRegExScanner : DVTSourceScanner
{
    NSCharacterSet *_startSet;
    NSCharacterSet *_invertedOtherSet;
    NSMutableArray *_regExes;
    NSMutableArray *_captureNodeTypes;
    struct _NSRange _previousTokenRange;
    BOOL _isSimpleToken;
    BOOL _altIsSimpleToken;
    BOOL _caseSensitive;
}

- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2;
- (BOOL)canTokenize;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (long long)nextToken:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 until:(unsigned long long)arg4 subItems:(id *)arg5;
- (long long)tokenForString:(id)arg1 forRange:(struct _NSRange *)arg2 subItems:(id *)arg3;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTScannerRule : NSObject
{
    long long _token;
    NSSet *_tokenSet;
    BOOL _optional;
    BOOL _allowMultiple;
    DVTSourceScanner *_scanner;
}

@property(readonly) DVTSourceScanner *scanner; // @synthesize scanner=_scanner;
@property(readonly) BOOL allowMultiple; // @synthesize allowMultiple=_allowMultiple;
@property(readonly) BOOL optional; // @synthesize optional=_optional;
- (BOOL)matchesToken:(long long)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTRuleScanner : DVTSourceScanner
{
    NSMutableArray *_rules;
    unsigned short _startChar;
    unsigned int _isVolatile:1;
}

- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (long long)nextToken:(id)arg1 withItemArray:(id)arg2 inTree:(id)arg3 withContext:(id)arg4 initialToken:(long long)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTSourceScanner : NSObject
{
    DVTLanguageSpecification *_langSpec;
    NSMutableArray *_includedRules;
    DVTSourceScanner *_lexer;
    long long _langId;
    long long _token;
    unsigned int _nodeType:16;
    unsigned int _altNodeType:16;
    unsigned int _startAtBOL:1;
    unsigned int _startAtColumnZero:1;
    unsigned int _isFoldable:1;
    unsigned int _ignoreToken:1;
    unsigned int _inheritsNodeType:1;
    unsigned int _altIgnoreToken:1;
    unsigned int _altInheritsNodeType:1;
    unsigned int _needToDirtyRightEdges:1;
}

+ (void)initialize;
@property(readonly) DVTLanguageSpecification *langSpec; // @synthesize langSpec=_langSpec;
@property(readonly) DVTSourceScanner *lexer; // @synthesize lexer=_lexer;
@property(readonly) long long token; // @synthesize token=_token;
@property(readonly) long long langId; // @synthesize langId=_langId;
- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2;
- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2 allowNonWords:(BOOL)arg3;
- (BOOL)canTokenize;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (void)parseIncludedRules:(id)arg1 inTree:(id)arg2 withContext:(id)arg3 initialToken:(long long)arg4 inputStream:(id)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7;
- (long long)parseOneIncludedRule:(id)arg1 inTree:(id)arg2 withContext:(id)arg3 initialToken:(long long)arg4 inputStream:(id)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7 isLexing:(BOOL)arg8 reusedToken:(char *)arg9;
- (id)nodeForThisScanner:(id)arg1 atLocation:(unsigned long long)arg2 inputStream:(id)arg3;
- (id)nodeToReuse:(id)arg1 forScanner:(id)arg2 inputStream:(id)arg3;
@property(readonly) NSArray *includedRules; // @synthesize includedRules=_includedRules;
- (id)description;
- (id)initWithLanguageSpecification:(id)arg1;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTSourceModel : NSObject
{
    id <DVTSourceBufferProvider> _sourceBufferProvider;
    DVTCharStream *_inputStream;
    DVTSourceScanner *_scanner;
    struct _NSRange _dirtyRange;
    long long _batchDelta;
    DVTSourceModelItem *_sourceItems;
    BOOL _isDoingBatchEdit;
    DVTSourceModelParser *_nativeParser;
}

+ (void)initialize;
@property BOOL isDoingBatchEdit; // @synthesize isDoingBatchEdit=_isDoingBatchEdit;
@property long long batchDelta; // @synthesize batchDelta=_batchDelta;
@property struct _NSRange dirtyRange; // @synthesize dirtyRange=_dirtyRange;
@property(retain) DVTSourceScanner *scanner; // @synthesize scanner=_scanner;
@property(retain) DVTSourceModelItem *sourceItems; // @synthesize sourceItems=_sourceItems;
@property(retain) DVTCharStream *inputStream; // @synthesize inputStream=_inputStream;
@property(retain) id <DVTSourceBufferProvider> sourceBufferProvider; // @synthesize sourceBufferProvider=_sourceBufferProvider;
- (id)objCMethodNameForItem:(id)arg1 nameRanges:(id *)arg2;
- (BOOL)isItemDictionaryLiteral:(id)arg1;
- (BOOL)isItemObjectLiteral:(id)arg1;
- (BOOL)isItemForStatement:(id)arg1;
- (BOOL)isItemSemanticBlock:(id)arg1;
- (BOOL)isItemBracketExpression:(id)arg1;
- (BOOL)isItemAngleExpression:(id)arg1;
- (BOOL)isItemParenExpression:(id)arg1;
- (BOOL)isPostfixExpressionAtLocation:(unsigned long long)arg1;
- (BOOL)isInTokenizableCodeAtLocation:(unsigned long long)arg1;
- (BOOL)isInPlainCodeAtLocation:(unsigned long long)arg1;
- (BOOL)isInKeywordAtLocation:(unsigned long long)arg1;
- (BOOL)isIncompletionPlaceholderAtLocation:(unsigned long long)arg1;
- (BOOL)isInNumberConstantAtLocation:(unsigned long long)arg1;
- (BOOL)isInCharacterConstantAtLocation:(unsigned long long)arg1;
- (BOOL)isInStringConstantAtLocation:(unsigned long long)arg1;
- (BOOL)isInIncludeStatementAtLocation:(unsigned long long)arg1;
- (BOOL)isInPreprocessorStatementAtLocation:(unsigned long long)arg1;
- (BOOL)isInDocCommentAtLocation:(unsigned long long)arg1;
- (BOOL)isInCommentAtLocation:(unsigned long long)arg1;
- (id)completionPlaceholderItemAtLocation:(unsigned long long)arg1;
- (id)identOrKeywordItemAtLocation:(unsigned long long)arg1;
- (id)objCDeclaratorItemAtLocation:(unsigned long long)arg1;
- (id)numberConstantAtLocation:(unsigned long long)arg1;
- (id)characterConstantAtLocation:(unsigned long long)arg1;
- (id)stringConstantAtLocation:(unsigned long long)arg1;
- (id)includeStatementAtLocation:(unsigned long long)arg1;
- (id)preprocessorStatementAtLocation:(unsigned long long)arg1;
- (id)docCommentAtLocation:(unsigned long long)arg1;
- (id)commentAtLocation:(unsigned long long)arg1;
- (id)placeholderItemsFromItem:(id)arg1;
- (id)identifierItemsFromItem:(id)arg1;
- (id)commentBlockItems;
- (id)functionsAndMethodItems;
- (id)classItems;
- (void)addBlockItemsInTypeList:(long long *)arg1 fromItem:(id)arg2 toArray:(id)arg3;
- (void)addIdentifierItemsFromItem:(id)arg1 toArray:(id)arg2;
- (void)addItemsInTypeList:(long long *)arg1 fromItem:(id)arg2 toArray:(id)arg3;
- (id)functionOrMethodDefinitionAtLocation:(unsigned long long)arg1;
- (id)functionOrMethodAtLocation:(unsigned long long)arg1;
- (id)classAtLocation:(unsigned long long)arg1;
- (id)itemNameAtLocation:(unsigned long long)arg1 inTypeList:(long long *)arg2 nameRanges:(id *)arg3 scopeRange:(struct _NSRange *)arg4;
- (id)nameOfItem:(id)arg1 nameRanges:(id *)arg2 scopeRange:(struct _NSRange *)arg3;
- (void)enumerateIdentifierItemsInRange:(struct _NSRange)arg1 usingBlock:(id)arg2;
- (id)itemAtLocation:(unsigned long long)arg1 ofType:(id)arg2;
- (id)itemAtLocation:(unsigned long long)arg1 inTypeList:(long long *)arg2;
- (long long *)typeListForSpecNames:(id)arg1;
- (id)builtUpNameForItem:(id)arg1 nameRanges:(id *)arg2;
- (id)_builtUpNameForItem:(id)arg1 mutableNameRanges:(id)arg2;
- (id)_builtUpNameForSubTree:(id)arg1 mutableNameRanges:(id)arg2;
- (id)objectLiteralItemAtLocation:(unsigned long long)arg1;
- (id)parenItemAtLocation:(unsigned long long)arg1;
- (id)parenLikeItemAtLocation:(unsigned long long)arg1;
- (id)foldableBlockItemForLocation:(unsigned long long)arg1;
- (id)foldableBlockItemForLineAtLocation:(unsigned long long)arg1;
- (id)blockItemAtLocation:(unsigned long long)arg1;
- (long long)indentForItem:(id)arg1;
- (id)adjoiningItemAtLocation:(unsigned long long)arg1;
- (id)enclosingItemAtLocation:(unsigned long long)arg1;
- (id)_topLevelSourceItem;
- (void)parse;
- (void)doingBatchEdit:(BOOL)arg1;
- (void)dirtyRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (id)initWithSourceBufferProvider:(id)arg1;

@end

@interface DVTSourceModelItem : NSObject
{
    struct _NSRange _relativeLocation;
    long long _langId;
    long long _token;
    DVTSourceModelItem *_parent;
    NSMutableArray *_children;
    unsigned int _nodeType:15;
    unsigned int _isOpaque:1;
    unsigned int _dirty:1;
    unsigned int _isBlock:1;
    unsigned int _ignoreToken:1;
    unsigned int _inheritsNodeType:1;
    unsigned int _isIdentifier:1;
    unsigned int _needsAdjustNodeType:1;
    unsigned int _isSimpleToken:1;
    unsigned int _isVolatile:1;
    unsigned int _needToDirtyRightEdges:1;
}

+ (id)sourceModelItemWithRange:(struct _NSRange)arg1 language:(long long)arg2 token:(long long)arg3 nodeType:(short)arg4;
@property struct _NSRange relativeLocation; // @synthesize relativeLocation=_relativeLocation;
@property(retain, nonatomic) NSMutableArray *children; // @synthesize children=_children;
@property(nonatomic) DVTSourceModelItem *parent; // @synthesize parent=_parent;
@property long long token; // @synthesize token=_token;
@property long long langId; // @synthesize langId=_langId;
- (void)enumerateIdentifierItemsInRelativeRange:(struct _NSRange)arg1 usingBlock:(id)arg2;
- (void)clearAdjustedNodeTypes;
- (long long)compare:(id)arg1;
- (id)followingItem;
- (id)precedingItem;
- (id)_lastLeafItem;
- (id)_firstLeafItem;
- (id)nextItem;
- (id)previousItem;
- (BOOL)isAncestorOf:(id)arg1;
- (id)childAdjoiningLocation:(unsigned long long)arg1;
- (id)childEnclosingLocation:(unsigned long long)arg1;
- (id)_childEnclosingLocation:(unsigned long long)arg1;
- (unsigned long long)indexOfChildAtLocation:(unsigned long long)arg1;
- (unsigned long long)indexOfChildAfterLocation:(unsigned long long)arg1;
- (unsigned long long)indexOfChildBeforeLocation:(unsigned long long)arg1;
- (unsigned long long)numberOfChildren;
- (void)addChildren:(id)arg1;
- (void)addChild:(id)arg1;
- (void)assignParents:(id)arg1;
- (BOOL)isVolatile;
- (void)setVolatile:(BOOL)arg1;
@property BOOL needsAdjustNodeType;
- (BOOL)needToDirtyRightEdges;
- (void)setNeedToDirtyRightEdges:(BOOL)arg1;
- (BOOL)isSimpleToken;
- (void)setIsSimpleToken:(BOOL)arg1;
- (BOOL)inheritsNodeType;
- (void)setInheritsNodeType:(BOOL)arg1;
- (BOOL)ignoreToken;
- (void)setIgnoreToken:(BOOL)arg1;
- (BOOL)dirty;
- (void)setDirty:(BOOL)arg1;
- (BOOL)isIdentifier;
- (short)rawNodeType;
- (BOOL)isOpaque;
- (void)setIsOpaque:(BOOL)arg1;
- (short)nodeType;
- (void)setNodeType:(short)arg1;
- (struct _NSRange)innerRange;
- (void)offsetBy:(long long)arg1;
- (void)setRange:(struct _NSRange)arg1;
- (struct _NSRange)range;
- (id)enclosingBlock;
- (long long)blockDepth;
- (void)setIsBlock:(BOOL)arg1;
- (BOOL)isBlock;
- (void)dirtyRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (void)dirtyRelativeRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (void)validate;
- (id)dumpContext;
- (id)contextArray;
- (id)simpleDescription;
- (id)diffableDescription;
- (id)description;
- (id)innerDescription:(id)arg1 showSelf:(BOOL)arg2;
- (id)initWithRange:(struct _NSRange)arg1 language:(long long)arg2 token:(long long)arg3 nodeType:(short)arg4;

@end

@interface DVTSourceModelItemMatcher : NSObject
{
    id <DVTNodeTypeProvider> _nodeTypeProvider;
    id <DVTSourceBufferProvider> _sourceBufferProvider;
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
+ (void)unregisterSourceModelItemMatcherClass:(Class)arg1;
+ (void)registerSourceModelItemMatcherClass:(Class)arg1;
+ (id)registeredSourceModelItemMatcherClasses;
+ (void)registerSourceModelItemMatcherClasses;
@property(retain) id <DVTSourceBufferProvider> sourceBufferProvider; // @synthesize sourceBufferProvider=_sourceBufferProvider;
@property(retain) id <DVTNodeTypeProvider> nodeTypeProvider; // @synthesize nodeTypeProvider=_nodeTypeProvider;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;
@property(retain) DVTSourceModel *sourceModel; // @dynamic sourceModel;
- (id)textStorage;
- (id)initWithNodeTypeProvider:(id)arg1 sourceBufferProvider:(id)arg2;

@end

@interface DVTPreprocessorItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTClassItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTCategoryItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTProtocolItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTMethodItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTFunctionItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTVariableItemMatcher : DVTSourceModelItemMatcher
{
}

+ (BOOL)canHandleSourceModelItem:(id)arg1 withNodeTypeProvider:(id)arg2 usingSourceBufferProvider:(id)arg3;
- (id)matchedSourceModelItemsForSourceModelItem:(id)arg1;

@end

@interface DVTSourceNodeTypes : NSObject
{
}

+ (long long)nodeTypesCount;
+ (id)nodeTypeNameForId:(short)arg1;
+ (short)registerNodeTypeNamed:(id)arg1;
+ (void)initialize;

@end

@interface DVTDocumentLocation : NSObject <NSCoding, NSCopying, DVTSimpleSerialization>
{
    NSURL *_documentURL;
    NSNumber *_timestamp;
}

@property(readonly) NSNumber *timestamp; // @synthesize timestamp=_timestamp;
@property(readonly) NSURL *documentURL; // @synthesize documentURL=_documentURL;
- (long long)compare:(id)arg1;
- (id)description;
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
- (BOOL)isEqualDisregardingTimestamp:(id)arg1;
- (BOOL)isEqualToDocumentLocationDisregardingDocumentURL:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithURL:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly) NSString *documentURLString;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2;
- (id)init;

@end

@interface DVTTextDocumentLocation : DVTDocumentLocation
{
    long long _startingColumnNumber;
    long long _endingColumnNumber;
    long long _startingLineNumber;
    long long _endingLineNumber;
    struct _NSRange _characterRange;
}

@property(readonly) struct _NSRange characterRange; // @synthesize characterRange=_characterRange;
@property(readonly) long long endingLineNumber; // @synthesize endingLineNumber=_endingLineNumber;
@property(readonly) long long startingLineNumber; // @synthesize startingLineNumber=_startingLineNumber;
@property(readonly) long long endingColumnNumber; // @synthesize endingColumnNumber=_endingColumnNumber;
@property(readonly) long long startingColumnNumber; // @synthesize startingColumnNumber=_startingColumnNumber;
- (id)copyWithURL:(id)arg1;
- (long long)compare:(id)arg1;
- (BOOL)isEqualDisregardingTimestamp:(id)arg1;
- (BOOL)isEqualToDocumentLocationDisregardingDocumentURL:(id)arg1;
- (BOOL)isEqual:(id)arg1;
@property(readonly) struct _NSRange lineRange;
- (id)description;
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 characterRange:(struct _NSRange)arg3;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 lineRange:(struct _NSRange)arg3;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 startingColumnNumber:(long long)arg3 endingColumnNumber:(long long)arg4 startingLineNumber:(long long)arg5 endingLineNumber:(long long)arg6 characterRange:(struct _NSRange)arg7;

@end

@interface DVTMutableOrderedSet : NSMutableSet
{
    NSMutableOrderedSet *_orderedSet;
}

+ (id)setWithCapacity:(unsigned long long)arg1;
+ (id)set;
- (id)description;
- (BOOL)isEquivalentToOrderedSet:(id)arg1;
- (void)unionSet:(id)arg1;
- (void)minusSet:(id)arg1;
- (void)intersectSet:(id)arg1;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)insertObject:(id)arg1 atIndex:(long long)arg2;
- (void)setSet:(id)arg1;
- (void)addObjectsFromArray:(id)arg1;
- (void)addObject:(id)arg1;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeAllObjects;
- (void)removeObject:(id)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)reverseObjectEnumerator;
- (id)objectEnumerator;
- (id)allObjects;
- (id)member:(id)arg1;
- (long long)indexOfObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (id)lastObject;
- (id)firstObject;
- (unsigned long long)count;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)init;
- (Class)dvt_mutableClass;

@end

@interface DVTMutableOrderedDictionary : NSMutableDictionary
{
    DVTMutableOrderedSet *set;
    DVTMapTable *backingMapTable;
}

- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)allKeys;
- (id)lastValue;
- (id)lastKey;
- (id)firstValue;
- (id)firstKey;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithObjects:(id)arg1 forKeys:(id)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)init;

@end

@interface DVTSourceCodeLanguage : NSObject <NSCopying>
{
    NSString *_identifier;
    NSString *_languageName;
    NSString *_languageSpecificationIdentifier;
    DVTLanguageSpecification *_languageSpecification;
    NSString *_documentationAbbreviation;
    NSArray *_fileDataTypeIdentifiers;
    NSArray *_fileDataTypes;
    NSArray *_conformedToLanguageIdentifiers;
    NSArray *_conformedToLanguages;
    Class _nativeSourceModelParserClass;
}

+ (id)sourceCodeLanguageForFileDataType:(id)arg1;
+ (id)sourceCodeLanguageWithIdentifier:(id)arg1;
+ (id)sourceCodeLanguages;
+ (id)_sourceCodeLanguageForExtension:(id)arg1;
+ (void)initialize;
@property(readonly) Class nativeSourceModelParserClass; // @synthesize nativeSourceModelParserClass=_nativeSourceModelParserClass;
@property(readonly) NSString *documentationAbbreviation; // @synthesize documentationAbbreviation=_documentationAbbreviation;
@property(readonly) NSString *languageName; // @synthesize languageName=_languageName;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (BOOL)conformsToLanguage:(id)arg1;
@property(readonly) NSArray *conformedToLanguages;
@property(readonly) NSArray *fileDataTypes;
@property(readonly) DVTLanguageSpecification *languageSpecification;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithSourceCodeLanguageExtension:(id)arg1;

@end

@interface DVTDevice : NSObject
{
    DVTExtension *_extension;
    NSURL *_deviceLocation;
    NSString *_name;
    DVTPlatform *_platform;
    NSString *_operatingSystemVersion;
    DVTDeviceType *_deviceType;
    NSString *_nativeArchitecture;
    NSMutableSet *_capabilities;
    BOOL _available;
    BOOL _ignored;
}

+ (id)_knownDeviceLocators;
+ (void)initialize;
@property(retain) DVTDeviceType *deviceType; // @synthesize deviceType=_deviceType;
@property(copy) NSString *operatingSystemVersion; // @synthesize operatingSystemVersion=_operatingSystemVersion;
@property(retain) DVTPlatform *platform; // @synthesize platform=_platform;
@property(getter=isIgnored) BOOL ignored; // @synthesize ignored=_ignored;
@property(getter=isAvailable) BOOL available; // @synthesize available=_available;
@property(copy) NSString *name; // @synthesize name=_name;
@property(readonly) NSURL *deviceLocation; // @synthesize deviceLocation=_deviceLocation;
@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
@property(readonly) BOOL canRunMultipleInstancesPerApp;
@property(readonly) BOOL runsRemoteFromHostLauncher;
@property(readonly) BOOL supportsWatchpoints;
@property(readonly) BOOL supportsDebugAsDifferentUser;
@property(readonly) BOOL supportsDebuggingDocumentVersioning;
@property(readonly) BOOL supportsResumeAndTurningItOnOrOff;
@property(readonly) BOOL supportsCustomWorkingDirectory;
@property(readonly) BOOL supportsDisplayScaleOption;
@property(readonly) BOOL supportsRoutingCoverageFile;
@property(readonly) BOOL supportsLocationSimulation;
@property(readonly) NSString *deviceIdentifierForGPUTracing;
@property(readonly) BOOL supportsApplicationDataUploading;
@property(readonly) BOOL supportsAttachByPIDOrName;
- (void)requestProcessInformations:(id)arg1;
@property(readonly) NSString *executionDisplayName;
@property(readonly) BOOL alwaysAttachesForDebugging;
@property(readonly) NSString *displayOrder;
@property(copy) NSString *nativeArchitecture; // @synthesize nativeArchitecture=_nativeArchitecture;
- (id)servicesMatchingCapability:(id)arg1;
- (id)_instantiateServicesForCapability:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithDeviceLocation:(id)arg1 extension:(id)arg2;
- (id)description;

// Remaining properties
@property(readonly) NSSet *capabilities; // @dynamic capabilities;
@property(readonly) NSMutableSet *mutableCapabilities; // @dynamic mutableCapabilities;

@end

@interface DVTDeviceManager : NSObject
{
    NSMutableDictionary *_locatorTrackers;
    DVTMapTable *_observingTokens;
    NSMutableSet *_availableDevices;
    DVTDevice *_localComputer;
}

+ (id)defaultDeviceManager;
+ (void)initialize;
- (void)stopLocating;
- (void)startLocating;
- (void)_adjustAvailableDevicesForMutation:(unsigned long long)arg1 addedObjects:(id)arg2 removedObjects:(id)arg3;
- (void)_stopObservingDevice:(id)arg1;
- (void)_startObservingDevice:(id)arg1;
- (id)_observingTokensForDevice:(id)arg1 create:(BOOL)arg2;
- (id)_discoverDeviceLocators;
- (id)deviceAtDeviceLocation:(id)arg1;
- (id)_deviceLocatorForDeviceLocationScheme:(id)arg1;
- (id)devicesMatchingPredicate:(id)arg1;
@property(readonly) DVTDevice *localComputer;
- (id)init;

// Remaining properties
@property(copy) NSSet *availableDevices; // @dynamic availableDevices;
@property(readonly) NSMutableSet *mutableAvailableDevices; // @dynamic mutableAvailableDevices;

@end

@interface _DVTDeviceLocatorTracker : NSObject
{
    DVTDeviceLocator *_deviceLocator;
    DVTDeviceManager *_deviceManager;
    id <DVTObservingToken> _observation;
}

@property(readonly) DVTDeviceLocator *deviceLocator; // @synthesize deviceLocator=_deviceLocator;
- (void)stopLocatingAndObserving;
- (void)startLocating;
- (void)startObserving;
- (id)initWithDeviceLocator:(id)arg1 forDeviceManager:(id)arg2;

@end

@interface DVTDeviceLocator : NSObject
{
    NSMutableSet *_locatedDevices;
}

+ (void)initialize;
- (id)knownDeviceAtDeviceLocation:(id)arg1;
- (void)stopLocating;
- (void)startLocating;
@property(readonly) NSString *deviceLocationScheme; // @dynamic deviceLocationScheme;
- (id)init;

// Remaining properties
@property(readonly) NSSet *locatedDevices; // @dynamic locatedDevices;
@property(readonly) NSMutableSet *mutableLocatedDevices; // @dynamic mutableLocatedDevices;

@end

@interface DVTDeviceCapability : NSObject
{
    NSDictionary *_properties;
}

+ (id)deviceCapabilityWithProperties:(id)arg1;
@property(readonly) NSDictionary *properties; // @synthesize properties=_properties;
- (id)description;
- (BOOL)matchesCapability:(id)arg1;
- (id)initWithProperties:(id)arg1;

@end

@interface DVTDeviceCapabilityMatchAnythingObject : NSObject
{
}

@end

@interface DVTDeviceService : NSObject
{
    DVTDevice *_device;
    DVTExtension *_extension;
    DVTDeviceCapability *_currentCapability;
}

+ (id)capability;
@property(readonly) DVTDeviceCapability *currentCapability; // @synthesize currentCapability=_currentCapability;
@property(readonly) DVTDevice *device; // @synthesize device=_device;
- (id)initForDevice:(id)arg1 extension:(id)arg2 capability:(id)arg3;

@end

@interface DVTDeviceType : NSObject
{
    NSString *_identifier;
    NSString *_name;
    NSString *_UTI;
    DVTMutableOrderedSet *_supportedArchitectures;
}

+ (id)deviceTypeWithIdentifier:(id)arg1;
+ (void)initialize;
@property(readonly) DVTMutableOrderedSet *supportedArchitectures; // @synthesize supportedArchitectures=_supportedArchitectures;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (id)initWithExtension:(id)arg1;

@end

@interface DVTLocalComputer : DVTAbstractMacDevice
{
}

+ (void)initialize;
- (BOOL)canRunMultipleInstancesPerApp;
- (BOOL)supportsWatchpoints;
- (BOOL)supportsDebugAsDifferentUser;
- (BOOL)supportsDebuggingDocumentVersioning;
- (BOOL)supportsResumeAndTurningItOnOrOff;
- (BOOL)supportsCustomWorkingDirectory;
- (id)processInformations;
- (BOOL)isIgnored;
- (void)setIgnored:(BOOL)arg1;
- (BOOL)isAvailable;
- (void)setAvailable:(BOOL)arg1;
- (id)init;

@end

@interface DVTLocalComputerLocator : DVTDeviceLocator
{
}

+ (id)localComputer;
- (id)knownDeviceAtDeviceLocation:(id)arg1;
- (void)stopLocating;
- (void)startLocating;
- (id)deviceLocationScheme;

@end

@interface DVTPlatform : NSObject
{
    NSString *_identifier;
    NSArray *_alternateNames;
    NSString *_name;
    DVTPlatformFamily *_family;
    NSString *_platformDirectoryName;
    DVTFilePath *_platformPath;
    NSString *_userDescription;
    BOOL _isDeploymentPlatform;
    DVTFilePath *_iconPath;
    NSDictionary *_propertyListDictionary;
    NSDictionary *_internalPropertyListDictionary;
    DVTHashTable *_SDKs;
    NSDictionary *_deviceProperties;
}

+ (id)_preferredArchitectureForPlatformWithIdentifier:(id)arg1;
+ (id)extraPlatformFolders;
+ (id)defaultPlatform;
+ (void)loadAllPlatforms;
+ (void)_loadPlatformAtPath:(id)arg1;
+ (id)_propertyDictionaryForPlatformAtPath:(id)arg1;
+ (id)allPlatforms;
+ (void)registerPlatform:(id)arg1;
+ (id)platformForPath:(id)arg1;
+ (void)_mapPlatformPath:(id)arg1 toPlatform:(id)arg2;
+ (id)_allPlatformsByIdentifierValues;
+ (id)platformForIdentifier:(id)arg1;
+ (void)_mapPlatformIdentifier:(id)arg1 toPlatform:(id)arg2;
+ (id)platformForName:(id)arg1;
+ (void)_mapPlatformName:(id)arg1 toPlatform:(id)arg2 isAlias:(BOOL)arg3;
+ (void)initialize;
@property(readonly) NSDictionary *deviceProperties; // @synthesize deviceProperties=_deviceProperties;
@property(readonly) DVTFilePath *iconPath; // @synthesize iconPath=_iconPath;
@property(readonly) BOOL isDeploymentPlatform; // @synthesize isDeploymentPlatform=_isDeploymentPlatform;
@property(readonly) NSString *userDescription; // @synthesize userDescription=_userDescription;
@property(readonly) DVTFilePath *platformPath; // @synthesize platformPath=_platformPath;
@property(readonly) NSString *platformDirectoryName; // @synthesize platformDirectoryName=_platformDirectoryName;
@property(readonly) DVTPlatformFamily *family; // @synthesize family=_family;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSArray *alternateNames; // @synthesize alternateNames=_alternateNames;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)dataFormatterPluginSearchPaths;
- (id)debuggerSupportDylibPath;
- (BOOL)_debuggerSettingIsEnabledForKey:(id)arg1;
- (id)_debuggerSettingForKey:(id)arg1;
@property(readonly) NSSet *SDKs;
- (void)addSDK:(id)arg1;
- (id)internalPropertyListDictionary;
- (id)propertyListDictionary;
- (id)initWithPath:(id)arg1;
- (id)initWithPropertyListDictionary:(id)arg1 path:(id)arg2;

@end

@interface DVTPlatformFamily : NSObject
{
    NSString *_identifier;
    NSString *_name;
    NSMutableSet *_platforms;
    NSArray *_osVersions;
}

+ (id)registerPlatformFamilyWithIdentifier:(id)arg1 name:(id)arg2;
+ (id)platformFamilyWithName:(id)arg1;
+ (id)platformFamilyWithIdentifier:(id)arg1;
+ (id)platformFamiliesSortedByName;
+ (id)allPlatformFamilies;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)initialize;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSSet *platforms; // @synthesize platforms=_platforms;
- (void)addPlatform:(id)arg1;
@property(readonly) NSArray *osVersions; // @synthesize osVersions=_osVersions;
- (id)description;

@end

@interface DVTSDK : NSObject
{
    DVTPlatform *_platform;
    NSString *_canonicalName;
    NSString *_displayName;
    NSString *_operatingSystemVersion;
    DVTFilePath *_sdkPath;
    NSString *_docSetFeedName;
    NSURL *_docSetFeedURL;
    NSString *_alternateSDKName;
    NSArray *_supportedBuildToolComponents;
    NSArray *_librarySearchPaths;
    NSDictionary *_infoDictionary;
    NSString *_propertyConditionName;
    NSString *_minimalDisplayName;
    NSDictionary *_defaultProperties;
    NSNumber *_isInternal;
    NSNumber *_isBaseSDK;
    DVTSearchPath *_commandLineToolSearchPath;
    NSArray *_toolchains;
    NSArray *_toolchainNames;
}

+ (id)sdksInDirectory:(id)arg1 forPlatform:(id)arg2;
+ (id)sdkInDirectory:(id)arg1 forPlatform:(id)arg2;
+ (id)sdkForPath:(id)arg1 forceCreate:(BOOL)arg2;
+ (id)sdkForPath:(id)arg1;
+ (id)sdkForBootSystem;
+ (id)_sdkForNameOrPath:(id)arg1 withBasePath:(id)arg2 forceCreate:(BOOL)arg3;
+ (id)_localizedSDKNameForCanonicalName:(id)arg1;
+ (id)_localizedFamilyNameForCanonicalName:(id)arg1;
+ (id)_absolutePathForSDKPathString:(id)arg1;
+ (id)sdksForFamily:(id)arg1;
+ (id)sdkForCanonicalName:(id)arg1;
+ (void)_setSDK:(id)arg1 forCanonicalName:(id)arg2;
+ (id)_sdkForResolvedAbsolutePath:(id)arg1;
+ (void)_setSDK:(id)arg1 forResolvedAbsolutePath:(id)arg2;
+ (id)knownSDKs;
+ (void)initialize;
@property(readonly) NSArray *toolchainNames; // @synthesize toolchainNames=_toolchainNames;
@property(readonly) NSDictionary *defaultProperties; // @synthesize defaultProperties=_defaultProperties;
@property(readonly) NSArray *toolchains; // @synthesize toolchains=_toolchains;
@property(readonly) NSURL *docSetFeedURL; // @synthesize docSetFeedURL=_docSetFeedURL;
@property(readonly) NSString *docSetFeedName; // @synthesize docSetFeedName=_docSetFeedName;
@property(readonly) NSArray *librarySearchPaths; // @synthesize librarySearchPaths=_librarySearchPaths;
@property(readonly) NSString *alternateSDKName; // @synthesize alternateSDKName=_alternateSDKName;
@property(readonly) NSArray *supportedBuildToolComponents; // @synthesize supportedBuildToolComponents=_supportedBuildToolComponents;
@property(readonly) NSString *propertyConditionName; // @synthesize propertyConditionName=_propertyConditionName;
@property(readonly) NSString *minimalDisplayName; // @synthesize minimalDisplayName=_minimalDisplayName;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSString *canonicalName; // @synthesize canonicalName=_canonicalName;
@property(readonly) DVTFilePath *sdkPath; // @synthesize sdkPath=_sdkPath;
@property(readonly) NSDictionary *infoDictionary; // @synthesize infoDictionary=_infoDictionary;
@property(readonly) NSString *operatingSystemVersion; // @synthesize operatingSystemVersion=_operatingSystemVersion;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)commandLineToolSearchPath;
@property(readonly, getter=isBaseSDK) BOOL baseSDK;
@property(readonly, getter=isInternal) BOOL internal;
@property(retain) DVTPlatform *platform;
- (id)initWithFilePath:(id)arg1;
- (id)initWithFilePath:(id)arg1 infoDictionary:(id)arg2;

@end

@interface DVTFindRegularExpressionResult : DVTFindResult <NSCoding, NSCopying>
{
    DVTRegularExpressionMatch *_match;
}

@property(retain) DVTRegularExpressionMatch *match; // @synthesize match=_match;
- (id)stringForReplacementString:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithFoundLocation:(id)arg1 withRange:(struct _NSRange)arg2 inContext:(id)arg3 andRegexMatch:(id)arg4 foundUsingDescriptor:(id)arg5;

@end

@interface DVTSourceCodeSymbolKind : NSObject <NSCopying>
{
    NSString *_identifier;
    NSString *_localizedDescription;
    NSArray *_conformedToSymbolKindIdentifiers;
    NSArray *_conformedToSymbolKinds;
    NSArray *_allConformingSymbolKinds;
}

+ (id)sourceCodeSymbolKinds;
+ (id)sourceCodeSymbolKindForIdentifier:(id)arg1;
+ (id)_sourceCodeSymbolKindForExtension:(id)arg1;
+ (void)initialize;
+ (id)classMethodTemplateSymbolKind;
+ (id)instanceMethodTemplateSymbolKind;
+ (id)functionTemplateSymbolKind;
+ (id)classTemplateSymbolKind;
+ (id)namespaceSymbolKind;
+ (id)ibOutletCollectionPropertySymbolKind;
+ (id)ibOutletCollectionVariableSymbolKind;
+ (id)ibOutletCollectionSymbolKind;
+ (id)ibOutletPropertySymbolKind;
+ (id)ibOutletVariableSymbolKind;
+ (id)ibOutletSymbolKind;
+ (id)ibActionMethodSymbolKind;
+ (id)globalVariableSymbolKind;
+ (id)localVariableSymbolKind;
+ (id)unionSymbolKind;
+ (id)typedefSymbolKind;
+ (id)structSymbolKind;
+ (id)protocolSymbolKind;
+ (id)propertySymbolKind;
+ (id)parameterSymbolKind;
+ (id)macroSymbolKind;
+ (id)classVariableSymbolKind;
+ (id)instanceVariableSymbolKind;
+ (id)instanceMethodSymbolKind;
+ (id)functionSymbolKind;
+ (id)fieldSymbolKind;
+ (id)enumConstantSymbolKind;
+ (id)enumSymbolKind;
+ (id)classSymbolKind;
+ (id)classMethodSymbolKind;
+ (id)categorySymbolKind;
+ (id)builtinTypeSymbolKind;
+ (id)memberContainerSymbolKind;
+ (id)memberSymbolKind;
+ (id)callableSymbolKind;
+ (id)globalSymbolKind;
+ (id)containerSymbolKind;
@property(readonly) NSString *localizedDescription; // @synthesize localizedDescription=_localizedDescription;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (BOOL)conformsToSymbolKind:(id)arg1;
@property(readonly, getter=isContainer) BOOL container;
@property(readonly) NSArray *allConformingSymbolKinds;
@property(readonly) NSArray *conformedToSymbolKinds;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithSourceCodeSymbolKindExtension:(id)arg1;

@end

@interface _DVTAsynchronousRequest : NSObject <DVTCancellable>
{
    long long _type;
    id _block;
}

+ (id)_scheduledRequestWithOrder:(long long)arg1 modes:(id)arg2 block:(id)arg3;
+ (id)_scheduledRequestWithDelay:(double)arg1 block:(id)arg2;
+ (id)_scheduledRequestWithDelay:(double)arg1 modes:(id)arg2 block:(id)arg3;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)_invokeBlock:(id)arg1;
- (id)_initWithBlock:(id)arg1 type:(void)arg2;

@end

@interface _DVTFoundationPrivateClassForFindingBundle : NSObject
{
}

@end

@interface DVTDiffCharacterDataSource : DVTDiffDataSource
{
}

+ (void)initialize;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (struct _DVTDiffToken)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;

@end

@interface DVTDiffContext : NSObject <DVTInvalidation_New>
{
    DVTDiffDataSource *_originalDataSource;
    DVTDiffDataSource *_modifiedDataSource;
    id <DVTObservingToken> _originalDataSourceObserver;
    id <DVTObservingToken> _modifiedDataSourceObserver;
    NSMutableArray *_diffDescriptors;
    NSMutableArray *_tmpDiffDescriptors;
    NSOperationQueue *_diffQueue;
    unsigned long long _timestamp;
    int _needsUpdate;
    struct _DVTDiffContextFlags _dcFlags;
    int _defaultDiffMergeDirection;
    BOOL _shouldGenerateSubdiffDescriptors;
    BOOL _isRestoringState;
    BOOL _updatingChangedDescriptor;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
+ (id)performanceLogAspect;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property BOOL isRestoringState; // @synthesize isRestoringState=_isRestoringState;
@property(retain) NSMutableArray *tmpDiffDescriptors; // @synthesize tmpDiffDescriptors=_tmpDiffDescriptors;
@property unsigned long long timestamp; // @synthesize timestamp=_timestamp;
- (void)_dumpDataSources;
- (void)copyDiffResultsWithDiffString:(id)arg1;
- (void)copyDiffResults:(id)arg1;
- (void)_waitOnAllPendingDiffQueueOperations;
@property(readonly) NSString *diffString;
- (id)diffStringForDescriptorInRange:(struct _NSRange)arg1;
- (id)diffStringForDescriptorInRange:(struct _NSRange)arg1 options:(id)arg2;
- (id)diffDescriptorIndexesForModifiedTokenRange:(struct _NSRange)arg1;
- (id)diffDescriptorIndexesForOriginalTokenRange:(struct _NSRange)arg1;
- (long long)numberOfModifiedDescriptors;
- (long long)numberOfCommonDescriptors;
- (long long)numberOfDiffDescriptors;
- (void)_buildDiffDescriptors;
- (void)_buildSubdescriptors;
- (struct __CFStorage *)_createLCSStorageInDiffDescriptor:(id)arg1 startIndex:(long long *)arg2;
- (id)tmpModifiedDescriptorIndexes;
@property(readonly) NSIndexSet *modifiedDescriptorIndexes;
@property(readonly) NSIndexSet *commonDescriptorIndexes;
- (void)setNeedsUpdateDiffDescriptors:(BOOL)arg1;
- (void)_internalBuildDiffDescriptors;
- (id)description;
- (struct _DVTDiffContextFlags)dcFlags;
- (void)setDcFlags:(struct _DVTDiffContextFlags)arg1;
@property int defaultDiffMergeDirection;
@property BOOL shouldGenerateSubdiffDescriptors;
@property BOOL ignoresCommon;
@property BOOL ignoresLineEnds;
@property BOOL ignoresTrailingSpaces;
@property BOOL ignoresSpacesInRuns;
@property BOOL ignoresLeadingSpaces;
@property BOOL ignoresCase;
@property(retain) DVTDiffDataSource *modifiedDataSource;
- (BOOL)_setModifiedDataSource:(id)arg1;
@property(retain) DVTDiffDataSource *originalDataSource;
- (BOOL)_setOriginalDataSource:(id)arg1;
- (void)setUpdatingChangedDescriptor:(BOOL)arg1;
- (BOOL)updatingChangedDescriptor;
- (void)setDiffQueue:(id)arg1;
- (id)diffQueue;
- (id)_observeDataSource:(id)arg1;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (id)init;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 updatesDescriptorsImmediately:(BOOL)arg3;

// Remaining properties
@property(copy) NSArray *diffDescriptors; // @dynamic diffDescriptors;
@property(readonly) NSMutableArray *mutableDiffDescriptors; // @dynamic mutableDiffDescriptors;

@end

@interface DVTDiffDataSource : NSObject <NSCopying>
{
    id _content;
    NSString *_label;
    unsigned long long _timestamp;
    struct _DVTDiffContextFlags _dcFlags;
}

+ (id)diffDataSourceWithContent:(id)arg1;
@property struct _DVTDiffContextFlags dcFlags; // @synthesize dcFlags=_dcFlags;
@property unsigned long long timestamp; // @synthesize timestamp=_timestamp;
- (id)tokenStringWithTokenRange:(struct _NSRange)arg1;
- (id)tokenStringWithPrefix:(id)arg1 tokenRange:(struct _NSRange)arg2;
- (void)appendTokenStringToString:(id)arg1 tokenRange:(struct _NSRange)arg2;
- (void)appendTokenStringToString:(id)arg1 prefix:(id)arg2 tokenRange:(struct _NSRange)arg3;
- (void)appendLabelToString:(id)arg1 prefix:(id)arg2;
- (unsigned long long)diffTokenHashWithRange:(struct _NSRange)arg1;
- (unsigned long long)diffTokenHashInDiffDescriptor:(id)arg1 range:(struct _NSRange)arg2;
- (long long)numberOfDiffTokens;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (struct _DVTDiffToken)diffTokenAtIndex:(long long)arg1;
- (void)getDiffTokens:(struct _DVTDiffToken *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (struct _DVTDiffToken)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToDiffDataSource:(id)arg1;
@property(retain) NSString *label; // @synthesize label=_label;
- (id)THREAD_arrangedContent;
- (id)arrangedContent;
@property(readonly) id THREAD_content;
@property(retain) id content; // @synthesize content=_content;
- (BOOL)_setContent:(id)arg1;
- (void)didChangeContent;
- (void)willChangeContent;
- (void)didChange;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithContent:(id)arg1;

@end

@interface DVTDiffDescriptor : NSObject <NSCoding, NSCopying, DVTDiffHashing>
{
    DVTDiffContext *_diffContext;
    struct _NSRange _originalTokenRange;
    struct _NSRange _modifiedTokenRange;
    struct _NSRange _originalContentRange;
    struct _NSRange _modifiedContentRange;
    unsigned long long _originalTokenHash;
    unsigned long long _modifiedTokenHash;
    DVTDiffDescriptor *_parentDiffDescriptor;
    NSMutableArray *_childDescriptors;
    NSDictionary *_subdescriptorResults;
    int _diffDescriptorType;
    int _diffMergeDirection;
    BOOL _resolved;
    BOOL _binaryConflict;
    BOOL _diffMergeDirectionLocked;
}

+ (void)initialize;
@property BOOL diffMergeDirectionLocked; // @synthesize diffMergeDirectionLocked=_diffMergeDirectionLocked;
@property BOOL binaryConflict; // @synthesize binaryConflict=_binaryConflict;
@property BOOL resolved; // @synthesize resolved=_resolved;
@property(retain) NSDictionary *subdescriptorResults; // @synthesize subdescriptorResults=_subdescriptorResults;
@property(retain) DVTDiffDescriptor *parentDiffDescriptor; // @synthesize parentDiffDescriptor=_parentDiffDescriptor;
@property struct _NSRange modifiedContentRange; // @synthesize modifiedContentRange=_modifiedContentRange;
@property struct _NSRange originalContentRange; // @synthesize originalContentRange=_originalContentRange;
@property unsigned long long modifiedTokenHash; // @synthesize modifiedTokenHash=_modifiedTokenHash;
@property unsigned long long originalTokenHash; // @synthesize originalTokenHash=_originalTokenHash;
@property int diffDescriptorType; // @synthesize diffDescriptorType=_diffDescriptorType;
@property struct _NSRange modifiedTokenRange; // @synthesize modifiedTokenRange=_modifiedTokenRange;
@property struct _NSRange originalTokenRange; // @synthesize originalTokenRange=_originalTokenRange;
@property(retain) DVTDiffContext *diffContext; // @synthesize diffContext=_diffContext;
- (BOOL)isEqual:(id)arg1;
@property(readonly) BOOL isInsertionOrDeletion;
- (void)diffDescriptor:(id)arg1 willRemoveChildDiffDescriptor:(id)arg2;
- (void)diffDescriptor:(id)arg1 didAddChildDiffDescriptor:(id)arg2;
- (void)removeAllChildDiffDescriptors;
- (void)removeChildDiffDescriptorAtIndex:(long long)arg1;
- (void)removeChildDiffDescriptor:(id)arg1;
- (void)insertChildDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (void)addChildDiffDescriptor:(id)arg1;
- (void)removeObjectFromChildDiffDescriptorsAtIndex:(long long)arg1;
- (void)insertObject:(id)arg1 inChildDiffDescriptorsAtIndex:(long long)arg2;
- (void)_diffDescriptor:(id)arg1 willRemoveChildDiffDescriptor:(id)arg2;
- (void)_diffDescriptor:(id)arg1 didAddChildDiffDescriptor:(id)arg2;
@property int diffMergeDirection; // @dynamic diffMergeDirection;
- (id)childDiffDescriptors;
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithDiffContext:(id)arg1;

@end

@interface _DVTDiffHashingDictionaryDiffHashContext : NSObject
{
    DVTDiffDataSource *_dataSource;
    unsigned long long _diffHash;
}

@property unsigned long long diffHash; // @synthesize diffHash=_diffHash;
@property(retain) DVTDiffDataSource *dataSource; // @synthesize dataSource=_dataSource;
- (id)initWithDataSource:(id)arg1 diffHash:(unsigned long long)arg2;

@end

@interface _DVTDiffLineDataSourceConsistentCopy : DVTDiffDataSource
{
    NSArray *_tokenStorage;
    NSString *_arrangedContent;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)arrangedContent;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (void)getDiffTokens:(struct _DVTDiffToken *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (struct _DVTDiffToken)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (id)initWithContent:(id)arg1 arrangedContent:(id)arg2 tokenStorage:(id)arg3;

@end

@interface DVTDiffLineDataSource : DVTDiffDataSource
{
    DVTDispatchLock *_tokenStorageLock;
}

- (struct _NSRange)tokenRangeForCharacterRange:(struct _NSRange)arg1;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (void)getDiffTokens:(struct _DVTDiffToken *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (struct _DVTDiffToken)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithContent:(id)arg1;

@end

@interface DVTDeveloperPaths : NSObject
{
    NSString *_developerFolderPath;
    NSString *_developerUsrPath;
}

+ (id)pathsWithDeveloperFolderPath:(id)arg1 developerUsrPath:(id)arg2;
+ (id)defaultPaths;
+ (void)setDefaultDeveloperPathsClass:(Class)arg1;
+ (void)initializeApplicationDirectoryName:(id)arg1;
+ (id)applicationDirectoryName;
- (id)developerPlatformsDirectory;
- (id)toolchainSearchPath;
- (id)embeddedApplicationsDirectory;
- (id)xcodeApplicationFilePath;
- (id)developerAppleInternalXcodeDirectory;
- (id)developerApplicationsDirectory;
- (id)userDataDirectoryForCurrentApplication;
- (id)dataDirectoryForCurrentApplication;
- (id)binSearchPathForPlatform:(id)arg1;
- (id)usrSearchPathForPlatform:(id)arg1;
- (id)sdksSearchPathForPlatform:(id)arg1;
- (id)developerInstallationInfoDirectoryForPlatform:(id)arg1;
- (id)sourceSpecificationSearchPathForPlatform:(id)arg1;
- (id)appleInternalPrivatePlugInSearchPathForPlatform:(id)arg1;
- (id)thirdPartyPlugInSearchPathForPlatform:(id)arg1;
- (id)corePlugInSearchPathForPlatform:(id)arg1;
- (id)developerFrameworksDirectoryPlatform:(id)arg1;
- (id)developerLibraryDirectoryPlatform:(id)arg1;
- (id)developerDirectory;
- (id)searchPathForDirectory:(int)arg1 inDomains:(int)arg2 forPlatforms:(id)arg3 withNonPlatformPaths:(BOOL)arg4 appendingPathComponents:(id)arg5;
- (id)_pathForDirectory:(int)arg1 inDomain:(int)arg2 forPlatform:(id)arg3;
- (id)_rootPathForPlatform:(id)arg1 inDomain:(int)arg2;
- (id)_platformsPathInDomain:(int)arg1;
- (id)_developerFolderPathInDomain:(int)arg1 platform:(id)arg2;
- (id)_developerUsrPath;
- (id)_developerFolderPath;
- (id)init;

@end

@interface DVTSearchPath : NSObject <NSCopying>
{
    NSArray *_searchDirectoryFilePaths;
    NSString *_unixShellSearchPathRepresentation;
}

+ (id)searchPathWithSearchDirectoryFilePaths:(id)arg1;
@property(readonly) NSString *unixShellSearchPathRepresentation; // @synthesize unixShellSearchPathRepresentation=_unixShellSearchPathRepresentation;
@property(readonly) NSArray *searchDirectoryFilePaths; // @synthesize searchDirectoryFilePaths=_searchDirectoryFilePaths;
- (id)description;
- (id)pathForFileWithRelativePathString:(id)arg1;
@property(readonly) DVTFilePath *preferredDirectoryPath;
- (id)searchPathByAppendingSearchPath:(id)arg1;
- (id)searchPathByAppendingSearchDirectoryFilePaths:(id)arg1;
- (id)initWithSearchDirectoryFilePaths:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTToolsVersion : NSObject
{
    NSString *_versionName;
    NSString *_versionNameWithoutUpdate;
    unsigned long long _versionMajor;
    unsigned long long _versionMinor;
    unsigned long long _versionUpdate;
}

+ (id)versionWithMajor:(unsigned long long)arg1 minor:(unsigned long long)arg2 update:(unsigned long long)arg3;
+ (id)version4_6_1;
+ (id)version4_6_0;
+ (id)version4_5_0;
+ (id)version4_4_0;
+ (id)version4_3_3;
+ (id)version4_3_2;
+ (id)version4_3_1;
+ (id)version4_3_0;
+ (id)version4_2_5;
+ (id)version4_2_0;
+ (id)version4_1_0;
+ (id)version4_0_2;
+ (id)version4_0_1;
+ (id)version4_0_0;
+ (id)version3_2_6;
+ (id)version3_2_5;
+ (id)version3_2_4;
+ (id)version3_2_3;
+ (id)version3_2_2;
+ (id)version3_2_1;
+ (id)version3_2_0;
+ (id)version3_1_4;
+ (id)version3_1_3;
+ (id)version3_1_2;
+ (id)version3_1_1;
+ (id)version3_1_0;
+ (id)version3_0_0;
+ (id)version2_5_0;
+ (id)versionWithString:(id)arg1;
+ (id)allKnownVersions;
+ (id)currentVersion;
- (id)description;
- (unsigned long long)versionUpdateComponent;
- (unsigned long long)versionMinorComponent;
- (unsigned long long)versionMajorComponent;
- (id)nameWithoutUpdate;
- (id)name;
- (unsigned long long)hash;
- (long long)compare:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)initWithVersionMajor:(unsigned long long)arg1 minor:(unsigned long long)arg2 update:(unsigned long long)arg3;

@end

@interface DVTKVOConditionValidator : NSObject
{
}

+ (BOOL)waitForCondition:(id)arg1 sourceObject:(void)arg2 keyPathAffectingConditionBlock:(id)arg3 timeout:(id)arg4;

@end

@interface DVTLocale : NSObject <NSCopying, NSCoding>
{
    NSString *_displayName;
    NSString *_localeIdentifier;
}

+ (id)localesWithDisplayName:(id)arg1;
+ (id)localeWithLocaleIdentifier:(id)arg1;
+ (id)preferredLocales;
+ (id)availableLocales;
+ (id)baseLocale;
+ (id)autoupdatingCurrentLocale;
+ (id)currentLocale;
+ (id)_xcodeLocale;
+ (id)systemLocale;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToLocale:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)rootLanguage;
- (id)localeComponents;
@property(readonly) NSString *localeIdentifier; // @synthesize localeIdentifier=_localeIdentifier;
- (id)initWithLocaleIdentifier:(id)arg1 displayName:(id)arg2;
- (id)initWithLocaleIdentifier:(id)arg1;

@end

@interface DVTCustomDataSpecifier : NSObject
{
    NSString *_name;
    NSString *_groupingName;
    DVTCustomDataOwnership *_ownership;
}

+ (id)customDataSpecifierWithName:(id)arg1 groupingName:(id)arg2;
+ (id)customDataSpecifierWithName:(id)arg1 groupingName:(id)arg2 ownership:(id)arg3;
@property(readonly) DVTCustomDataOwnership *ownership; // @synthesize ownership=_ownership;
@property(readonly) NSString *groupingName; // @synthesize groupingName=_groupingName;
@property(readonly) NSString *name; // @synthesize name=_name;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;

@end

@interface DVTCustomDataOwnership : NSObject
{
    NSString *_ownerName;
    BOOL _isShared;
}

+ (id)ownershipWithName:(id)arg1;
+ (id)ownershipForSharing;
+ (id)ownershipForCurrentUser;
+ (void)initialize;
@property(readonly) BOOL isShared; // @synthesize isShared=_isShared;
@property(readonly) NSString *ownerName; // @synthesize ownerName=_ownerName;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;

@end

@interface DVTDirectoryBasedCustomDataStore : NSObject <DVTCustomDataStoring, DVTInvalidation_New>
{
    DVTFilePath *_rootDirectoryPath;
    DVTFilePath *_customDataPath;
    DVTFilePath *_sharedDataPath;
    NSString *_perUserSubfolderName;
    NSString *_sharedSubfolderName;
    id <DVTDirectoryBasedCustomDataStoreDelegate> _delegate;
    BOOL _mayCreateRootDirectoryIfNeeded;
    BOOL _supportsCurrentUserOnly;
    BOOL _delegateUnlocks;
    BOOL _delegateWrites;
    BOOL _delegateRemoves;
    BOOL _delegateMoves;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
+ (id)customDataStoreWithRootDirectoryPath:(id)arg1 perUserSubfolderName:(id)arg2 sharedSubfolderName:(id)arg3 supportCurrentUserOnly:(BOOL)arg4;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property BOOL mayCreateRootDirectoryIfNeeded; // @synthesize mayCreateRootDirectoryIfNeeded=_mayCreateRootDirectoryIfNeeded;
@property(readonly) NSString *sharedSubfolderName; // @synthesize sharedSubfolderName=_sharedSubfolderName;
@property(readonly) NSString *perUserSubfolderName; // @synthesize perUserSubfolderName=_perUserSubfolderName;
@property(readonly) BOOL supportsCurrentUserOnly; // @synthesize supportsCurrentUserOnly=_supportsCurrentUserOnly;
@property(retain) DVTFilePath *rootDirectoryPath; // @synthesize rootDirectoryPath=_rootDirectoryPath;
@property(readonly) NSString *displayName;
- (BOOL)supportsCustomDataForOwnership:(id)arg1;
- (void)moveCustomDataWithSpecifier:(id)arg1 toSpecifier:(id)arg2 completionQueue:(id)arg3 completionBlock:(id)arg4;
- (void)removeCustomDataWithSpecifier:(id)arg1 completionQueue:(id)arg2 completionBlock:(id)arg3;
- (void)writeCustomData:(id)arg1 withSpecifier:(id)arg2 forceOverwrite:(BOOL)arg3 completionQueue:(id)arg4 completionBlock:(id)arg5;
- (id)readCustomDataWithSpecifier:(id)arg1 error:(id *)arg2;
- (id)customDataOwnershipsForGrouping:(id)arg1;
- (id)customDataSpecifiersForGrouping:(id)arg1 ownership:(id)arg2;
- (BOOL)_specifierPathExistsAndIsValid:(id)arg1;
- (BOOL)_specifierNameIsValid:(id)arg1;
- (id)_dataFilePathForSpecifier:(id)arg1;
- (id)_dataFolderPathForOwnership:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly) DVTFilePath *sharedDataPath; // @synthesize sharedDataPath=_sharedDataPath;
@property(readonly) DVTFilePath *customDataPath; // @synthesize customDataPath=_customDataPath;
- (void)setUnlockingDelegate:(id)arg1;
@property(retain) id <DVTDirectoryBasedCustomDataStoreDelegate> delegate;
- (id)description;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTGlobalCustomDataStore : NSObject <DVTCustomDataStoring>
{
    DVTDirectoryBasedCustomDataStore *_dataArchiver;
}

+ (id)defaultStore;
@property(readonly) DVTDirectoryBasedCustomDataStore *dataArchiver; // @synthesize dataArchiver=_dataArchiver;
@property(readonly) NSString *displayName;
- (BOOL)supportsCustomDataForOwnership:(id)arg1;
- (void)moveCustomDataWithSpecifier:(id)arg1 toSpecifier:(id)arg2 completionQueue:(id)arg3 completionBlock:(id)arg4;
- (void)removeCustomDataWithSpecifier:(id)arg1 completionQueue:(id)arg2 completionBlock:(id)arg3;
- (void)writeCustomData:(id)arg1 withSpecifier:(id)arg2 forceOverwrite:(BOOL)arg3 completionQueue:(id)arg4 completionBlock:(id)arg5;
- (id)readCustomDataWithSpecifier:(id)arg1 error:(id *)arg2;
- (id)customDataOwnershipsForGrouping:(id)arg1;
- (id)customDataSpecifiersForGrouping:(id)arg1 ownership:(id)arg2;
- (id)init;

@end

@interface DVTModelTree : NSObject <DVTModelObject>
{
    DVTModelObjectGraph *_objectGraph;
    DVTModelTreeNode *_rootNode;
}

+ (BOOL)automaticallyNotifiesObserversOfSubclass_rootNode;
+ (void)synthesizeCoverAPIWithKeyForRootNode:(id)arg1;
+ (BOOL)automaticallyNotifiesObserversOfObjectGraph;
@property(readonly) DVTModelTreeNode *subclass_rootNode; // @synthesize subclass_rootNode=_rootNode;
@property(retain, nonatomic) DVTModelObjectGraph *objectGraph; // @synthesize objectGraph=_objectGraph;
- (id)subclass_createRootNode;
- (void)_recursivelyMoveNode:(id)arg1 fromObjectGraph:(id)arg2 toObjectGraph:(id)arg3;
- (id)initWithObjectGraph:(id)arg1;

@end

@interface DVTModelTreeNode : NSObject <DVTModelObject>
{
    DVTModelTree *_tree;
    DVTModelTreeNode *_parentNode;
    NSMutableArray *_childNodes;
}

+ (BOOL)automaticallyNotifiesObserversOfSubclass_mutableChildNodes;
+ (BOOL)automaticallyNotifiesObserversOfSubclass_childNodes;
+ (BOOL)automaticallyNotifiesObserversOfSubclass_parentNode;
+ (BOOL)automaticallyNotifiesObserversOfSubclass_tree;
+ (void)synthesizeCoverAPIWithKeyForTree:(id)arg1 keyForParentNode:(id)arg2 keyForChildNodes:(id)arg3;
+ (BOOL)automaticallyNotifiesObserversOfObjectGraph;
+ (void)initialize;
@property(readonly) DVTModelTreeNode *subclass_parentNode; // @synthesize subclass_parentNode=_parentNode;
@property(readonly) DVTModelTree *subclass_tree; // @synthesize subclass_tree=_tree;
- (void)removeSubclass_childNodesAtIndexes:(id)arg1;
- (void)insertSubclass_childNodes:(id)arg1 atIndexes:(id)arg2;
- (id)subclass_childNodesAtIndexes:(id)arg1;
- (id)objectInSubclass_childNodesAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfSubclass_childNodes;
@property(readonly) NSMutableArray *subclass_mutableChildNodes;
@property(copy) NSArray *subclass_childNodes;
- (void)_setSubclass_parentNode:(id)arg1;
- (void)_setSubclass_tree:(id)arg1;
@property(readonly, nonatomic) DVTModelObjectGraph *objectGraph;
- (id)init;

@end

@interface DVTObservableObjectProxy : NSObject
{
    id _representedObject_dvtWeak;
    DVTMapTable *_observationInfo;
    NSCountedSet *_uniqueObservedKeyPaths;
}

- (id)valueForUndefinedKey:(id)arg1;
- (id)registeredKeyPaths;
@property(nonatomic) __weak id representedObject;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void *)arg3;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
- (id)changeDictionaryForNotifications;
- (void)removeObservedKeyPath:(id)arg1;
- (void)addObservedKeyPath:(id)arg1;
- (void)forgetObservationInfoForObserver:(id)arg1;
- (void)setObservationInfo:(id)arg1 forObserver:(id)arg2;
- (id)observationInfoForObserver:(id)arg1;
- (id)init;

@end

@interface DVTInvalidationCallbackObservingToken : NSObject <DVTInvalidation_New>
{
    id _callbackBlock;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (id)initWithCallbackBlock:(id)arg1;

@end

@interface DVTByteBuffer : NSObject
{
    char *_bytes;
    unsigned long long _capacity;
    unsigned long long _length;
    unsigned long long _position;
    BOOL _ownsBytes;
    BOOL _isClosed;
}

- (void)printf:(const char *)arg1;
- (void)printf:(const char *)arg1 arguments:(struct __va_list_tag [1])arg2;
- (void)writePropertyList:(id)arg1;
- (void)writeUnsignedAsciiInteger:(unsigned long long)arg1;
- (void)writeString:(id)arg1;
- (void)writeUTF8String:(const char *)arg1;
- (void)writeLEB128:(long long)arg1;
- (void)writeUnsignedLEB128:(unsigned long long)arg1;
- (void)writeInt64:(long long)arg1;
- (void)writeUnsignedInt64:(unsigned long long)arg1;
- (void)writeInt32:(int)arg1;
- (void)writeUnsignedInt32:(unsigned int)arg1;
- (void)writeInt16:(short)arg1;
- (void)writeUnsignedInt16:(unsigned short)arg1;
- (void)writeInt8:(BOOL)arg1;
- (void)writeUnsignedInt8:(unsigned char)arg1;
- (unsigned long long)readHexBytes:(void *)arg1 length:(unsigned long long)arg2;
- (unsigned long long)writeHexBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (unsigned long long)writeBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)writeByte:(unsigned char)arg1;
- (id)readPropertyList;
- (unsigned long long)readUnsignedAsciiInteger;
- (unsigned long long)peekUTF8StringLength;
- (id)readString;
- (id)readUTF8String;
- (long long)readLEB128;
- (unsigned long long)readUnsignedLEB128;
- (long long)readInt64;
- (unsigned long long)readUnsignedInt64;
- (int)readInt32;
- (unsigned int)readUnsignedInt32;
- (short)readInt16;
- (unsigned short)readUnsignedInt16;
- (BOOL)readInt8;
- (unsigned char)readUnsignedInt8;
- (unsigned long long)readBytes:(void *)arg1 length:(unsigned long long)arg2;
- (unsigned char)readByte;
- (unsigned char)peekByte;
- (BOOL)isAtEnd;
- (unsigned long long)seek:(unsigned long long)arg1;
- (void)setPosition:(unsigned long long)arg1;
- (unsigned long long)position;
- (unsigned long long)length;
- (const char *)bytes;
- (BOOL)isClosed;
- (void)close;
- (void)finalize;
- (id)init;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithBytesNoCopy:(void *)arg1 length:(unsigned long long)arg2;
- (id)initWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)initWithBytesNoCopy:(char *)arg1 length:(unsigned long long)arg2 capacity:(unsigned long long)arg3 ownsBytes:(unsigned long long)arg4;

@end

@interface DVTSimplePlainTextSerializer : DVTSimpleSerializer
{
    NSMutableArray *_knownClasses;
}

- (void)encodeObjectList:(id)arg1;
- (void)encodeObject:(id)arg1;
- (void)encodeString:(id)arg1;
- (void)encodeDouble:(double)arg1;
- (void)encodeFloat:(float)arg1;
- (void)encodeInteger:(unsigned long long)arg1;
- (id)init;

@end

@interface DVTSimplePlainTextDeserializer : DVTSimpleDeserializer
{
    NSMutableArray *_knownClasses;
}

- (id)decodeObjectList;
- (id)decodeObject;
- (id)decodeString;
- (double)decodeDouble;
- (float)decodeFloat;
- (void)decodeHexBytes:(void *)arg1 length:(unsigned long long)arg2 magic:(BOOL)arg3;
- (unsigned long long)decodeInteger;
- (id)init;
- (id)initWithData:(id)arg1;

@end

@interface DVTSimpleSerializer : NSObject
{
    DVTByteBuffer *_buffer;
    NSError *_error;
}

- (id)data;
- (id)error;
- (void)encodeObjectList:(id)arg1;
- (void)encodeObject:(id)arg1;
- (void)encodeString:(id)arg1;
- (void)encodeDouble:(double)arg1;
- (void)encodeFloat:(float)arg1;
- (void)encodeInteger:(unsigned long long)arg1;
- (id)init;

@end

@interface DVTSimpleDeserializer : NSObject
{
    NSData *_inputData;
    DVTByteBuffer *_buffer;
    NSError *_error;
}

- (id)error;
- (id)decodeObjectList;
- (id)decodeObject;
- (id)decodeString;
- (double)decodeDouble;
- (float)decodeFloat;
- (unsigned long long)decodeInteger;
- (id)init;
- (id)initWithData:(id)arg1;

@end

@interface DVTTextPreferences : NSObject
{
    double _autoHighlightTokenAppearancesDelay;
    long long _wrappedLinesIndentWidth;
    int _tabKeyIndentingBehavior;
    int _autoSuggestionStyle;
    unsigned long long _defaultLineEndings;
    BOOL _codeFocusOnHover;
}

+ (id)preferences;
+ (void)initialize;
@property(nonatomic) int tabKeyIndentingBehavior; // @synthesize tabKeyIndentingBehavior=_tabKeyIndentingBehavior;
@property BOOL beepOnNonMatchingBrace;
@property BOOL showMatchingBrace;
@property BOOL selectToInsideMatchingQuotes;
@property BOOL selectToInsideMatchingBraces;
@property BOOL selectToMatchingBrace;
@property BOOL scrollToEndOfMatchingBrace;
@property BOOL showCompletionsOnEsc;
@property BOOL completionsIncludeParameters;
@property int autoSuggestionStyle;
@property double autoSuggestCompletionsDelay;
@property BOOL autoSuggestCompletions;
@property BOOL enableTypeOverCompletions;
@property BOOL autoInsertOpenBracket;
@property BOOL autoInsertClosingBrace;
@property BOOL trimWhitespaceOnlyLines;
@property BOOL trimTrailingWhitespace;
@property long long wrappedLinesIndentWidth;
@property BOOL wrapLines;
- (BOOL)characterIsAutoIndent:(unsigned short)arg1;
@property(copy) NSString *autoIndentCharacters;
@property BOOL matchIndentWithLineAbove;
@property BOOL alignConsecutiveSlashSlashComments;
@property BOOL indentSlashSlashComments;
@property long long soloBraceIndentWidth;
@property BOOL indentSoloBraces;
@property BOOL useSyntaxAwareIndenting;
@property long long indentWidth;
@property long long tabWidth;
@property BOOL useTabsToIndent;
@property(readonly) NSArray *availableTextEncodings;
@property unsigned long long defaultTextEncoding;
@property BOOL convertExistingFilesLineEndings;
@property unsigned long long defaultLineEndings;
@property BOOL centersOnScroll;
@property BOOL showInvisibleCharacters;
@property int annotationDisplayPolicy;
@property BOOL showMessageBubbleAnnotations;
@property double autoHighlightTokenAppearancesDelay;
@property BOOL autoHighlightTokenAppearances;
@property long long pageGuideLocation;
@property BOOL showPageGuide;
@property BOOL codeFocusOnHover;
@property BOOL codeFocusFollowsSelection;
@property BOOL showCodeFoldingSidebar;
@property BOOL showLineNumbers;
- (id)init;

@end

@interface DVTComparisonDocumentLocation : DVTDocumentLocation
{
    DVTDocumentLocation *_primaryDocumentLocation;
    DVTDocumentLocation *_secondaryDocumentLocation;
    DVTDocumentLocation *_ancestorDocumentLocation;
}

@property(readonly) DVTDocumentLocation *ancestorDocumentLocation; // @synthesize ancestorDocumentLocation=_ancestorDocumentLocation;
@property(copy) DVTDocumentLocation *secondaryDocumentLocation; // @synthesize secondaryDocumentLocation=_secondaryDocumentLocation;
@property(copy) DVTDocumentLocation *primaryDocumentLocation; // @synthesize primaryDocumentLocation=_primaryDocumentLocation;
- (long long)compare:(id)arg1;
- (id)description;
- (BOOL)isEqualToDocumentLocationDisregardingDocumentURL:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqualDisregardingTimestamp:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)timestamp;
- (id)documentURL;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2;
- (id)initWithPrimaryDocumentLocation:(id)arg1 secondaryDocumentLocation:(id)arg2 ancestorDocumentLocation:(id)arg3;

@end

@interface DVTPerformanceMetric : NSObject
{
    DVTLogAspect *_aspect;
    int _logLevel;
    id <DVTSelfInstrumentationSession> _selfInstrumentationSession;
    NSString *_label;
    NSString *_context;
    NSString *_result;
    id _identifier;
    double _start;
    double _end;
    double _expectedDuration;
    double _tolerance;
    NSMutableArray *_checkpoints;
    struct __CFRunLoopObserver *_runLoopObserver;
    double _lastRunLoopPollTime;
    double _maxRunLoopBusyInterval;
    NSTimer *_expireTimer;
    double _expireInterval;
    BOOL _logImmediately;
    BOOL _stopWhenRunLoopIdle;
    BOOL _checkpointSkipsInstrumentsSignal;
}

+ (Class)selfInstrumentationClass;
+ (id)startedMetricForAspect:(id)arg1 logLevel:(int)arg2 label:(id)arg3;
+ (id)metricWithIdentifier:(id)arg1;
+ (void)initialize;
- (void)runLoopBeforeSources;
- (void)runLoopBeforeTimers;
- (void)runLoopWaking;
- (void)runLoopSleeping;
- (void)monitorRunLoop;
- (void)expire:(id)arg1;
- (void)setExpireInterval:(double)arg1;
- (void)_registerForRunLoopCallouts;
- (void)setExpectedDuration:(double)arg1 tolerance:(double)arg2;
- (void)stopWhenRunLoopIdle;
- (void)setContextString:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)logPerformanceMetricData;
- (void)checkpoint:(id)arg1;
- (void)setResultString:(id)arg1;
- (void)setEndTime;
- (void)setStartTime;
- (id)initWithAspect:(id)arg1 logLevel:(int)arg2 label:(id)arg3;

@end

@interface DVTMacroExpansionString : NSString <DVTMacroExpansion>
{
    NSString *_origString;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)description;
- (id)replacementObjectForCoder:(id)arg1;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithOriginalString:(id)arg1;

@end

@interface DVTMacroExpansionString_Literal : DVTMacroExpansionString
{
    unsigned long long _hashValue;
}

+ (id)newWithLiteralString:(id)arg1;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (unsigned long long)hash;
- (BOOL)dvt_isLiteral;
- (id)initWithLiteralString:(id)arg1;

@end

@interface DVTMacroExpansionString_Substitution : DVTMacroExpansionString
{
    NSString<DVTMacroExpansion> *_macroNameExpr;
    unsigned long long _numOperators;
    SEL _operatorSels[0];
}

+ (id)newWithOriginalString:(id)arg1 macroNameExpression:(id)arg2 operatorSelectors:(SEL *)arg3 count:(unsigned long long)arg4;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (BOOL)dvt_isLiteral;
- (id)initWithOriginalString:(id)arg1 macroNameExpression:(id)arg2 operatorSelectors:(SEL *)arg3 count:(unsigned long long)arg4;

@end

@interface DVTMacroExpansionString_Concatenation : DVTMacroExpansionString
{
    unsigned long long _numSubstrings;
    NSString<DVTMacroExpansion> *_substrings[0];
}

+ (id)newWithOriginalString:(id)arg1 substrings:(id)arg2;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (BOOL)dvt_isLiteral;
- (void)dealloc;
- (id)initWithOriginalString:(id)arg1 substrings:(id)arg2;

@end

@interface DVTMacroExpansionStringList : NSArray <DVTMacroExpansion>
{
    NSString<DVTMacroExpansion> *_stringForm;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)description;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTMacroExpansionStringList_NonLiteral : DVTMacroExpansionStringList
{
    NSArray *_elements;
}

- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)description;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)initWithStringForm:(id)arg1 elements:(id)arg2;

@end

@interface DVTMacroExpansionStringList_Literal : DVTMacroExpansionStringList
{
    NSArray *_literalStrings;
}

- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)description;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)initWithStringForm:(id)arg1 literalStrings:(id)arg2;

@end

@interface DVTMacroDefinitionTable : NSObject <NSCopying, NSMutableCopying>
{
    NSMutableDictionary *_namesToDefns;
    BOOL _isImmutable;
}

- (void)assertInternalConsistency;
- (id)description;
- (id)firstDefinitionForMacroName:(id)arg1;
- (void)makeImmutable;
- (BOOL)isImmutable;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setMacroNamesAndValuesFromDictionary:(id)arg1;
- (void)setMacroNamesAndValues:(id)arg1;
- (void)setMacroNamesAndValues:(id)arg1 arguments:(struct __va_list_tag [1])arg2;
- (void)enumerateMacroNamesAndValuesUsingBlock:(id)arg1;
- (void)setValue:(id)arg1 forMacroName:(id)arg2 conditionSet:(id)arg3;
- (id)valueForMacroName:(id)arg1 conditionSet:(id)arg2;
- (unsigned long long)count;
- (id)init;

@end

@interface DVTMacroExpansionLookupCursor : NSObject
{
    DVTMacroExpansionScope *originalScope;
    int currentPass;
    DVTMacroExpansionScope *currentScope;
    DVTMacroDefinition *currentDefinition;
}

@end

@interface DVTMacroExpansionScope : NSObject <NSCopying>
{
    DVTMacroExpansionScope *_parentScope;
    DVTMacroDefinitionTable *_customMacros;
    DVTMacroDefinitionTable *_defaultMacros;
    NSDictionary *_conditionParameterValues;
    BOOL _preserveUnresolvedRefs;
}

+ (id)newWithParentScope:(id)arg1 customMacros:(id)arg2 defaultMacros:(id)arg3;
+ (id)newWithParentScope:(id)arg1 customMacros:(id)arg2 defaultMacros:(id)arg3 conditionParameterValues:(id)arg4 preserveUnresolvedReferences:(BOOL)arg5;
- (id)evaluateMacroExpression:(id)arg1 asStringListForLiteralStringValue:(id)arg2;
- (id)valueForConditionParameter:(id)arg1;
- (id)evaluatedStringListValueForMacroNamed:(id)arg1;
- (id)evaluatedStringValueForMacroNamed:(id)arg1;
- (id)lookupValueForMacroNamed:(id)arg1 withCursor:(id *)arg2;
- (id)macroDefinitionTableForLookupPass:(int)arg1;
@property(readonly) BOOL preserveUnresolvedReferences;
- (id)parentScope;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithParentScope:(id)arg1 customMacros:(id)arg2 defaultMacros:(id)arg3 conditionParameterValues:(id)arg4 preserveUnresolvedReferences:(BOOL)arg5;

@end

@interface DVTFileDataTypeDetectionMagicCache : NSObject
{
    DVTExtension *_extension;
    DVTFileDataType *_matchedType;
    DVTFileDataType *_detectedType;
    NSArray *_magicWords;
}

@property(readonly) NSArray *magicWords; // @synthesize magicWords=_magicWords;
@property(readonly) DVTFileDataType *detectedType; // @synthesize detectedType=_detectedType;
@property(readonly) DVTFileDataType *matchedType; // @synthesize matchedType=_matchedType;
- (id)initWithExtension:(id)arg1;

@end

@interface DVTFileDataTypeDetection : NSObject
{
}

+ (id)guessFileDataTypeForFileAtPath:(id)arg1 bestCurrentGuessedFileDataType:(id)arg2;
+ (id)_guessFileDataTypeUsingMagicForFileAtPath:(id)arg1 bestCurrentGuessedFileDataType:(id)arg2 fileLength:(unsigned long long)arg3 fileBytes:(const char *)arg4;
+ (id)_magicCaches;

@end

@interface DVTTask : NSObject
{
    NSMutableDictionary *_environment;
    NSString *_launchPath;
    NSString *_currentDirectoryPath;
    NSArray *_arguments;
    NSArray *_preferredArchitectures;
    NSMutableArray *_fileDescriptorsToKeepOpen;
    NSNumber *_exitStatus;
    NSNumber *_signalStatus;
    NSNumber *_processIdentifier;
    NSFileHandle *_standardInput;
    NSFileHandle *_standardOutput;
    NSFileHandle *_standardError;
    NSRunLoop *_waitLoop;
    NSString *_waitRunLoopMode;
    id _runLoopSignaler;
    int _runLoopSetupLock;
    int _runLoopSignal;
    NSMutableSet *_fileHandlesToCloseAfterLaunching;
    NSNumber *_argumentEncoding;
}

+ (id)launchedTaskWithLaunchPath:(id)arg1 arguments:(id)arg2 error:(id *)arg3;
@property(copy) NSNumber *argumentEncoding; // @synthesize argumentEncoding=_argumentEncoding;
@property(copy) NSString *waitRunLoopMode; // @synthesize waitRunLoopMode=_waitRunLoopMode;
@property(copy) NSNumber *processIdentifier; // @synthesize processIdentifier=_processIdentifier;
@property(copy) NSArray *preferredArchitectures; // @synthesize preferredArchitectures=_preferredArchitectures;
@property(copy) NSNumber *signalStatus; // @synthesize signalStatus=_signalStatus;
@property(copy) NSNumber *exitStatus; // @synthesize exitStatus=_exitStatus;
@property(retain) NSFileHandle *standardError; // @synthesize standardError=_standardError;
@property(retain) NSFileHandle *standardOutput; // @synthesize standardOutput=_standardOutput;
@property(retain) NSFileHandle *standardInput; // @synthesize standardInput=_standardInput;
@property(copy) NSArray *arguments; // @synthesize arguments=_arguments;
@property(copy) NSDictionary *environment; // @synthesize environment=_environment;
@property(copy) NSString *currentDirectoryPath; // @synthesize currentDirectoryPath=_currentDirectoryPath;
@property(copy) NSString *launchPath; // @synthesize launchPath=_launchPath;
- (id)description;
@property(readonly) BOOL isRunning;
- (void)markFileHandleToStayOpenAcrossExec:(id)arg1;
- (void)markFileDescriptorToStayOpenAcrossExec:(int)arg1;
- (void)hookStandardInputToPipe:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardErrorToPipe:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardOutputToPipe:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardInputToFileHandle:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardErrorToFileHandle:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardOutputToFileHandle:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)addFileHandleToCloseAfterLaunch:(id)arg1;
- (BOOL)runReturningStandardOutput:(id *)arg1 standardError:(id *)arg2 error:(id *)arg3;
- (BOOL)runReturningStandardOutput:(id *)arg1 standardError:(id *)arg2 standardInput:(id)arg3 error:(id *)arg4;
- (void)waitUntilExit;
- (void)waitUntilExitRunningRunLoopInWaitMode;
- (BOOL)launchReturningError:(id *)arg1;
- (id)installRunLoopSignal;
- (BOOL)launchRunningTerminationHandlerOnQueue:(struct dispatch_queue_s *)arg1 error:(id *)arg2 terminationHandler:(id)arg3;
- (BOOL)monitorDVTExecFinalSequence:(int)arg1 error:(id *)arg2;
- (BOOL)monitorDVTExecStartupSequence:(int)arg1 error:(id *)arg2;
- (void)installEventHandlersForChildPID:(int)arg1 queue:(struct dispatch_queue_s *)arg2 terminationHandler:(id)arg3 blockingDidExecBlock:(void)arg4;
- (void)setValue:(id)arg1 forEnvironmentVariableNamed:(id)arg2;
- (id)init;

@end

@interface DVTPipe : NSObject
{
    NSFileHandle *_fileHandleForReading;
    NSFileHandle *_fileHandleForWriting;
}

+ (id)pipeReturningError:(id *)arg1;
@property(readonly) NSFileHandle *fileHandleForWriting; // @synthesize fileHandleForWriting=_fileHandleForWriting;
@property(readonly) NSFileHandle *fileHandleForReading; // @synthesize fileHandleForReading=_fileHandleForReading;
- (void)closeBothFileHandles;
- (id)initWithReadHandle:(id)arg1 andWriteHandle:(id)arg2;

@end

@interface DVTRescindCallbackObservingToken : NSObject <DVTObservingToken>
{
    id _callbackBlock;
}

+ (id)tokenAggregatingTokens:(id)arg1;
- (void)cancel;
- (BOOL)isCancelled;
- (id)initWithCallbackBlock:(id)arg1;

@end

@interface DVTCommandLineOptionDefinition : NSObject
{
    NSString *name;
    NSString *usageName;
    NSString *usageDescription;
    int argumentType;
    NSString *argumentKey;
    id handlerBlock;
}

+ (id)optionDefinitionWithName:(id)arg1 usageName:(id)arg2 usageDescription:(id)arg3 argumentType:(int)arg4 argumentKey:(id)arg5 handlerBlock:(id)arg6;
@property(copy) id handlerBlock; // @synthesize handlerBlock;
@property(copy) NSString *argumentKey; // @synthesize argumentKey;
@property int argumentType; // @synthesize argumentType;
@property(copy) NSString *usageDescription; // @synthesize usageDescription;
@property(copy) NSString *usageName; // @synthesize usageName;
@property(copy) NSString *name; // @synthesize name;
- (id)description;

@end

@interface DVTCommandLineParser : NSObject
{
    NSString *usageBanner;
    NSArray *optionDefinitions;
    id fallbackOptionHandlerBlock;
}

@property(copy) id fallbackOptionHandlerBlock; // @synthesize fallbackOptionHandlerBlock;
@property(copy) NSArray *optionDefinitions; // @synthesize optionDefinitions;
@property(copy) NSString *usageBanner; // @synthesize usageBanner;
- (id)usageString;
- (id)parseArguments:(id)arg1 intoOptionsDictionary:(id)arg2 error:(id *)arg3;
- (id)init;

@end

@interface DVTConsoleOutputFileHandle : NSFileHandle
{
    BOOL _shouldEmitColor;
    unsigned long long _terminalWidth;
}

- (void)resetColors;
- (void)printf:(id)arg1;
- (id)initWithFileDescriptor:(int)arg1 closeOnDealloc:(BOOL)arg2;

@end

@interface DVTCommandLineTool : NSObject
{
    NSString *_name;
    NSArray *_arguments;
    NSDictionary *_environment;
    NSFileHandle *_standardInput;
    NSFileHandle *_standardOutput;
    NSFileHandle *_standardError;
    BOOL _shouldExit;
    int _exitStatus;
}

@property int exitStatus; // @synthesize exitStatus=_exitStatus;
@property(nonatomic) BOOL shouldExit; // @synthesize shouldExit=_shouldExit;
@property(retain) NSFileHandle *standardError; // @synthesize standardError=_standardError;
@property(retain) NSFileHandle *standardOutput; // @synthesize standardOutput=_standardOutput;
@property(retain) NSFileHandle *standardInput; // @synthesize standardInput=_standardInput;
@property(copy) NSDictionary *environment; // @synthesize environment=_environment;
@property(copy) NSArray *arguments; // @synthesize arguments=_arguments;
@property(copy) NSString *name; // @synthesize name=_name;
- (void)main;
- (void)parseOptions;
- (void)start;
- (void)_ignoreSignals;
- (void)_installUncaughtExceptionHandler;
- (id)init;

@end

@interface DVTExtensionPropertyDescription : NSObject <DVTPropertyListEncoding>
{
    NSString *_name;
    BOOL _isOptional;
}

@property(getter=isOptional) BOOL optional; // @synthesize optional=_isOptional;
@property(copy) NSString *name; // @synthesize name=_name;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithName:(id)arg1 isOptional:(BOOL)arg2;

@end

@interface DVTExtensionAttributeDescription : DVTExtensionPropertyDescription
{
    int _extensionAttributeType;
    id _defaultValue;
}

@property(retain) id defaultValue; // @synthesize defaultValue=_defaultValue;
@property int extensionAttributeType; // @synthesize extensionAttributeType=_extensionAttributeType;
- (id)adjustedValueForString:(id)arg1;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithName:(id)arg1 extensionAttributeType:(int)arg2 defaultValue:(id)arg3 isOptional:(BOOL)arg4;

@end

@interface DVTExtensionElementDescription : DVTExtensionPropertyDescription
{
    NSString *_plural;
    unsigned long long _minOccurs;
    unsigned long long _maxOccurs;
    NSDictionary *_attributes;
    NSDictionary *_elements;
    NSDictionary *_properties;
    NSSet *_propertyKeys;
}

@property(copy) NSSet *propertyKeys; // @synthesize propertyKeys=_propertyKeys;
@property(copy) NSDictionary *properties; // @synthesize properties=_properties;
@property(copy) NSDictionary *elements; // @synthesize elements=_elements;
@property(copy) NSDictionary *attributes; // @synthesize attributes=_attributes;
@property unsigned long long maxOccurs; // @synthesize maxOccurs=_maxOccurs;
@property unsigned long long minOccurs; // @synthesize minOccurs=_minOccurs;
@property(copy) NSString *plural; // @synthesize plural=_plural;
- (void)_inheritAttributesAndElementsFromElementDescription:(id)arg1;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithName:(id)arg1 plural:(id)arg2 minOccurs:(unsigned long long)arg3 maxOccurs:(unsigned long long)arg4 optional:(BOOL)arg5 attributes:(id)arg6 elements:(id)arg7;

@end

@interface DVTMacroDefinitionConditionParameter : NSObject
{
    NSString *_name;
    unsigned long long _precedence;
    NSString *_displayName;
    NSAttributedString *_displayDesc;
}

+ (id)registeredConditionParameters;
+ (id)conditionParameterNamed:(id)arg1;
+ (void)registerConditionParameterNamed:(id)arg1 precedence:(unsigned long long)arg2 displayName:(id)arg3 displayDescription:(id)arg4;
+ (void)initialize;
- (long long)compare:(id)arg1;
@property(readonly) NSAttributedString *displayDescription;
@property(readonly) NSString *displayName;
@property(readonly) unsigned long long precedence;
@property(readonly) NSString *name;
- (id)initWithName:(id)arg1 precedence:(unsigned long long)arg2 displayName:(id)arg3 displayDescription:(id)arg4;

@end

@interface DVTMacroDefinitionCondition : NSObject <NSCopying>
{
    DVTMacroDefinitionConditionParameter *_parameter;
    NSString *_valuePattern;
}

+ (id)conditionSetWithParameterName:(id)arg1 valuePattern:(id)arg2;
- (id)description;
- (id)subscriptRepresentation;
- (long long)compare:(id)arg1;
- (BOOL)evaluateInScope:(id)arg1;
@property(readonly) NSString *valuePattern;
@property(readonly) DVTMacroDefinitionConditionParameter *parameter;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParameterName:(id)arg1 valuePattern:(id)arg2;

@end

@interface DVTMacroDefinitionConditionSet : NSSet <NSCopying, NSFastEnumeration>
{
    unsigned long long _combinedHash;
    unsigned long long _combinedPrecedence;
    unsigned long long _count;
    DVTMacroDefinitionCondition *_conditions[0];
}

+ (id)conditionSetFromStringRepresentation:(id)arg1 getBaseMacroName:(id *)arg2 error:(id *)arg3;
+ (id)conditionSetWithCondition:(id)arg1;
+ (id)conditionSetWithConditions:(id)arg1;
- (id)description;
- (long long)compare:(id)arg1;
- (id)subscriptRepresentation;
- (BOOL)evaluateInScope:(id)arg1;
- (unsigned long long)precedence;
- (id)conditionForParameterNamed:(id)arg1;
- (id)parameterNames;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (unsigned long long)hash;
- (id)objectEnumerator;
- (id)member:(id)arg1;
- (unsigned long long)count;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)conditionSetByRemovingParameterNamed:(id)arg1;
- (void)dealloc;
- (id)initWithObjects:(id *)arg1 count:(unsigned long long)arg2;

@end

@interface DVTMacroDefinition : NSObject
{
    NSString *_name;
    id <DVTMacroExpansion> _value;
    DVTMacroDefinition *_next;
}

+ (id)definitionWithName:(id)arg1 value:(id)arg2;
- (id)description;
- (void)setNext:(id)arg1;
@property(readonly) DVTMacroDefinition *next;
- (id)conditionSet;
- (void)setValue:(id)arg1;
@property(readonly) id <DVTMacroExpansion> value;
@property(readonly) NSString *name;
- (id)init;
- (id)initWithName:(id)arg1 value:(id)arg2;

@end

@interface DVTMacroConditionalDefinition : DVTMacroDefinition
{
    DVTMacroDefinitionConditionSet *_conditionSet;
}

+ (id)definitionWithName:(id)arg1 value:(id)arg2 conditionSet:(id)arg3;
- (id)description;
@property(readonly) DVTMacroDefinitionConditionSet *conditionSet;
- (id)initWithName:(id)arg1 value:(id)arg2 conditionSet:(id)arg3;

@end

@interface DVTAutosynchingProxyArray : NSArray <DVTInvalidation_New>
{
    id _observedObject;
    NSString *_observedKeyPath;
    NSArray *_proxies;
    DVTMapTable *_objectsToProxies;
    id _proxyObtainBlock;
    id _proxyDiscardBlock;
    id _kvoNotifyObject;
    NSString *_kvoNotifyKeyPath;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
+ (id)proxyArrayObservingObject:(id)arg1 keyPath:(id)arg2 withProxyObtainBlock:(id)arg3;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property(retain) id observedObject; // @synthesize observedObject=_observedObject;
@property(copy) NSString *kvoNotifyKeyPath; // @synthesize kvoNotifyKeyPath=_kvoNotifyKeyPath;
@property(retain) id kvoNotifyObject; // @synthesize kvoNotifyObject=_kvoNotifyObject;
@property(copy) id proxyDiscardBlock; // @synthesize proxyDiscardBlock=_proxyDiscardBlock;
@property(copy) id proxyObtainBlock; // @synthesize proxyObtainBlock=_proxyObtainBlock;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (id)proxyForObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
@property(readonly) NSString *observedKeyPath;
- (id)init;
- (id)initWithObservedObject:(id)arg1 keyPath:(id)arg2 withProxyObtainBlock:(id)arg3;

@end

@interface DVTPlugInScanRecord : NSObject <DVTPropertyListEncoding>
{
    NSString *_path;
    NSString *_bundlePath;
    NSBundle *_bundle;
    NSString *_identifier;
    NSString *_marketingVersion;
    NSDictionary *_bundleRawInfoPlist;
    NSDictionary *_plugInPlist;
    double _timestamp;
    NSSet *_requiredCapabilities;
    DVTVersion *_minimumRequiredSystemVersion;
    DVTVersion *_maximumAllowedSystemVersion;
    DVTPlugIn *_plugIn;
}

+ (void)initialize;
@property(retain) DVTPlugIn *plugIn; // @synthesize plugIn=_plugIn;
@property(readonly) double timestamp; // @synthesize timestamp=_timestamp;
@property(readonly) NSDictionary *plugInPlist; // @synthesize plugInPlist=_plugInPlist;
@property(readonly) DVTVersion *maximumAllowedSystemVersion; // @synthesize maximumAllowedSystemVersion=_maximumAllowedSystemVersion;
@property(readonly) DVTVersion *minimumRequiredSystemVersion; // @synthesize minimumRequiredSystemVersion=_minimumRequiredSystemVersion;
@property(readonly) NSSet *requiredCapabilities; // @synthesize requiredCapabilities=_requiredCapabilities;
@property(readonly) NSDictionary *bundleRawInfoPlist; // @synthesize bundleRawInfoPlist=_bundleRawInfoPlist;
@property(readonly) NSString *marketingVersion; // @synthesize marketingVersion=_marketingVersion;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) NSBundle *bundle; // @synthesize bundle=_bundle;
@property(readonly) NSString *bundlePath; // @synthesize bundlePath=_bundlePath;
@property(readonly) NSString *path; // @synthesize path=_path;
- (BOOL)loadRequiredCapabilities:(id *)arg1;
- (BOOL)_loadBundleRawInfoPlist:(id *)arg1;
- (BOOL)loadPlugInPlist:(id *)arg1;
- (id)_contentsOfPlistAtURL:(id)arg1 error:(id *)arg2;
- (void)_instantiateBundleIfNecessary;
- (BOOL)isEquivalentToPlistRepresentation:(id)arg1;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)description;
- (long long)compare:(id)arg1;
- (id)initWithPath:(id)arg1 bundle:(id)arg2 plugInPlist:(id)arg3 timestamp:(double)arg4;
- (id)initWithPath:(id)arg1 bundlePath:(id)arg2 plugInPlist:(id)arg3 timestamp:(double)arg4;

@end

@interface DVTPlugInLocalizedString : NSString
{
    NSString *_key;
    DVTExtension *_extension;
    NSString *_value;
}

- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (void)_populate;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithKey:(id)arg1 forExtension:(id)arg2;

@end

@interface _DVTErrorRecoveryHandler : NSObject
{
}

- (BOOL)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;

@end

@interface DVTProcessInformation : NSObject
{
    int _pid;
    NSString *_displayName;
    NSURL *_processURL;
    NSString *_preferredArchitecture;
}

@property(readonly) NSString *preferredArchitecture; // @synthesize preferredArchitecture=_preferredArchitecture;
@property(readonly) NSURL *processURL; // @synthesize processURL=_processURL;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) int pid; // @synthesize pid=_pid;
- (long long)displayNameCompare:(id)arg1;
- (void)setPreferredArchitecture:(id)arg1;
- (void)setProcessURL:(id)arg1;
- (void)setDisplayName:(id)arg1;
@property(readonly) BOOL isDebuggable;
- (id)initWithPID:(int)arg1;

@end

@interface DVTObsoleteUnarchivedObjectPlaceholder : NSObject
{
}

- (void)dvt_addObject:(id)arg1 fromXMLUnarchiver:(id)arg2;

@end

@interface DVTLocalProcessInformation : DVTProcessInformation
{
    NSString *_realApplicationName;
    NSString *_requestedApplicationName;
    NSString *_firstApplicationArgument;
}

+ (id)_blacklistedProcesses;
+ (id)_currentProcessIDsAsNumbers;
+ (id)currentProcessInformations;
+ (id)_archNameForExecutableArchitecture:(int)arg1;
@property(copy, nonatomic) NSString *firstApplicationArgument; // @synthesize firstApplicationArgument=_firstApplicationArgument;
@property(copy, nonatomic) NSString *requestedApplicationName; // @synthesize requestedApplicationName=_requestedApplicationName;
@property(copy, nonatomic) NSString *realApplicationName; // @synthesize realApplicationName=_realApplicationName;
- (id)_procTableName;
- (BOOL)_isLaunchCFMApp;
- (id)_calculatePreferredArchitecture;
- (id)_calculateProcessURL;
- (id)_calculateDisplayName;
- (void)_initProcessInformation;
- (id)preferredArchitecture;
- (id)processURL;
- (id)displayName;

@end

@interface DVTDiffWordDataSource : DVTDiffDataSource
{
    NSArray *_tokenStorage;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)didChange;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (struct _DVTDiffToken)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (id)_tokenStorageForDescriptor:(id)arg1;

@end

@interface DVTToolsInfo : NSObject
{
    NSNumber *_isAppleInternal;
    DVTBuildVersion *_toolsBuildVersion;
    DVTDispatchLock *_infoLock;
}

+ (id)toolsInfo;
+ (void)initialize;
@property(readonly) BOOL hasUnlimitedPower;
@property(readonly) BOOL isRuntimeOSAppleInternal;
@property(readonly) unsigned long long runtimeOSActualVersion;
@property(readonly) unsigned long long runtimeOSMajorVersion;
@property(readonly) unsigned long long buildOSActualVersion;
@property(readonly) unsigned long long buildOSMajorVersion;
@property(readonly) DVTBuildVersion *toolsBuildVersion;
@property(readonly) DVTToolsVersion *toolsVersion;
@property(readonly) BOOL isAppleInternal;

@end

@interface DVTProvisioningProfileManager : NSObject
{
    id _provider;
}

+ (id)keyPathsForValuesAffectingExpiringProfiles;
+ (id)keyPathsForValuesAffectingAllProfiles;
+ (id)keyPathsForValuesAffectingAreProfilesLoaded;
+ (id)defaultManager;
- (id)provider;
- (BOOL)isProfileExpiringWithCodeSigningIdentity:(id)arg1 profileName:(id *)arg2;
- (id)expiringProfilesInExpansionContext:(id)arg1;
@property(readonly) NSSet *expiringProfiles;
@property(readonly) NSSet *allProfiles;
@property(readonly) BOOL areProfilesLoaded;

@end

@interface DVTProvisioningProfileProvider : NSObject
{
}

+ (id)sharedProvider;
- (BOOL)isProfileExpiringWithCodeSigningIdentity:(id)arg1 profileName:(id *)arg2;
- (id)expiringProfilesInExpansionContext:(id)arg1;
@property(readonly) NSSet *expiringProfiles;
@property(readonly) NSSet *allProfiles;
@property(readonly) BOOL areProfilesLoaded;

@end

@interface DVTArchitecture : NSObject
{
    NSString *_canonicalName;
    NSString *_displayName;
    int _CPUType;
    int _CPUSubType;
    BOOL _is64Bit;
}

+ (id)architectureWithCPUType:(int)arg1 subType:(int)arg2;
+ (id)architectureWithCanonicalName:(id)arg1;
+ (id)allArchitectures;
+ (void)initialize;
@property(readonly) BOOL is64Bit; // @synthesize is64Bit=_is64Bit;
@property(readonly) int CPUSubType; // @synthesize CPUSubType=_CPUSubType;
@property(readonly) int CPUType; // @synthesize CPUType=_CPUType;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSString *canonicalName; // @synthesize canonicalName=_canonicalName;
- (_Bool)matchesCPUType:(int)arg1 andSubType:(int)arg2;
- (id)description;
- (id)initWithExtension:(id)arg1;
- (id)initWithCanonicalName:(id)arg1 displayName:(id)arg2 CPUType:(int)arg3 CPUSubType:(int)arg4 is64Bit:(BOOL)arg5;

@end

@interface DVTKVCMethodStyle : NSObject
{
    int mask;
    unsigned long long numSubexpressions;
    DVTRegularExpression *regex;
    DVTDispatchLock *regexLock;
    NSArray *patterns;
}

@property(readonly) NSArray *patterns; // @synthesize patterns;
@property(readonly) DVTDispatchLock *regexLock; // @synthesize regexLock;
@property(readonly) DVTRegularExpression *regex; // @synthesize regex;
@property(readonly) unsigned long long numSubexpressions; // @synthesize numSubexpressions;
@property(readonly) int mask; // @synthesize mask;
- (id)initWithMask:(int)arg1 numSubexpressions:(unsigned long long)arg2 regex:(id)arg3 patterns:(id)arg4;

@end

@interface DVTDownloadableDependency : NSObject <NSCoding>
{
    NSString *_identifier;
    DVTDotSeparatedVersion *_minVersion;
}

@property(readonly) DVTDotSeparatedVersion *minVersion; // @synthesize minVersion=_minVersion;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (id)propertyList;
- (id)initWithPropertyList:(id)arg1 error:(id *)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)initWithIdentifier:(id)arg1 minVersion:(id)arg2;

@end

@interface DVTDownloadable : NSObject <NSCoding, NSCopying>
{
    NSString *_identifier;
    DVTDotSeparatedVersion *_version;
    NSURL *_source;
    unsigned long long _fileSize;
    NSString *_name;
    NSDictionary *_userInfo;
    NSSet *_dependencies;
}

@property(readonly) NSSet *dependencies; // @synthesize dependencies=_dependencies;
@property(readonly) NSDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) unsigned long long fileSize; // @synthesize fileSize=_fileSize;
@property(readonly) NSURL *source; // @synthesize source=_source;
@property(readonly) DVTDotSeparatedVersion *version; // @synthesize version=_version;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) NSDictionary *installedIfAllReceiptsArePresentOrNewer;
@property(readonly) NSDictionary *installedIfAllSHA1SumsMatch;
@property(readonly) NSArray *installedIfAllPathsArePresent;
@property(readonly) NSPredicate *activationPredicate;
@property(readonly) BOOL requiresADCAuthentication;
@property(readonly) NSString *installPrefix;
@property(readonly, getter=isUserVisible) _Bool userVisible;
- (id)propertyList;
- (id)initWithPropertyList:(id)arg1 error:(id *)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)initWithIdentifier:(id)arg1 version:(id)arg2 source:(id)arg3 fileSize:(unsigned long long)arg4 name:(id)arg5 dependencies:(id)arg6 userInfo:(id)arg7;

@end

@interface DVTDownloadableManager : NSObject
{
    DVTDispatchLock *_lock;
    DVTDispatchLock *_asyncQueue;
    NSMutableSet *_indexes;
    NSOperationQueue *_indexRefreshQueue;
    NSMutableSet *_downloadables;
    NSMutableSet *_downloadedDownloadables;
    NSMutableDictionary *_downloadablesByIdentifier;
    NSOperationQueue *_downloadQueue;
    NSMutableSet *_operations;
    NSURL *_cacheURL;
    BOOL _automaticRefresh;
    BOOL _automaticUpdate;
    NSDate *_doNotPromptAboutUpdatesUntilDate;
    DVTMacroDefinitionTable *_macroDefinitionTable;
    DVTMacroExpansionScope *_macroExpansionScope;
    NSMutableDictionary *_predicateSubstitutionVariables;
}

+ (id)defaultDownloadableManager;
@property(retain) NSDate *doNotPromptAboutUpdatesUntilDate; // @synthesize doNotPromptAboutUpdatesUntilDate=_doNotPromptAboutUpdatesUntilDate;
@property BOOL automaticUpdate; // @synthesize automaticUpdate=_automaticUpdate;
@property BOOL automaticRefresh; // @synthesize automaticRefresh=_automaticRefresh;
@property(copy) NSURL *cacheURL; // @synthesize cacheURL=_cacheURL;
- (BOOL)evalutePredicate:(id)arg1;
- (id)expandMacrosInValue:(id)arg1;
- (void)setValue:(id)arg1 forMacroName:(id)arg2;
- (void)updateOutdatedDownloadables:(id)arg1 authenticationBlock:(id)arg2 errorHandler:(void)arg3;
- (id)download:(id)arg1 authenticationBlock:(id)arg2 error:(void)arg3;
- (id)download:(id)arg1 authenticationBlock:(id)arg2 authorization:(void)arg3 error:(struct AuthorizationOpaqueRef *)arg4;
- (id)operationForDownload:(id)arg1 authenticationBlock:(id)arg2 authorization:(void)arg3 error:(struct AuthorizationOpaqueRef *)arg4;
- (void)addOperation:(id)arg1;
@property(readonly) NSSet *operations;
- (id)_candidatesForDependency:(id)arg1;
- (void)triggerAutomaticUpdateCheck;
- (id)outdatedDownloadables;
- (BOOL)isDownloadedDownloadable:(id)arg1;
- (BOOL)_isDownloadedDownloadable:(id)arg1;
- (BOOL)deleteFromCache:(id)arg1 error:(id *)arg2;
- (BOOL)isCachedDownloadable:(id)arg1;
- (id)cacheURLForDownloadable:(id)arg1;
- (id)downloadableForIdentifier:(id)arg1 version:(id)arg2;
- (id)_downloadableForIdentifier:(id)arg1 version:(id)arg2;
- (id)downloadablesForIdentifier:(id)arg1;
- (id)_downloadablesForIdentifier:(id)arg1;
- (void)addDownloadable:(id)arg1;
@property(readonly) NSSet *downloadedDownloadables;
@property(readonly) NSSet *downloadables;
- (void)addIndexAtURL:(id)arg1;
- (void)addIndex:(id)arg1;
- (id)_cacheURLForIndexURL:(id)arg1;
- (void)_retryingRefreshIndexFromURL:(id)arg1;
- (id)refreshIndexes;
- (id)_refreshIndexFromURL:(id)arg1;
@property(readonly) NSSet *indexes;
@property(readonly) id <DVTDownloadableInstallationHelper> installationHelper;
- (void)_lockedSetMutation:(id)arg1 key:(id)arg2 kind:(unsigned long long)arg3 change:(id)arg4;
- (void)_withWillDidChangeSetMutationNotifications:(id)arg1 kind:(unsigned long long)arg2 change:(id)arg3 withBlock:(id)arg4;
- (id)_performLockedReturningBlock:(id)arg1;
- (id)init;

@end

@interface DVTTarjanSCCVertex : NSObject
{
    unsigned long long index;
    unsigned long long lowlink;
    BOOL inStack;
    id userObject;
}

- (id)initWithUserObject:(id)arg1;

@end

@interface DVTDotSeparatedVersion : NSObject <NSCopying, NSCoding>
{
    long long _components[8];
    NSString *_description;
}

- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (long long)compareMajorMinorVersion:(id)arg1;
- (long long)compare:(id)arg1;
- (long long)_compare:(id)arg1 withPrecision:(unsigned long long)arg2;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly) unsigned long long componentCount;
- (long long)componentAtIndex:(unsigned long long)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTDownloadableOperation : DVTOperation <DVTProgressReporting>
{
    long long _progress;
    unsigned long long _progressWeight;
    BOOL _userRequested;
    BOOL _cancelable;
    NSString *_title;
}

@property(retain) NSString *title; // @synthesize title=_title;
@property BOOL cancelable; // @synthesize cancelable=_cancelable;
@property BOOL userRequested; // @synthesize userRequested=_userRequested;
@property unsigned long long progressWeight; // @synthesize progressWeight=_progressWeight;
@property long long progress; // @synthesize progress=_progress;
- (void)cancel;
@property(readonly, getter=shouldProceed) BOOL shouldProceed;
- (void)downloadableOperationMain;
- (void)main;
- (id)init;

@end

@interface DVTDownloadableOperationRefreshIndex : DVTDownloadableOperation
{
    NSURL *_url;
    DVTDownloadableIndex *_refreshedIndex;
}

@property(retain) DVTDownloadableIndex *refreshedIndex; // @synthesize refreshedIndex=_refreshedIndex;
- (void)downloadableOperationMain;
- (id)initWithURL:(id)arg1;

@end

@interface DVTDownloadableOperationDownload : DVTDownloadableOperation
{
    DVTDownloadableManager *_manager;
    DVTDownloadable *_downloadable;
    id _authenticationBlock;
    NSMutableArray *_cancellationBlocks;
    struct AuthorizationOpaqueRef *_authRef;
}

@property(readonly) DVTDownloadable *downloadable; // @synthesize downloadable=_downloadable;
- (void)cancel;
- (void)downloadableOperationMain;
- (id)initWithDownloadable:(id)arg1 userRequested:(BOOL)arg2 authenticationBlock:(id)arg3 authorization:(void)arg4 manager:(struct AuthorizationOpaqueRef *)arg5;

@end

@interface DVTDownloadableIndex : NSObject
{
    NSURL *_source;
    double _refreshInterval;
    NSDate *_refreshDate;
    NSSet *_indexes;
    NSSet *_downloadables;
}

@property(readonly) NSSet *downloadables; // @synthesize downloadables=_downloadables;
@property(readonly) NSSet *indexes; // @synthesize indexes=_indexes;
@property(readonly) NSDate *refreshDate; // @synthesize refreshDate=_refreshDate;
@property(readonly) double refreshInterval; // @synthesize refreshInterval=_refreshInterval;
@property(readonly) NSURL *source; // @synthesize source=_source;
- (id)description;
- (id)propertyList;
- (id)initWithPropertyList:(id)arg1 error:(id *)arg2;
- (id)initWithPropertyList:(id)arg1 source:(id)arg2 error:(id *)arg3;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithSource:(id)arg1 refreshInterval:(double)arg2 refreshDate:(id)arg3 indexes:(id)arg4 downloadables:(id)arg5;

@end

@interface DataGatheringNSURLConnectionDelegate : NSObject
{
    NSURLResponse *_lastResponse;
    NSMutableData *_gatheringData;
    unsigned long long _maxLength;
    id _errorHandler;
    id _successHandler;
}

- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (id)initWithMaxLength:(unsigned long long)arg1 errorHandler:(id)arg2 successHandler:(void)arg3;

@end

@interface DataWritingNSURLConnectionDelegate : NSObject
{
    NSURLResponse *_lastResponse;
    unsigned long long _maxLength;
    NSFileHandle *_fileHandle;
    id _errorHandler;
    id _progressHandler;
    id _successHandler;
}

- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (id)initWithMaxLength:(unsigned long long)arg1 fileHandle:(id)arg2 errorHandler:(id)arg3 progressHandler:(void)arg4 successHandler:(id)arg5;

@end

@interface DVTDownloadable_PKInstallClientDelegate : NSObject
{
    NSTimer *_timer;
    BOOL _isRunningModal;
    id _errorHandler;
    id _progressHandler;
    id _successHandler;
}

@property(retain) NSTimer *timer; // @synthesize timer=_timer;
- (void)_callPKInstallClientStatusTimer:(id)arg1;
- (void)clear;
- (void)installClientDidFinish:(id)arg1;
- (void)installClient:(id)arg1 didFailWithError:(id)arg2;
- (void)installClient:(id)arg1 currentState:(int)arg2 package:(id)arg3 progress:(double)arg4 timeRemaining:(double)arg5;
- (void)installClientDidBegin:(id)arg1;
- (id)initForModal:(BOOL)arg1 errorHandler:(id)arg2 progressHandler:(void)arg3 successHandler:(id)arg4;

@end

@interface DVTVersion : NSObject <NSCopying>
{
    CDUnion_7de6e739 _components;
    NSString *_stringValue;
}

+ (id)currentSystemVersion;
+ (id)versionWithStringValue:(id)arg1;
+ (id)versionWithMajorComponent:(unsigned long long)arg1 minorComponent:(unsigned long long)arg2 updateComponent:(unsigned long long)arg3;
+ (void)initialize;
- (id)initWithString:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (long long)compare:(id)arg1;
@property(readonly) NSString *stringValue;
@property(readonly) unsigned long long updateComponent;
@property(readonly) unsigned long long minorComponent;
@property(readonly) unsigned long long majorComponent;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithVersionComponents:(CDUnion_7de6e739)arg1;

@end

@interface DVTGeneratedContentProvider : NSObject <DVTInvalidation_New>
{
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
+ (id)sourceFilePathForGeneratedContentURL:(id)arg1;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)generateContentForURL:(id)arg1 waitingBlock:(id)arg2 completionBlock:(void)arg3;
@property(readonly) NSString *displayName;

@end

@interface DVTOSVersion : NSObject
{
    NSString *_displayName;
    unsigned long long _osVersion;
}

@property(readonly) unsigned long long osVersion; // @synthesize osVersion=_osVersion;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
- (id)initWithOSVersion:(unsigned long long)arg1 andDisplayName:(id)arg2;

@end

@interface DVTExtraXMLArchiveData : NSObject
{
    NSMutableArray *_mutableAttributes;
    NSMutableArray *_mutableElements;
}

@property(copy) NSMutableArray *mutableElements; // @synthesize mutableElements=_mutableElements;
@property(copy) NSMutableArray *mutableAttributes; // @synthesize mutableAttributes=_mutableAttributes;
- (id)description;
- (id)init;

@end

@interface DVTExtraXMLAttribute : NSObject
{
    NSString *_previousAttributeName;
    NSString *_name;
    NSString *_value;
}

@property(copy) NSString *previousAttributeName; // @synthesize previousAttributeName=_previousAttributeName;
@property(copy) NSString *value; // @synthesize value=_value;
@property(copy) NSString *name; // @synthesize name=_name;

@end

@interface DVTExtraXMLElement : NSObject
{
    NSString *_name;
    NSMutableArray *_mutableAttributeNames;
    NSMutableArray *_mutableAttributeValues;
    NSMutableArray *_mutableElements;
}

@property(copy) NSMutableArray *mutableElements; // @synthesize mutableElements=_mutableElements;
@property(copy) NSMutableArray *mutableAttributeValues; // @synthesize mutableAttributeValues=_mutableAttributeValues;
@property(copy) NSMutableArray *mutableAttributeNames; // @synthesize mutableAttributeNames=_mutableAttributeNames;
@property(copy) NSString *name; // @synthesize name=_name;
- (id)init;

@end

@interface DVTPerformanceCheckpoint : NSObject
{
    NSString *_label;
    double _checkpointTime;
    id _statisticValues[0];
}

+ (id)newCheckpointWithLabel:(id)arg1;
@property(readonly) double checkpointTime; // @synthesize checkpointTime=_checkpointTime;
@property(readonly) NSString *label; // @synthesize label=_label;
- (void)iterateStatisticValues:(id)arg1;
- (void)dealloc;
- (id)initWithLabel:(id)arg1;

@end

@interface DVTCopyOnWriteMutableArray : NSMutableArray
{
    NSMutableArray *_backingArray;
    BOOL _hasHandedOutArray;
}

- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeLastObject;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (void)_willMutate;
@property(readonly) NSArray *copiedArray;
- (id)init;

@end

@interface DVTPerformanceStatistic : NSObject
{
    NSString *_name;
    id _checkpointBlock;
    id _logBlock;
}

+ (void)freezePerformanceStatisticRegistration;
+ (id)allStatistics;
+ (id)registerStatisticWithName:(id)arg1 checkpointBlock:(id)arg2 logBlock:(void)arg3;
+ (void)initialize;
@property(readonly) id logBlock; // @synthesize logBlock=_logBlock;
@property(readonly) id checkpointBlock; // @synthesize checkpointBlock=_checkpointBlock;
@property(readonly) NSString *name; // @synthesize name=_name;
- (id)initWithName:(id)arg1 checkpointBlock:(id)arg2 logBlock:(void)arg3;

@end

@interface DVTAbstractMacDevice : DVTDevice
{
}

@end

@interface DVTSemaphore : NSObject
{
    struct dispatch_semaphore_s *_semaphore;
}

+ (id)semaphoreWithCount:(long long)arg1;
- (BOOL)waitWithTimeout:(double)arg1;
- (void)wait;
- (BOOL)signal;
- (void)dealloc;
- (void)finalize;
- (id)initWithCount:(long long)arg1;
- (id)init;

@end

@interface DVTPatienceDiffContext : DVTDiffContext
{
}

+ (id)patienceLogAspect;
- (void)_buildDiffDescriptors;

@end

@interface DVTHashTable : NSObject <NSCopying, NSCoding, NSFastEnumeration>
{
}

+ (id)hashTableWithOptions:(int)arg1;
+ (id)hashTableWithWeakObjects;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)alloc;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)setRepresentation;
- (id)mutableSet;
- (void)minusHashTable:(id)arg1;
- (void)unionHashTable:(id)arg1;
- (void)intersectHashTable:(id)arg1;
- (BOOL)isSubsetOfHashTable:(id)arg1;
- (BOOL)isEqualToHashTable:(id)arg1;
- (BOOL)intersectsHashTable:(id)arg1;
- (BOOL)containsObject:(id)arg1;
- (id)anyObject;
- (void)removeAllObjects;
- (void)removeObject:(id)arg1;
- (id)member:(id)arg1;
- (id)pointerFunctions;
- (id)initWithPointerFunctions:(id)arg1 capacity:(unsigned long long)arg2;
- (void)getKeys:(void **)arg1 count:(unsigned long long *)arg2;
- (void)removeAllItems;
- (id)copy;
- (void)removeItem:(const void *)arg1;
- (void)insertKnownAbsentItem:(const void *)arg1;
- (void)addObject:(id)arg1;
- (void *)getItem:(const void *)arg1;
- (unsigned long long)weakCount;
- (id)allObjects;
- (unsigned long long)count;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)objectEnumerator;
- (id)description;
- (id)init;
- (id)initWithOptions:(int)arg1 capacity:(unsigned long long)arg2;
- (id)initWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface DVTConcreteHashTable : DVTHashTable
{
    struct DVTSlice slice;
    unsigned long long count;
    unsigned long long capacity;
    unsigned long long options;
    unsigned long long mutations;
}

- (id)objectEnumerator;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (void)getKeys:(void **)arg1 count:(unsigned long long *)arg2;
- (id)allObjects;
- (void)removeAllItems;
- (void)removeItem:(const void *)arg1;
- (void)insertKnownAbsentItem:(const void *)arg1;
- (void)addObject:(id)arg1;
- (void)insertItem:(const void *)arg1;
- (void *)getItem:(const void *)arg1;
- (void)rehash;
- (void)assign:(unsigned long long)arg1 key:(const void *)arg2;
- (void)hashGrow;
- (unsigned long long)rehashAround:(unsigned long long)arg1;
- (void)raiseCountUnderflowException;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (unsigned long long)count;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)pointerFunctions;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)initWithPointerFunctions:(id)arg1 capacity:(unsigned long long)arg2;
- (id)initWithOptions:(int)arg1 capacity:(unsigned long long)arg2;
- (id)copy;
- (id)init;
- (void)_initBlock;

@end

@interface DVTMapTable : NSObject <NSCopying, NSCoding, NSFastEnumeration>
{
}

+ (id)mapTableWithWeakToWeakObjects;
+ (id)mapTableWithStrongToWeakObjects;
+ (id)mapTableWithWeakToStrongObjects;
+ (id)mapTableWithStrongToStrongObjects;
+ (id)mapTableWithKeyOptions:(int)arg1 valueOptions:(int)arg2;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)alloc;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)enumerateKeysAndObjectsUsingBlock:(id)arg1;
- (id)dictionaryRepresentation;
- (id)mutableDictionary;
- (void)removeAllObjects;
- (unsigned long long)getKeys:(const void **)arg1 values:(const void **)arg2;
- (BOOL)mapMember:(const void *)arg1 originalKey:(const void **)arg2 value:(const void **)arg3;
- (id)enumerator;
- (void)removeAllItems;
- (id)allValues;
- (id)allKeys;
- (void)replaceItem:(const void *)arg1 forExistingKey:(const void *)arg2;
- (void *)existingItemForSetItem:(const void *)arg1 forAbsentKey:(const void *)arg2;
- (void)setItem:(const void *)arg1 forKnownAbsentKey:(const void *)arg2;
- (void)setItem:(const void *)arg1 forAbsentKey:(const void *)arg2;
- (void)setItem:(const void *)arg1 forKey:(const void *)arg2;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (id)valuePointerFunctions;
- (id)keyPointerFunctions;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)copy;
- (id)objectEnumerator;
- (id)keyEnumerator;
- (unsigned long long)count;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (id)init;
- (id)initWithKeyPointerFunctions:(id)arg1 valuePointerFunctions:(id)arg2 capacity:(unsigned long long)arg3;
- (id)initWithKeyOptions:(int)arg1 valueOptions:(int)arg2 capacity:(unsigned long long)arg3;
- (id)initWithCoder:(id)arg1;
- (void)dvt_enumerateKeysAndObjectsUsingBlock:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface DVTConcreteMapTable : DVTMapTable
{
    struct DVTSlice keys;
    struct DVTSlice values;
    unsigned long long count;
    unsigned long long capacity;
    unsigned long long keyOptions;
    unsigned long long valueOptions;
    unsigned long long mutations;
    int growLock;
    _Bool shouldRehash;
}

- (id)allValues;
- (id)allKeys;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (unsigned long long)getKeys:(const void **)arg1 values:(const void **)arg2;
- (id)objectEnumerator;
- (id)keyEnumerator;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)description;
- (void)finalize;
- (void)dealloc;
- (void)removeAllItems;
- (void)removeObjectForKey:(id)arg1;
- (void)rehash;
- (unsigned long long)rehashAround:(unsigned long long)arg1;
- (void)replaceItem:(const void *)arg1 forExistingKey:(const void *)arg2;
- (BOOL)mapMember:(const void *)arg1 originalKey:(const void **)arg2 value:(const void **)arg3;
- (void *)existingItemForSetItem:(const void *)arg1 forAbsentKey:(const void *)arg2;
- (void)setItem:(const void *)arg1 forKnownAbsentKey:(const void *)arg2;
- (void)setItem:(const void *)arg1 forAbsentKey:(const void *)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (void)assign:(unsigned long long)arg1 key:(const void *)arg2 value:(const void *)arg3 isNew:(BOOL)arg4;
- (void)grow;
- (id)dump;
- (BOOL)containsKeys:(const void **)arg1 values:(const void **)arg2 count:(unsigned long long)arg3;
- (unsigned long long)count;
- (id)valuePointerFunctions;
- (id)keyPointerFunctions;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)initWithKeyPointerFunctions:(id)arg1 valuePointerFunctions:(id)arg2 capacity:(unsigned long long)arg3;
- (id)initWithKeyOptions:(int)arg1 valueOptions:(int)arg2 capacity:(unsigned long long)arg3;
- (id)copy;
- (void)_setBackingStore;
- (void)_initBlock;
- (void)zeroPairedEntries;
- (void)checkCount:(const char *)arg1;
- (unsigned long long)realCount;
- (void)raiseCountUnderflowException;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface DVTConcreteMapTableValueEnumerator : NSEnumerator
{
    DVTConcreteMapTable *mapTable;
    unsigned long long counter;
}

+ (id)enumeratorWithMapTable:(id)arg1;
- (void)dealloc;
- (id)nextObject;

@end

@interface DVTPointerArray : NSObject <NSFastEnumeration, NSCopying, NSCoding>
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)pointerArrayWithPointerFunctions:(id)arg1;
+ (id)pointerArrayWithOptions:(int)arg1;
+ (id)pointerArrayWithWeakObjects;
+ (id)pointerArrayWithStrongObjects;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)setCount:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)compact;
- (void)replacePointerAtIndex:(unsigned long long)arg1 withPointer:(id)arg2;
- (void)insertPointer:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removePointerAtIndex:(unsigned long long)arg1;
- (void)addPointer:(id)arg1;
- (id)pointerAtIndex:(unsigned long long)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)pointerFunctions;
- (id)initWithCoder:(id)arg1;
- (id)initWithPointerFunctions:(id)arg1;
- (id)initWithOptions:(int)arg1;
- (id)init;
- (void)getPointers:(id *)arg1;
- (void)getPointers:(id *)arg1 range:(struct _NSRange)arg2;
- (unsigned long long)indexOfPointerIdenticalTo:(id)arg1;
- (id)allObjects;
- (id)mutableArray;

@end

__attribute__((visibility("hidden")))
@interface DVTConcretePointerArray : DVTPointerArray
{
    struct DVTSlice slice;
    unsigned long long count;
    unsigned long long capacity;
    unsigned long long options;
    unsigned long long mutations;
    BOOL needsCompaction;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)removePointer:(id)arg1;
- (unsigned long long)indexOfPointer:(id)arg1;
- (void)setCount:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)compact;
- (void)_markNeedsCompaction;
- (void)replacePointerAtIndex:(unsigned long long)arg1 withPointer:(id)arg2;
- (void)insertPointer:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)removePointerAtIndex:(unsigned long long)arg1;
- (void)addPointer:(id)arg1;
- (id)pointerAtIndex:(unsigned long long)arg1;
- (void)arrayGrow:(unsigned long long)arg1;
- (id)pointerFunctions;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)finalize;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)initWithPointerFunctions:(id)arg1;
- (id)initWithOptions:(int)arg1;
- (void)_initBlock;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface DVTConcretePointerFunctions : DVTPointerFunctions
{
    struct DVTSlice slice;
}

+ (_Bool)initializeSlice:(struct DVTSlice *)arg1 withOptions:(int)arg2;
+ (void)initializeBackingStore:(struct DVTSlice *)arg1 sentinel:(BOOL)arg2 compactable:(BOOL)arg3;
- (BOOL)usesARC;
- (BOOL)usesWeakReadAndWriteBarriers;
- (BOOL)usesStrongWriteBarrier;
- (void *)relinquishFunction;
- (void *)acquireFunction;
- (void *)descriptionFunction;
- (void *)isEqualFunction;
- (void *)hashFunction;
- (void *)sizeFunction;
- (void)setUsesARC:(BOOL)arg1;
- (void)setUsesWeakReadAndWriteBarriers:(BOOL)arg1;
- (void)setUsesStrongWriteBarrier:(BOOL)arg1;
- (void)setRelinquishFunction:(void *)arg1;
- (void)setAcquireFunction:(void *)arg1;
- (void)setDescriptionFunction:(void *)arg1;
- (void)setIsEqualFunction:(void *)arg1;
- (void)setHashFunction:(void *)arg1;
- (void)setSizeFunction:(void *)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithOptions:(int)arg1;

@end

@interface DVTPointerFunctions : NSObject <NSCopying>
{
}

+ (id)pointerFunctionsWithOptions:(int)arg1;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property BOOL usesWeakReadAndWriteBarriers;
@property BOOL usesStrongWriteBarrier;
@property void *relinquishFunction;
@property void *acquireFunction;
@property void *descriptionFunction;
@property void *isEqualFunction;
@property void *hashFunction;
@property void *sizeFunction;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithOptions:(int)arg1;

@end

@interface DVTWeakCallBack : NSObject
{
    id _callback_next;
    void *_callback_function;
    id _callback_target;
}

@end

@interface _DVTCollectionCheckingUncollectedPointer : NSObject
{
    void *_uncollectedPointer;
    NSString *_name;
    unsigned long long _survivedCount;
}

- (unsigned long long)survivedCount;
- (id)name;
- (void *)uncollectedPointer;
- (id)initWithUncollectedPointer:(void *)arg1 name:(id)arg2 survivedCount:(unsigned long long)arg3;

@end

@interface DVTCollectionChecking : NSObject
{
}

+ (void)checkForUncollectedObjects;
+ (void)setCollectionCheckingEnabled:(BOOL)arg1;
+ (BOOL)collectionCheckingEnabled;

@end

@interface DVTReaderWriterLock : NSObject <NSLocking>
{
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
    struct _opaque_pthread_t {
        long long _field1;
        struct __darwin_pthread_handler_rec *_field2;
        char _field3[1168];
    } *_writer;
    NSString *_name;
}

+ (id)readerWriterLockWithDebugName:(id)arg1;
- (id)description;
- (void)unlock;
- (void)lock;
- (BOOL)tryLockForWriting;
- (void)lockForWriting;
- (BOOL)tryLockForReading;
- (void)lockForReading;
- (id)debugName;
- (void)finalize;
- (void)dealloc;
- (id)init;
- (id)initWithDebugName:(id)arg1;

@end

@interface DVTStringBuffer : NSObject
{
    unsigned long long bufferLen;
    unsigned long long bufferLoc;
    NSString *string;
    unsigned long long stringLen;
    unsigned long long stringLoc;
    unsigned short buffer[32];
    unsigned short curChar;
    unsigned short _unused;
}

@end

@interface DVTToolchain : NSObject
{
    NSString *_displayDescription;
    NSString *_displayName;
    DVTFilePath *_path;
    DVTSearchPath *_librarySearchPath;
    NSString *_identifier;
    DVTSearchPath *_executableBinarySearchPath;
    NSDictionary *_defaultBuildSettings;
}

+ (id)defaultToolchain;
@property(readonly) NSDictionary *defaultBuildSettings; // @synthesize defaultBuildSettings=_defaultBuildSettings;
@property(readonly) DVTSearchPath *executableBinarySearchPath; // @synthesize executableBinarySearchPath=_executableBinarySearchPath;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) DVTSearchPath *librarySearchPath; // @synthesize librarySearchPath=_librarySearchPath;
@property(readonly) DVTFilePath *path; // @synthesize path=_path;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSString *displayDescription; // @synthesize displayDescription=_displayDescription;
- (id)description;
- (id)init;
- (id)initWithPath:(id)arg1 error:(id *)arg2;

@end

@interface DVTToolchainRegistry : NSObject <NSFastEnumeration>
{
    DVTSearchPath *_searchPath;
    DVTMutableOrderedDictionary *_identsToToolchains;
    DVTReaderWriterLock *_lock;
}

+ (id)defaultRegistry;
@property(readonly) DVTReaderWriterLock *lock; // @synthesize lock=_lock;
@property(readonly) DVTMutableOrderedDictionary *identsToToolchains; // @synthesize identsToToolchains=_identsToToolchains;
@property(readonly) DVTSearchPath *searchPath; // @synthesize searchPath=_searchPath;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (BOOL)scanSearchPathAndRegisterToolchains:(id *)arg1;
- (id)allRegisteredToolchains;
- (id)defaultToolchain;
- (id)toolchainForIdentifier:(id)arg1;
- (BOOL)registerToolchain:(id)arg1 error:(id *)arg2;
- (id)init;
- (id)initWithSearchPath:(id)arg1;

@end

@interface DVTPerformanceTestOutput : NSObject <NSCopying>
{
    NSString *_name;
    NSArray *_results;
}

@property(readonly) NSArray *results; // @synthesize results=_results;
@property(readonly) NSString *name; // @synthesize name=_name;
- (id)stringRepresentation;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1 results:(id)arg2;

@end

@interface DVTPerformanceTestResult : NSObject <NSCopying>
{
    NSString *_name;
    NSString *_value;
}

@property(readonly) NSString *value; // @synthesize value=_value;
@property(readonly) NSString *name; // @synthesize name=_name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithName:(id)arg1 value:(id)arg2;

@end

@interface DVTPerformanceTestLogger_TimeForWork : NSObject <DVTPerformanceTestParser>
{
    DVTRegularExpression *_regularExpression;
}

+ (void)testCaseWithClassName:(id)arg1 methodName:(id)arg2 logNumberOfTestIterations:(unsigned long long)arg3 minDuration:(double)arg4 maxDuration:(double)arg5 averageDuration:(double)arg6 standardDeviation:(double)arg7 firstIterationDuration:(double)arg8;
- (BOOL)performanceTestOutput:(id *)arg1 forInputString:(id)arg2;
- (id)init;

@end

@interface DVTObjCSourceModelParser : DVTSourceModelParser
{
    void *_lexer;
}

+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (void)initializeLexerModes;
+ (id)languageSpecification;
- (void)_endLexerMode:(unsigned long long)arg1;
- (void)_beginLexerMode:(unsigned long long)arg1;
- (BOOL)_getNextToken:(CDStruct_341fcc3f *)arg1 temporaryFlags:(unsigned long long)arg2;
- (unsigned long long)_currentLocation;
- (void)_setCurrentLocation:(unsigned long long)arg1;
- (void)_resetLexerWithInputString:(id)arg1;
- (id)init;

@end

@interface DVTSourceModelParser : NSObject
{
    DVTLanguageSpecification *_langSpec;
    long long _langId;
    long long _langToken;
    CDStruct_341fcc3f _currentToken;
    CDStruct_627e0f85 _parseRange;
    BOOL _saveToken;
    BOOL _validToken;
    struct _NSRange _previousTokenRange;
    NSMutableArray *_nodeStack;
    NSMutableArray *_productionState;
    NSMutableIndexSet *_validProductionStates;
    struct _NSRange _dirtyRange;
}

+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (id)languageSpecification;
+ (void)initializeLanguageSpecification:(id)arg1;
- (BOOL)_atEndOfParseRange;
- (void)_endLexerMode:(unsigned long long)arg1;
- (void)_beginLexerMode:(unsigned long long)arg1;
- (BOOL)_getNextToken:(CDStruct_341fcc3f *)arg1 temporaryFlags:(unsigned long long)arg2;
- (unsigned long long)_currentLocation;
- (void)_setCurrentLocation:(unsigned long long)arg1;
- (void)_resetLexerWithInputString:(id)arg1;
- (unsigned long long)_reuseScopeNode:(id)arg1 using:(id)arg2;
- (id)_branchToReuseInScope:(id)arg1 atLocation:(unsigned long long)arg2 node:(id)arg3;
- (unsigned long long)_acceptChildrenInScope:(id)arg1 atIndex:(unsigned long long)arg2 stackRange:(struct _NSRange)arg3 node:(id)arg4;
- (id)_reduceToProduction:(id)arg1 stackRange:(struct _NSRange)arg2 node:(id)arg3 inScope:(id)arg4;
- (void)_initializeProductionStateForNode:(id)arg1 nodeInteriorPredictSet:(id)arg2 nodeInteriorPredictSetCount:(unsigned long long)arg3;
- (void)_initializeProductionStateForCurrentToken:(id)arg1 tokenInteriorPredictSet:(id)arg2 tokenInteriorPredictSetCount:(unsigned long long)arg3;
- (unsigned long long)_reuseAndSkipAhead:(id)arg1 index:(unsigned long long)arg2 location:(unsigned long long)arg3;
- (unsigned long long)_discardChildrenInScope:(id)arg1 fromIndex:(unsigned long long)arg2 toLocation:(unsigned long long)arg3;
- (unsigned long long)_replaceItemsWithinRange:(id)arg1 newArray:(id)arg2 index:(unsigned long long)arg3;
- (id)_parseOutOfBand:(id)arg1;
- (id)_parse:(id)arg1 inScope:(id)arg2 node:(id)arg3 outOfBand:(long long)arg4;
- (id)parse:(id)arg1 withContext:(id)arg2 inputString:(id)arg3 range:(struct _NSRange)arg4 dirtyRange:(struct _NSRange *)arg5;
- (id)init;

@end

@interface DVTSourceModelParserInteriorProductionRule : NSObject
{
    DVTSourceModelParserProductionRule *_prodRule;
    BOOL _optional;
    BOOL _repeatable;
    DVTSourceModelParserInteriorProductionRule *_nextCandidate;
    unsigned long long _temporaryLexerFlags;
}

@property(nonatomic) unsigned long long temporaryLexerFlags; // @synthesize temporaryLexerFlags=_temporaryLexerFlags;
@property(retain, nonatomic) DVTSourceModelParserInteriorProductionRule *nextCandidate; // @synthesize nextCandidate=_nextCandidate;
@property(readonly, nonatomic) BOOL repeatable; // @synthesize repeatable=_repeatable;
@property(readonly, nonatomic) BOOL optional; // @synthesize optional=_optional;
@property(readonly, nonatomic) DVTSourceModelParserProductionRule *prodRule; // @synthesize prodRule=_prodRule;
- (id)description;
- (id)initWithProductionRule:(id)arg1 optional:(BOOL)arg2 repeatable:(BOOL)arg3;

@end

@interface DVTSourceModelParserProductionRule : NSObject
{
    int _startToken;
    int _endToken;
    DVTLanguageSpecification *_startProduction;
    DVTLanguageSpecification *_endProduction;
    int _altEndToken;
    DVTLanguageSpecification *_altEndProduction;
    NSArray *_predictSet;
    NSArray *_interiorProductionRules;
    DVTLanguageSpecification *_langSpec;
    long long _itemToken;
    short _itemSyntaxType;
    BOOL _blockScope;
    BOOL _inheritsNodeType;
    BOOL _ignoreToken;
    BOOL _itemIsVolatile;
    BOOL _saveEndToken;
    unsigned long long _lexerMode;
    NSArray *_tokenInteriorPredictSet;
    NSArray *_nodeInteriorPredictSet;
    BOOL _interiorRuleMayHaveTemporaryLexerFlags;
}

+ (void)initializeProductionsForLanguageSpecification:(id)arg1;
+ (unsigned long long)indexOfProductionMatchingNode:(id)arg1 inArray:(id)arg2;
+ (unsigned long long)indexOfProductionMatchingToken:(int)arg1 inArray:(id)arg2;
+ (int)tokenForSymbol:(id)arg1;
@property(nonatomic) BOOL interiorRuleMayHaveTemporaryLexerFlags; // @synthesize interiorRuleMayHaveTemporaryLexerFlags=_interiorRuleMayHaveTemporaryLexerFlags;
@property(retain, nonatomic) NSArray *nodeInteriorPredictSet; // @synthesize nodeInteriorPredictSet=_nodeInteriorPredictSet;
@property(retain, nonatomic) NSArray *tokenInteriorPredictSet; // @synthesize tokenInteriorPredictSet=_tokenInteriorPredictSet;
@property(nonatomic) unsigned long long lexerMode; // @synthesize lexerMode=_lexerMode;
@property(nonatomic) BOOL saveEndToken; // @synthesize saveEndToken=_saveEndToken;
@property(nonatomic) BOOL itemIsVolatile; // @synthesize itemIsVolatile=_itemIsVolatile;
@property(nonatomic) BOOL ignoreToken; // @synthesize ignoreToken=_ignoreToken;
@property(nonatomic) BOOL inheritsNodeType; // @synthesize inheritsNodeType=_inheritsNodeType;
@property(nonatomic) BOOL blockScope; // @synthesize blockScope=_blockScope;
@property(nonatomic) short itemSyntaxType; // @synthesize itemSyntaxType=_itemSyntaxType;
@property(nonatomic) long long itemToken; // @synthesize itemToken=_itemToken;
@property(readonly, nonatomic) DVTLanguageSpecification *langSpec; // @synthesize langSpec=_langSpec;
@property(retain, nonatomic) NSArray *interiorProductionRules; // @synthesize interiorProductionRules=_interiorProductionRules;
@property(readonly, nonatomic) NSArray *predictSet; // @synthesize predictSet=_predictSet;
@property(nonatomic) __weak DVTLanguageSpecification *altEndProduction; // @synthesize altEndProduction=_altEndProduction;
@property(nonatomic) int altEndToken; // @synthesize altEndToken=_altEndToken;
@property(nonatomic) __weak DVTLanguageSpecification *endProduction; // @synthesize endProduction=_endProduction;
@property(readonly, nonatomic) DVTLanguageSpecification *startProduction; // @synthesize startProduction=_startProduction;
@property(readonly, nonatomic) int endToken; // @synthesize endToken=_endToken;
@property(readonly, nonatomic) int startToken; // @synthesize startToken=_startToken;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (BOOL)matchEndNode:(id)arg1;
- (BOOL)matchEndToken:(int)arg1;
- (BOOL)matchNode:(id)arg1;
- (BOOL)matchToken:(int)arg1;
@property(readonly, nonatomic) BOOL scopeProduction;
- (id)initWithStartProduction:(id)arg1 langSpec:(id)arg2;
- (id)initWithStartToken:(int)arg1 endToken:(int)arg2 langSpec:(id)arg3 predictSet:(id)arg4;

@end

@interface DVTSourceModelParserProductionState : NSObject
{
    DVTSourceModelParserProductionRule *_productionRule;
    unsigned long long _stackOffset;
    DVTSourceModelParserProductionState *_innerState;
    unsigned long long _currentRuleIndex;
    BOOL _canSkipCurrentRule;
    BOOL _hasInnerState;
    BOOL _completeMatch;
    BOOL _epsilonMatch;
}

- (id)description;
- (id)reduceToProduction:(id *)arg1 stackOffset:(unsigned long long *)arg2;
- (BOOL)matchNode:(id)arg1 currentStackTop:(unsigned long long)arg2;
- (BOOL)matchToken:(int)arg1 currentStackTop:(unsigned long long)arg2;
@property(readonly, nonatomic) unsigned long long temporaryLexerFlags;
@property(readonly, nonatomic) DVTSourceModelParserProductionRule *scopeProduction;
@property(readonly, nonatomic) BOOL epsilonMatch; // @synthesize epsilonMatch=_epsilonMatch;
@property(readonly, nonatomic) BOOL completeMatch; // @synthesize completeMatch=_completeMatch;
- (void)resetWithProductionRule:(id)arg1 stackOffset:(unsigned long long)arg2;
- (id)initWithProductionRule:(id)arg1 stackOffset:(unsigned long long)arg2;

@end

@interface DVTLicenseAgreementHelper : NSObject
{
    int _installedLicenseType;
    NSString *_installedLicenseID;
}

+ (BOOL)shouldShowLicenseAgreementForInstalledXcodeLicenseID:(id)arg1 lastAgreedToLicenseID:(id)arg2 installedXcodeVersion:(id)arg3 xcodeVersionForLastAgreedToLicense:(id)arg4;
@property(readonly) NSString *installedLicenseID; // @synthesize installedLicenseID=_installedLicenseID;
@property(readonly) int installedLicenseType; // @synthesize installedLicenseType=_installedLicenseType;
- (BOOL)shouldShowLicenseAgreement;
- (void)_setXcodeDefaultForKey:(id)arg1 value:(id)arg2;
- (id)_getXcodeDefaultForKey:(id)arg1;
- (void)agreeToLicense;
- (id)_getLoggedInUserName;
- (BOOL)_isRunningAsSuperUser;
- (id)initWithLicenseInfoPath:(id)arg1;

@end

@interface DVTCertificateUtilities : NSObject
{
}

+ (id)expirationDateForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)issueDateForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)_dateFromCertificate:(struct OpaqueSecCertificateRef *)arg1 forOID:(id)arg2;
+ (id)platformIdentifierForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)sha1HashForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)defaultDesignatedRequirementsForIdentifier:(id)arg1 andCertificate:(struct OpaqueSecCertificateRef *)arg2;
+ (_Bool)isCertificateTrusted:(struct OpaqueSecCertificateRef *)arg1;
+ (_Bool)_isCertificateDataTrusted:(id)arg1;
+ (_Bool)hasCertificateExpired:(struct OpaqueSecCertificateRef *)arg1;
+ (_Bool)isCertificateAnIdentity:(struct OpaqueSecCertificateRef *)arg1;
+ (id)portalTeamNameFromCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)portalTeamIDFromCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)_valueInSubjectNameSectionFromCertificate:(struct OpaqueSecCertificateRef *)arg1 forOID:(id)arg2;
+ (id)trimmedNameForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (id)allSigningCertificates;
+ (id)allSigningIdentityCertificates;
+ (id)allSigningCertificates_Sync;
+ (id)allSigningIdentityCertificates_Sync;
+ (void)_scanForSigningCertificates;
+ (void)_scanForSigningIdentityCertificates;
+ (void)_setupKeychainCallback;
+ (struct dispatch_queue_s *)certificateScanQueue;
+ (struct dispatch_queue_s *)certificateLockQueue;
+ (id)displayNameForCertificateKind:(id)arg1;
+ (id)certificateKindForCertificate:(struct OpaqueSecCertificateRef *)arg1;
+ (_Bool)loadFirstTimeInBackground;
+ (void)setLoadFirstTimeInBackground:(_Bool)arg1;

@end

@interface DVTUserNotificationCenter : NSObject <NSUserNotificationCenterDelegate>
{
    NSMutableDictionary *_handlers;
}

+ (id)defaultUserNotificationCenter;
- (BOOL)userNotificationCenter:(id)arg1 shouldPresentNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didRemoveDeliveredNotifications:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didActivateNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
- (void)removeAllDeliveredNotifications;
- (void)removeDeliveredNotification:(id)arg1;
- (void)deliverNotification:(id)arg1 withEventHandler:(id)arg2;
- (void)deliverNotification:(id)arg1;
@property(readonly) NSArray *deliveredNotifications;
- (void)removeScheduledNotification:(id)arg1;
- (void)scheduleNotification:(id)arg1 withEventHandler:(id)arg2;
- (void)scheduleNotification:(id)arg1;
@property(copy) NSArray *scheduledNotifications;
- (id)init;

@end

@interface DVTBloomFilter : NSObject
{
    id hashProvider;
    CDStruct_d703e233 specification;
    struct {
        char *bytes;
        unsigned long long byteCount;
    } bitVector;
}

@property(copy) id hashProvider; // @synthesize hashProvider;
- (long long)indexSize;
@property(readonly) NSString *usageDescription;
- (BOOL)mightContainKey:(const CDStruct_f444e920 *)arg1;
- (void)addKey:(const CDStruct_f444e920 *)arg1;
- (void)dealloc;
- (void)finalize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSpecification:(CDStruct_d703e233)arg1 hashProvider:(id)arg2;

@end

@interface DVTDocumentFragmentFilter : NSObject
{
    DVTBloomFilter *filter;
    CDStruct_26ab8ed5 specification;
}

+ (id)normalizedFoldedString:(id)arg1;
@property(readonly, nonatomic) double timestamp;
@property(readonly) NSString *usageDescription;
- (long long)indexSize;
- (BOOL)mightContainFragment:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDocument:(id)arg1 filterSpecification:(CDStruct_26ab8ed5)arg2;

@end

@interface DVTLibraryFragmentFilter : NSObject
{
    NSMutableDictionary *identifiedDocuments;
    CDStruct_fd921134 specification;
    DVTDispatchLock *_dispatchLock;
    id <DVTLibraryFragmentFilterDelegate> _delegate;
}

@property(nonatomic) id <DVTLibraryFragmentFilterDelegate> delegate; // @synthesize delegate=_delegate;
- (id)unitTestingDescription;
- (long long)indexSize;
- (id)candidateIdentifiersForQuery:(id)arg1 allIdentifiers:(id *)arg2;
- (id)candidateIdentifiersForQuery:(id)arg1;
- (void)removeFiltersForIdentifiers:(id)arg1;
- (void)removeFilterForIdentifier:(id)arg1;
- (id)allIdentifiers;
- (void)addFilterWithDocument:(id)arg1 timestamp:(double)arg2 forIdentifier:(id)arg3;
- (void)loadFiltersFromData:(id)arg1 validationBlock:(id)arg2;
- (id)saveFiltersToData;
- (id)initWithFilterSpecification:(CDStruct_fd921134)arg1;

@end

@interface DVTWeakReference : NSObject
{
    id _representedObject;
}

+ (id)weakReferenceForRepresentedObject:(id)arg1;
@property(retain) id representedObject; // @synthesize representedObject=_representedObject;

@end

@interface _DVTWeakInterposerHelper : NSObject
{
    DVTWeakInterposer *_interposer;
    id _representedObject;
}

@property __weak id representedObject; // @synthesize representedObject=_representedObject;
@property(retain) DVTWeakInterposer *interposer; // @synthesize interposer=_interposer;
- (void)dealloc;

@end

@interface DVTWeakInterposer : NSObject
{
    _DVTWeakInterposerHelper *_helper;
}

+ (id)weakInterposerForRepresentedObject:(id)arg1;
@property __weak _DVTWeakInterposerHelper *helper; // @synthesize helper=_helper;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly) id representedObject;
- (void)dealloc;

@end

@interface DVTObjCPlusPlusSourceModelParser : DVTObjCSourceModelParser
{
}

+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (void)initializeLexerModes;
+ (id)languageSpecification;
- (void)_resetLexerWithInputString:(id)arg1;
- (id)init;

@end

@interface DVTRegistry : NSObject
{
    DVTReaderWriterLock *_lock;
    DVTMutableOrderedDictionary *_identsToRegisteredObjects;
    NSString *_debugName;
}

@property(readonly) NSString *debugName; // @synthesize debugName=_debugName;
@property(readonly) DVTMutableOrderedDictionary *identsToRegisteredObjects; // @synthesize identsToRegisteredObjects=_identsToRegisteredObjects;
@property(readonly) DVTReaderWriterLock *lock; // @synthesize lock=_lock;
- (id)description;
- (id)allRegisteredObjects;
- (id)objectForIdentifier:(id)arg1;
- (void)didRegisterObject:(id)arg1 replacingObject:(id)arg2;
- (BOOL)registerObject:(id)arg1 collisionHandler:(id)arg2;
- (id)init;
- (id)initWithDebugName:(id)arg1;

@end

@interface DVTOneShotBlock : NSObject <DVTInvalidation_New>
{
    id _callbackBlock;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (id)initWithCallbackBlock:(id)arg1;

@end

@interface DVTSystemStatisticsMeasurement : NSObject
{
    long long _numberOfVMPageouts;
    long long _numberOfVMPageins;
    double _wallClockTime;
}

+ (id)systemStatisticsMeasurement;
@property double wallClockTime; // @synthesize wallClockTime=_wallClockTime;
@property long long numberOfVMPageins; // @synthesize numberOfVMPageins=_numberOfVMPageins;
@property long long numberOfVMPageouts; // @synthesize numberOfVMPageouts=_numberOfVMPageouts;
- (id)systemStatisticsMeasurementByMakingRelativeToMeasurement:(id)arg1;
- (long long)compare:(id)arg1;
- (id)init;
- (id)initWithWallClockTime:(double)arg1 numberOfVMPageins:(long long)arg2 numberOfVMPageouts:(long long)arg3;

@end

@interface DVTDynamicLogController : NSObject
{
    NSString *_path;
    DVTDispatchLock *_dispatchLock;
}

+ (id)dynamicLogControllerForPath:(id)arg1 createIfNeeded:(BOOL)arg2 returningError:(id *)arg3;
@property DVTDispatchLock *dispatchLock; // @synthesize dispatchLock=_dispatchLock;
@property NSString *path; // @synthesize path=_path;
- (BOOL)writeString:(id)arg1 toFileAtSubpath:(id)arg2 returningError:(id *)arg3;
- (id)initWithPath:(id)arg1;

@end

@interface DVTMemorySnapshot : NSObject
{
    DVTLogAspect *_aspect;
    NSCountedSet *_incrementsForSnapshotTypes;
    DVTDispatchLock *_incrementLock;
}

+ (id)_baseOutputFolder;
+ (id)snapshotForLogAspect:(id)arg1;
+ (void)initialize;
- (void)takeVmmapSnapshotWithLogLevel:(int)arg1 logFormat:(id)arg2;
- (void)_takeVmmapSnapshotWithLogLevel:(int)arg1 toFilePath:(id)arg2 logString:(id)arg3;
- (void)cleanupBeforeTakingSnapshotsWithLogLevel:(int)arg1 logFormat:(id)arg2;
- (unsigned long long)_newIncrementForSnapshotType:(id)arg1;
- (id)initWithAspect:(id)arg1;

@end

@interface DVTMTReport : NSObject
{
    struct __aslmsg *_message;
}

@property struct __aslmsg *message; // @synthesize message=_message;
- (void)recordSuccess:(BOOL)arg1 reason:(id)arg2;
- (void)recordID:(id)arg1 forKey:(char *)arg2;
- (void)recordNumber:(long long)arg1 forKey:(char *)arg2;
- (void)recordNumber:(long long)arg1 forKey:(char *)arg2 deresolver:(id)arg3;
- (void)recordTimeResult:(double)arg1 forKey:(char *)arg2;
- (void)recordTimeResult:(double)arg1 forKey:(char *)arg2 deresolver:(id)arg3;
- (void)logReport;
- (void)finalize;
- (void)dealloc;
- (void)_freeMsg;
- (id)initWithDomain:(char *)arg1 summarize:(BOOL)arg2;

@end

@interface DVTMessageTrace : NSObject
{
}

+ (void)reportDetail:(char *)arg1 collecting:(id)arg2;
+ (void)report:(char *)arg1 success:(BOOL)arg2 reason:(id)arg3;
+ (void)report:(char *)arg1 ID:(id)arg2;
+ (void)report:(char *)arg1 number:(long long)arg2;
+ (void)report:(char *)arg1 number:(long long)arg2 deresolver:(id)arg3;
+ (void)report:(char *)arg1 timeResult:(double)arg2;
+ (void)report:(char *)arg1 timeResult:(double)arg2 deresolver:(id)arg3;
+ (void)reportHit:(char *)arg1;
+ (void)reportForDomain:(char *)arg1 summarize:(BOOL)arg2 collecting:(id)arg3;
+ (double)delay:(double)arg1;
+ (void)initialize;

@end

@interface DVTBuildVersion : NSObject
{
    NSString *_buildVersion;
    unsigned long long _buildVersionMajorNumber;
    NSString *_buildVersionMajorLetter;
    unsigned long long _buildVersionMinorNumber;
    NSString *_buildVersionMinorLetter;
}

+ (id)buildVersionWithString:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (long long)compare:(id)arg1;
@property(readonly) NSString *buildVersionMinorLetter;
@property(readonly) unsigned long long buildVersionMinorNumber;
@property(readonly) NSString *buildVersionMajorLetter;
@property(readonly) unsigned long long buildVersionMajorNumber;
- (void)_parseBuildVersionIfNecessary;
- (id)name;
- (id)initWithString:(id)arg1;

@end

@interface NSFileManager (DVTNSFileManagerAdditions)
+ (BOOL)dvt_isPathValidForFileManagerOperations:(id)arg1;
- (id)dvt_availableFilenameInDirectory:(id)arg1 desiredFilename:(id)arg2;
@end

@interface NSData (DVTFoundationClassAdditions)
+ (id)dvt_dataWithFirstBytes:(unsigned long long)arg1 ofFile:(id)arg2 error:(id *)arg3;
- (id)dvt_hexString;
- (id)dvt_dataWithSHA1Digest;
- (id)dvt_dataWithMD5Digest;
@end

@interface NSMutableData (DVTFoundationClassAdditions)
- (void)dvt_appendMD5DigestOfData:(id)arg1;
- (void)dvt_appendMD5DigestOfBytes:(const void *)arg1 length:(unsigned long long)arg2;
@end

@interface NSString (DVTFoundationClassAdditions)
+ (id)dvt_stringWithUniqueFileNameSuffixForDistinguishingStrings:(id)arg1;
+ (BOOL)dvt_isFileUTF8WithBOM:(id)arg1 fileData:(id)arg2;
+ (BOOL)dvt_isFileUnicode:(id)arg1 fileData:(id)arg2;
+ (id)dvt_UUIDString;
+ (id)dvt_localizedNameOfLineEnding:(unsigned long long)arg1;
+ (BOOL)dvt_isDataUTF8WithBOM:(id)arg1;
+ (BOOL)dvt_isDataUnicodeEncoded:(id)arg1 isBigEndian:(char *)arg2;
+ (id)dvt_stringWithPotentiallyMalformedUTF8Bytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)dvt_stringWithPotentiallyMalformedUTF8Bytes:(const char *)arg1 length:(unsigned long long)arg2 stopAtTrailingIncompleteUTF8Sequence:(BOOL)arg3 getUsedLength:(unsigned long long *)arg4 getNumberOfMalformedSequences:(unsigned long long *)arg5;
+ (id)dvt_stringWithFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)dvt_stringWithFileSystemRepresentation:(const char *)arg1;
- (void)dvt_enumerateOccurancesOfSubstring:(id)arg1 options:(unsigned long long)arg2 usingBlock:(id)arg3;
- (id)dvt_md5Hash;
- (id)dvt_stringByRepeating:(unsigned long long)arg1;
- (id)dvt_componentsSeparatedByUnquotedWhitespacePreservingQuotes:(BOOL)arg1;
- (id)dvt_stringByMakingAbsolutePathWithBasePath:(id)arg1;
- (id)dvt_stringByMakingPathRelativeToBasePath:(id)arg1;
- (id)dvt_stringByStrippingExtraZeroesAfterDecimalPlace;
- (id)dvt_capitalizedWordsFromString;
- (id)dvt_wordsFromString;
- (id)dvt_wordsFromStringWithLetterCasing:(unsigned long long)arg1;
- (long long)dvt_versionNumberComparison:(id)arg1;
- (id)dvt_dataForHexString;
- (id)dvt_stringByRemovingCStringEscapeSequences;
- (id)dvt_stringByQuotingOnlyIfNeeded:(BOOL)arg1 quoteTabsAndEOLs:(BOOL)arg2 quoteHighBitUnichars:(BOOL)arg3;
- (id)dvt_stringByQuotingIfNeeded;
- (struct _NSRange)dvt_characterRangeForLineRange:(struct _NSRange)arg1;
- (unsigned long long)dvt_adlerHashWithRange:(struct _NSRange)arg1;
- (id)dvt_stringByStandardizingWithLineEnding:(unsigned long long)arg1;
- (id)dvt_stringByLowercasingFirstCharacter;
- (id)dvt_stringByCapitalizingFirstCharacter;
- (id)dvt_lastKeyPathComponent;
- (id)dvt_firstKeyPathComponent;
- (id)dvt_stringByRemovingLeadingAndTrailingCharactersInSet:(id)arg1;
- (id)dvt_stringByReplacingWhitespaceRunsWithCharacter:(unsigned short)arg1 range:(struct _NSRange)arg2;
- (id)dvt_stringByDeletingAllWhitespace;
- (id)dvt_stringByRemovingSuffix:(id)arg1;
- (id)dvt_stringByRemovingPrefix:(id)arg1;
- (BOOL)dvt_getFileSystemRepresentation:(char *)arg1 maxLength:(unsigned long long)arg2;
@end

@interface NSMutableString (DVTFoundationClassAdditions)
- (void)dvt_standardizeWithLineEnding:(unsigned long long)arg1;
- (void)dvt_standardizeWithLineEnding:(unsigned long long)arg1 range:(struct _NSRange)arg2;
@end

@interface NSCharacterSet (DVTFoundationClassAdditions)
@end

@interface NSArray (DVTFoundationClassAdditions)
- (id)dvt_arrayByAddingObjects:(id)arg1;
- (id)dvt_subarrayFromIndex:(long long)arg1;
- (id)dvt_subarrayAfterIndex:(long long)arg1;
- (id)dvt_arrayByReversingObjects;
- (BOOL)dvt_areAnyObjectsPassingTest:(id)arg1;
- (BOOL)dvt_areAllObjectsPassingTest:(id)arg1;
- (id)dvt_objectsPassingTest:(id)arg1;
- (id)dvt_objectByFoldingWithBlock:(id)arg1;
- (id)dvt_onlyObject;
- (id)dvt_firstObjectPassingTest:(id)arg1;
- (id)dvt_firstObject;
- (id)dvt_arrayByApplyingBlock:(id)arg1;
- (id)dvt_arrayByApplyingSelector:(SEL)arg1;
- (struct _NSRange)dvt_rangeOfArray:(id)arg1;
- (struct _NSRange)dvt_rangeOfArray:(id)arg1 inRange:(struct _NSRange)arg2;
@end

@interface NSMutableArray (DVTFoundationClassAdditions)
- (void)dvt_addObjectsFromCollection:(id)arg1;
- (void)dvt_addObjectsFromArrayIfAbsent:(id)arg1;
- (void)dvt_addObjectIfAbsent:(id)arg1;
- (id)dvt_popLastObject;
- (id)dvt_popFirstObject;
@end

@interface NSDictionary (DVTFoundationClassAdditions)
+ (id)dvt_strictDictionaryWithKeysAndObjects:(id)arg1;
+ (id)dvt_dictionaryWithKeysAndValues:(id)arg1;
- (id)dvt_dictionaryByApplyingBlock:(id)arg1;
- (BOOL)dvt_areAnyEntriesPassingTest:(id)arg1;
- (BOOL)dvt_areAllEntriesPassingTest:(id)arg1;
- (id)dvt_entriesPassingTest:(id)arg1;
- (struct CGRect)dvt_rectForKey:(id)arg1 defaultValue:(struct CGRect)arg2;
- (struct CGSize)dvt_sizeForKey:(id)arg1 defaultValue:(struct CGSize)arg2;
- (struct CGPoint)dvt_pointForKey:(id)arg1 defaultValue:(struct CGPoint)arg2;
- (double)dvt_doubleForKey:(id)arg1 defaultValue:(double)arg2;
- (float)dvt_floatForKey:(id)arg1 defaultValue:(float)arg2;
- (BOOL)dvt_boolForKey:(id)arg1 defaultValue:(BOOL)arg2;
- (id)dvt_stringForKey:(id)arg1 defaultValue:(id)arg2;
- (long long)dvt_integerForKey:(id)arg1 defaultValue:(long long)arg2;
- (id)dvt_numberOrNilForKey:(id)arg1;
- (id)dvt_dateOrNilForKey:(id)arg1;
- (id)dvt_arrayOrNilForKey:(id)arg1;
- (id)dvt_dictionaryOrNilForKey:(id)arg1;
- (id)dvt_dataOrNilForKey:(id)arg1;
- (id)dvt_stringOrNilForKey:(id)arg1;
@end

@interface NSMutableDictionary (DVTFoundationClassAdditions)
- (void)dvt_setRect:(struct CGRect)arg1 forKey:(id)arg2;
- (void)dvt_setSize:(struct CGSize)arg1 forKey:(id)arg2;
- (void)dvt_setPoint:(struct CGPoint)arg1 forKey:(id)arg2;
- (void)dvt_setDouble:(double)arg1 forKey:(id)arg2;
- (void)dvt_setFloat:(float)arg1 forKey:(id)arg2;
- (void)dvt_setBool:(BOOL)arg1 forKey:(id)arg2;
- (void)dvt_setInteger:(long long)arg1 forKey:(id)arg2;
- (void)dvt_addObject:(id)arg1 toArrayForKey:(id)arg2;
- (void)dvt_setObject:(id)arg1 forKey:(id)arg2 inDictionaryForKey:(id)arg3;
@end

@interface NSObject (DVTAssertionSupport)
+ (id)descriptionForAssertionMessage;
- (id)descriptionForAssertionMessage;
@end

@interface NSObject (DVTXMLArchiving)
- (void)dvt_encodeRelationshipsWithXMLArchiver:(id)arg1;
- (void)dvt_encodeAttributesWithXMLArchiver:(id)arg1;
- (void)dvt_encodeWithXMLArchiver:(id)arg1 version:(id)arg2;
@end

@interface NSObject (DVTXMLUnarchivingPartial)
- (void)dvt_awakeFromXMLUnarchiver:(id)arg1;
- (void)dvt_setProperty:(id)arg1 fromUTF8String:(const char *)arg2 fromXMLUnarchiver:(id)arg3;
@end

@interface NSObject (DVTKVCMutableCollectionPropertySupport)
+ (void)synthesizeMutableSetProperty:(id)arg1 withInstanceVariable:(id)arg2;
+ (void)synthesizeMutableArrayProperty:(id)arg1 withInstanceVariable:(id)arg2;
@end

@interface NSObject (DVTObservingConvenience)
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withHandlerBlock:(id)arg3;
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 withHandlerBlock:(id)arg4;
- (void)dvt_unregisterValueChangedCallbackForKeyPath:(id)arg1;
- (void)dvt_unregisterValueChangedCallbackForKeyPath:(id)arg1 ofObject:(id)arg2;
- (void)dvt_registerValueChangedCallback:(SEL)arg1 forKeyPath:(id)arg2;
- (void)dvt_registerValueChangedCallback:(SEL)arg1 forKeyPath:(id)arg2 ofObject:(id)arg3;
- (void)_dvt_setObserverTokensForKeyPath:(id)arg1;
- (id)_dvt_observerTokensForKeyPath;
@end

@interface NSArray (DVTObservingConvenience)
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withHandlerBlock:(id)arg3;
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 withHandlerBlock:(id)arg4;
@end

@interface NSObject (DVTSharedObserverAccess)
- (id)dvt_sharedObserverForKeyPath:(id)arg1;
@end

@interface NSObject (DVTPropertyLinking)
- (void)dvt_removeObserverWithName:(id)arg1 fromKeyPath:(id)arg2 ofObject:(id)arg3;
- (void)dvt_addObserverWithName:(id)arg1 toKeyPath:(id)arg2 ofObject:(id)arg3 block:(id)arg4;
@end

@interface NSArray (DVTRangeArrayAdditions)
- (struct _NSRange)rangeAtIndex:(unsigned long long)arg1;
@end

@interface NSObject (DVTNSRunLoopAdditions)
- (void)dvt_performOnThread:(id)arg1 waitUntilDone:(BOOL)arg2 usingBlock:(id)arg3;
- (void)_dvt_performBlockAfterDelay:(id)arg1;
- (id)dvt_performAfterDelay:(double)arg1 usingBlock:(id)arg2;
- (id)dvt_performAfterDelay:(double)arg1 inModes:(id)arg2 usingBlock:(id)arg3;
@end

@interface NSRunLoop (DVTNSRunLoopAdditions)
- (id)dvt_performInModes:(id)arg1 withOrder:(long long)arg2 usingBlock:(id)arg3;
@end

@interface NSArray (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSData (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSNumber (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSDictionary (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSString (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSUserDefaults (DVTNSUserDefaultsAdditions)
- (BOOL)dvt_objectIsChangedForKey:(id)arg1;
- (id)dvt_objectForKey:(id)arg1 inVolatileDomainForName:(id)arg2;
@end

@interface NSXMLElement (DVTFoundationClassAdditions)
- (id)dvt_elements;
@end

@interface NSInputStream (DVTFoundationClassAdditions)
- (long long)dvt_readSignedLEB128Integer;
- (unsigned long long)dvt_readUnsignedLEB128Integer;
@end

@interface NSOutputStream (DVTFoundationClassAdditions)
- (void)dvt_writeSignedLEB128Integer:(long long)arg1;
- (void)dvt_writeUnsignedLEB128Integer:(unsigned long long)arg1;
@end

@interface NSSet (DVTNSSetAdditions)
- (id)dvt_objectByFoldingWithBlock:(id)arg1;
- (id)dvt_anyObjectPassingTest:(id)arg1;
- (id)dvt_setByFilteringUsingBlock:(id)arg1;
- (id)dvt_setByApplyingBlock:(id)arg1;
- (id)dvt_setByApplyingSelector:(SEL)arg1;
- (id)dvt_setBySubtractingSet:(id)arg1;
- (id)dvt_setByIntersectingSet:(id)arg1;
- (Class)dvt_mutableClass;
@end

@interface NSURL (DVTNSURLAdditions)
+ (id)dvt_fileURLWithAbsoluteOrRelativePath:(id)arg1;
- (id)dvt_sanitizedFilePath;
@end

@interface NSMapTable (DVTNSMapTableAdditions)
+ (id)dvt_strongObjectToStrongObjectTable;
+ (id)dvt_strongObjectPointerToStrongObjectTable;
- (void)dvt_enumerateKeysAndObjectsUsingBlock:(id)arg1;
- (id)dvt_allValues;
- (id)dvt_allKeys;
@end

@interface NSObject (DVTSimpleSerialization) <DVTSimpleSerialization>
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
@end

@interface NSString (DVTMacroExpansion)
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@end

@interface NSString (DVTMacroExpansion_Operators)
- (id)dvt_applyMacroExpansionOperator_count_inScope:(id)arg1;
- (id)dvt_applyMacroExpansionOperator_lower_inScope:(id)arg1;
- (id)dvt_applyMacroExpansionOperator_upper_inScope:(id)arg1;
@end

@interface NSArray (DVTMacroExpansion_Operators)
- (id)dvt_applyMacroExpansionOperator_count_inScope:(id)arg1;
@end

@interface NSNotificationCenter (DVTNSNotificationCenterAdditions)
+ (void)load;
- (id)__private__addObserverForName:(id)arg1 object:(id)arg2 queue:(id)arg3 usingBlock:(id)arg4;
- (id)dvt_addObserverForName:(id)arg1 object:(id)arg2 queue:(id)arg3 usingBlock:(id)arg4;
- (id)dvt_addObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3 object:(id)arg4;
@end

@interface NSProcessInfo (DVTNSProcessInfoAdditions)
- (id)dvt_cachedEnvironment;
- (void)dvt_removeEnvironmentVariable:(id)arg1;
- (void)dvt_setValue:(id)arg1 forEnvironmentVariable:(id)arg2;
- (BOOL)dvt_shouldDisallowSaving;
- (void)dvt_setShouldDisallowSaving:(BOOL)arg1;
- (void)dvt_disableSuddenTerminationForReason:(id)arg1;
- (void)dvt_enableSuddenTerminationForReason:(id)arg1;
- (void)dvt_enableAutomaticTerminationForReason:(id)arg1;
- (void)dvt_disableAutomaticTerminationForReason:(id)arg1;
- (long long)dvt_automaticTerminationDisablingCountForReason:(id)arg1;
- (id)dvt_automaticTerminationDisablingReasons;
- (void)_dvt_setSuddenTerminationDisablingCount:(long long)arg1 forReason:(id)arg2;
- (long long)dvt_suddenTerminationDisablingCountForReason:(id)arg1;
- (id)dvt_suddenTerminationDisablingReasons;
- (id)dvt_executablePath;
- (unsigned long long)dvt_numberOfAvailableCPUs;
@end

@interface NSDate (DVTFoundationClassAdditions)
- (id)dvt_dateStringRelativeToTodayWithDateStyle:(unsigned long long)arg1 timeStyle:(unsigned long long)arg2;
@end

@interface NSFileHandle (DVTNSFileHandleAdditions)
- (BOOL)dvt_writeFormat:(id)arg1;
- (BOOL)dvt_writeFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;
- (BOOL)dvt_writeString:(id)arg1;
- (BOOL)dvt_writeString:(id)arg1 error:(id *)arg2;
- (BOOL)dvt_writeData:(id)arg1 error:(id *)arg2;
@end

@interface NSError (DVTFoundationClassAdditions)
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(long long)arg2 message:(id)arg3 recoverySuggestion:(id)arg4 recoveryOptions:(id)arg5 andRecoveryBlock:(id)arg6;
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(long long)arg2 message:(id)arg3 recoverySuggestion:(id)arg4;
+ (id)dvt_errorWithPOSIXErrorCode:(int)arg1;
+ (id)dvt_errorWithPOSIXErrorCode:(int)arg1 messageFormat:(id)arg2;
+ (id)dvt_errorWithPOSIXErrorCode:(int)arg1 messageFormat:(id)arg2 arguments:(struct __va_list_tag [1])arg3;
- (id)dvt_errorByInjectingUserInfoObject:(id)arg1 forKey:(id)arg2;
@end

@interface NSArray (DVTShellUtilitiesAdditions)
- (id)dvt_stringByConcatenatingAsShellCommandArguments;
@end

@interface NSObject (DVTExtraXMArchiveDataAdditions)
- (id)dvt_extraArchiveData;
- (void)dvt_setExtraArchiveData:(id)arg1;
@end

@interface NSMutableURLRequest (HTTPCookies)
- (void)dvt_addHTTPCookies:(id)arg1;
@end

@interface NSHTTPURLResponse (HTTPCookies)
- (id)dvt_allCookies;
@end

@interface NSDictionary (ADSAuthenticationResponse)
- (id)ads_userString;
- (id)ads_resultCode;
- (id)ads_lastName;
- (id)ads_firstName;
- (id)ads_prsId;
@end

@interface NSDictionary (ADCDownloadAuthenticationResponse)
- (id)adc_userString;
- (id)adc_resultString;
- (id)adc_resultCode;
@end

@interface NSObject (Patch_9614778)
+ (void)load;
@end

@interface NSObject (DVTCollectionCheckingAdditions)
- (void)dvt_shouldCollect;
@end

@interface NSArray (DVTCollectionCheckingAdditions)
- (void)dvt_contentsShouldCollect;
- (void)dvt_shouldCollect;
@end

@interface NSSet (DVTCollectionCheckingAdditions)
- (void)dvt_contentsShouldCollect;
@end

@interface NSDictionary (DVTCollectionCheckingAdditions)
- (void)dvt_keysAndValuesShouldCollect;
- (void)dvt_valuesShouldCollect;
- (void)dvt_keysShouldCollect;
@end

@interface SFCertificateData (DVTCertificateUtilities)
@property(readonly) _Bool trusted;
@property(readonly) NSDate *issueDate;
@property(readonly) NSDate *expirationDate;
@property(readonly) NSString *platformIdentifier;
@property(readonly) NSString *sha1Hash;
- (id)defaultDesignatedRequirementsForIdentifier:(id)arg1;
@property(readonly) _Bool isIdentity;
@property(readonly) NSString *portalTeamName;
@property(readonly) NSString *portalTeamID;
@property(readonly) NSString *humanReadableCertificateKind;
@property(readonly) NSString *certificateKind;
@property(readonly) NSString *trimmedName;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly) NSString *name;
@end

@interface NSObject (DVTArcSupport)
- (BOOL)dvt_requiresWeakIntercession;
@end

@interface NSObject (DVTInvalidation)
+ (void)dvt_setupWithInvalidationImplementingClass:(Class)arg1;
@end

@interface NSPropertyListSerialization (WorkaroundsFor11391989)
+ (id)workaroundsFor11391989_propertyListWithStream:(id)arg1 options:(unsigned long long)arg2 format:(unsigned long long *)arg3 error:(out id *)arg4;
+ (id)workaroundsFor11391989_propertyListWithData:(id)arg1 options:(unsigned long long)arg2 format:(unsigned long long *)arg3 error:(out id *)arg4;
+ (id)workaroundsFor11391989_propertyListFromData:(id)arg1 mutabilityOption:(unsigned long long)arg2 format:(unsigned long long *)arg3 errorDescription:(out id *)arg4;
@end

@interface NSString (WorkaroundsFor11391989)
- (id)workaroundsFor11391989_propertyList;
@end

@interface NSPropertyListSerialization (DVTNSPropertyListSerializationAdditions)
+ (BOOL)dvt_writePropertyList:(id)arg1 toURL:(id)arg2 format:(unsigned long long)arg3 error:(id *)arg4;
+ (id)dvt_propertyListWithURL:(id)arg1 options:(unsigned long long)arg2 format:(unsigned long long *)arg3 error:(id *)arg4;
@end

@interface NSString (DVTFileSystemRepresentationProviding)
- (void)dvt_provideFileSystemRepresentationToBlock:(id)arg1;
@end